---
import { is_prod_mode } from '@helpers/env'

export const AlertDialogXData = `
    alert_dialog_open: false,
    alert_dialog_title: '',
    alert_dialog_content: '',
    alert_dialog_return_on_accept: true,
    alert_dialog_hx: {},
    alert_dialog_partial: false,
    show_alert_dialog(args) {
        const defaults =  {
            title: '',
            content: '',
            partial: '',
            return_on_accept: true,
            hx: {
                method: 'get',
                url: false,
                target: false,
                swap: false,
            }
        }

        const properties = {...defaults, ...args}

        if (this.alert_dialog_partial != properties.partial)
            this.alert_dialog_content = ''

        if (properties.partial) {
            this.alert_dialog_content = '<div class="[ rifter-dialog ]">'+this.rifter_animation+'</div>'
        } else
            this.alert_dialog_content = properties.content

        this.alert_dialog_title = properties.title
        this.alert_dialog_return_on_accept = properties.return_on_accept
        this.alert_dialog_partial = properties.partial
        this.alert_dialog_hx = properties.hx

        this.alert_dialog_open = true

        setTimeout(function () {
            htmx.process(document.querySelector('.alert-dialog'))
        })
        
        return new Promise((resolve) => {
            this.alert_dialog_close().then((result) => {
                this.alert_dialog_open = false
                resolve(result.action == 'accept' ? this.alert_dialog_return_on_accept : false) 
            })
        })
    },
    alert_dialog_close() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('alert-dialog-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('alert-dialog-action')
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`

export const ConfirmDialogXData = `
    confirm_dialog_open: false,
    confirm_dialog_title: '',
    confirm_dialog_content: '',
    confirm_dialog_accept_disabled: false,
    confirm_dialog_return_on_accept: true,
    confirm_dialog_hx: {},
    confirm_dialog_partial: false,
    async show_confirm_dialog(args) {
        const defaults =  {
            title: '',
            content: '',
            partial: '',
            accept_disabled: false,
            return_on_accept: true,
            hx: {
                method: 'get',
                url: false,
                target: false,
                swap: false,
                vals: false,
            }
        }

        const properties = {...defaults, ...args}

        if (this.confirm_dialog_partial != properties.partial)
            this.confirm_dialog_content = ''

        if (properties.partial) {
            this.confirm_dialog_content = '<div class="[ rifter-dialog ]">'+this.rifter_animation+'</div>'
        } else
            this.confirm_dialog_content = properties.content

        this.confirm_dialog_title = properties.title
        this.confirm_dialog_return_on_accept = properties.return_on_accept
        this.confirm_dialog_partial = properties.partial
        this.confirm_dialog_post_params = properties.post_params
        this.confirm_dialog_accept_disabled = properties.accept_disabled
        this.confirm_dialog_hx = properties.hx

        this.confirm_dialog_open = true

        setTimeout(function () {
            htmx.process(document.querySelector('.confirm-dialog'))
        })

        return new Promise((resolve) => {
            this.confirm_dialog_close().then((result) => {
                this.confirm_dialog_open = false
                resolve(result.action == 'accept' ? this.confirm_dialog_return_on_accept : false) 
            })
        })
    },
    confirm_dialog_close() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('confirm-dialog-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('confirm-dialog-action')
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },
    confirm_dialog_set_accept_disable(val) {
        this.confirm_dialog_accept_disabled // dont remove this line
        this.confirm_dialog_accept_disabled = val
    },`

export const ModalXData = `
    modal_open: false,
    modal_content: '',
    modal_partial: '',
    modal_partial_params: '',
    async show_modal(args) {
        const defaults =  {
            content: '',
            partial: '',
            return_on_accept: true,
        }

        const properties = {...defaults, ...args}

        if (this.modal_partial != properties.partial) {
            this.modal_content = ''
            ${!is_prod_mode() ? `console.log('Modal cache cleared!')` : ''}
        }

        if (properties.partial_params && (JSON.stringify(properties.partial_params) != JSON.stringify(this.modal_partial_params))) {
            this.modal_content = ''
            ${!is_prod_mode() ? `console.log('Modal cache cleared!')` : ''}
        }

        if (properties.partial) {
            this.modal_content = '<div class="[ rifter-modal ]">'+this.rifter_animation+'</div>'
        } else
            this.modal_content = properties.content

        this.modal_return_on_accept = properties.return_on_accept
        this.modal_partial = properties.partial

        if (properties.partial_params)
            this.modal_partial_params = properties.partial_params
        else
            properties.partial_params = null

        this.modal_open = true

        setTimeout(function () {
            htmx.process(document.querySelector('.modal'))
        })

        return new Promise((resolve) => {
            this.modal_close().then((result) => {
                this.modal_open = false
                resolve(result.action == 'accept' ? this.modal_return_on_accept : false)
            })
        })
    },
    modal_close() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('modal-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('modal-action')
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`

export const PersistentModalXData = `
    persistent_modal_open: false,
    persistent_modal_content: '',
    persistent_modal_partial: '',
    persistent_modal_partial_params: '',
    async show_persistent_modal(args) {
        const defaults =  {
            content: '',
            partial: '',
            return_on_accept: true,
        }

        const properties = {...defaults, ...args}

        if (this.persistent_modal_partial != properties.partial) {
            this.persistent_modal_content = ''
            ${!is_prod_mode() ? `console.log('Modal cache cleared!')` : ''}
        }

        if (properties.partial_params && (JSON.stringify(properties.partial_params) != JSON.stringify(this.persistent_modal_partial_params))) {
            this.persistent_modal_content = ''
            ${!is_prod_mode() ? `console.log('Modal cache cleared!')` : ''}
        }

        if (properties.partial) {
            this.persistent_modal_content = '<div class="[ rifter-modal ]">'+this.rifter_animation+'</div>'
        } else
            this.persistent_modal_content = properties.content

        this.persistent_modal_return_on_accept = properties.return_on_accept
        this.persistent_modal_partial = properties.partial

        if (properties.partial_params)
            this.persistent_modal_partial_params = properties.partial_params
        else
            properties.partial_params = null

        this.persistent_modal_open = true

        setTimeout(function () {
            htmx.process(document.querySelector('.persistent-modal'))
        })

        return new Promise((resolve) => {
            this.persistent_modal_close().then((result) => {
                this.persistent_modal_open = false
                resolve(result.action == 'accept' ? this.persistent_modal_return_on_accept : false)
            })
        })
    },
    persistent_modal_close() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('persistent-modal-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('persistent-modal-action')
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`
    
export const PersonaFinderXData = `
    personas_finder_open: false,
    persona_finder_role: 'all',
    async show_personas_finder(role = 'all') {
        this.persona_finder_role = role
        this.personas_finder_open = true
        document.querySelector('.personas_finder input').focus()
        
        const result = await this.personas_finder_accept()
        this.personas_finder_open = false
        return result.action == 'accept' ? result.persona_id : false
    },
    personas_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('persona-finder-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('persona-finder-action'),
                        persona_id: JSON.parse(event.target.getAttribute('persona-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`
    
export const PageFinderXData = `
    pages_finder_open: false,
    async show_pages_finder() {
        this.pages_finder_open = true
        document.querySelector('.pages-finder input').focus()
        
        const result = await this.pages_finder_accept()
        this.pages_finder_open = false
        return result.action == 'accept' ? result.page_id : false
    },
    pages_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('page-finder-action')) {
                    body.removeEventListener('click', listener)
                    resolve({
                        action: event.target.getAttribute('page-finder-action'),
                        page_id: JSON.parse(event.target.getAttribute('page-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`
    
export const CharacterFinderXData = `
    characters_finder_open: false,
    show_characters_finder() {
        this.characters_finder_open = true
    },`

export const FittingFinderXData = `
    fittings_finder_open: false,
    async show_fittings_finder() {
        this.fittings_finder_open = true
        document.querySelector('.fittings-finder input').focus()
        
        const result = await this.fittings_finder_accept()
        this.fittings_finder_open = false
        return result.action == 'accept' ? result.fitting_id : false
    },
    fittings_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('fitting-finder-action')) {
                    body.removeEventListener('click', listener)
                    resolve({
                        action: event.target.getAttribute('fitting-finder-action'),
                        fitting_id: JSON.parse(event.target.getAttribute('fitting-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`
    
export const MemberFinderXData = `
    members_finder_open: false,
    async show_members_finder() {
        this.members_finder_open = true
        document.querySelector('.members-finder input').focus()
        
        const result = await this.members_finder_accept()
        this.members_finder_open = false
        return result.action == 'accept' ? result.member_id : false
    },
    members_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('member-finder-action')) {
                    body.removeEventListener('click', listener)
                    resolve({
                        action: event.target.getAttribute('member-finder-action'),
                        member_id: JSON.parse(event.target.getAttribute('member-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`

export const CorporationFinderXData = `
    corporations_finder_open: false,
    async show_corporations_finder() {
        this.corporations_finder_open = true
        document.querySelector('.corporations_finder input').focus()
        
        const result = await this.corporations_finder_accept()
        this.corporations_finder_open = false
        return result.action == 'accept' ? result.corporation_id : false
    },
    corporations_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('corporation-finder-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('corporation-finder-action'),
                        corporation_id: JSON.parse(event.target.getAttribute('corporation-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`

export const AllianceFinderXData = `
    alliances_finder_open: false,
    async show_alliances_finder() {
        this.alliances_finder_open = true
        document.querySelector('.alliances_finder input').focus()
        
        const result = await this.alliances_finder_accept()
        this.alliances_finder_open = false
        return result.action == 'accept' ? result.alliance_id : false
    },
    alliances_finder_accept() {
        const body = document.querySelector("body");

        return new Promise(function (resolve, reject) {
            var listener = event => {
                if (event.target.hasAttribute('alliance-finder-action')) {
                    body.removeEventListener('click', listener);
                    resolve({
                        action: event.target.getAttribute('alliance-finder-action'),
                        alliance_id: JSON.parse(event.target.getAttribute('alliance-finder-data'))
                    });
                }
            };
            body.addEventListener('click', listener);
        });
    },`

export const UtilitiesXData = `
    get_player_icon(id, size = 64) {
        return 'https://images.evetech.net/characters/'+id+'/portrait?size='+size;
    },
    get_corporation_logo(id, size = 32) {
        return 'https://images.evetech.net/corporations/'+id+'/logo?size='+size;
    },
    get_alliance_logo(id, size = 32) {
        return 'https://images.evetech.net/alliances/'+id+'/logo?size='+size;
    },
    get_item_icon(id, size = 64) {
        return 'https://images.evetech.net/types/'+id+'/'+(size <= 64 ? 'icon' : 'render')+'?size='+size;
    },`

export const InitXData = `
    init() {
        document.addEventListener('wheel', event => {
            const el = document.querySelector('.flatpickr-hour')

            if (el && el.contains(event.target)) {
                event.stopPropagation()
                event.preventDefault()

                if (event.deltaY < 0)
                    el.stepUp();
                else
                    el.stepDown();
            }
        }, { passive: false })
        
    },`

export const RifterAnimationXData = `
    rifter_animation: false,
    rifter_animation_init() {
        this.rifter_animation = $refs.rifter.outerHTML
    },`
---