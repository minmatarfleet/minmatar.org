---
export const WatermellonCameraXData = `
    rotation_x: 4.3827,
    rotation_y: 0.251,
    camera: null,
    resize_canvas: null,
    ccpwgl_context: null,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const WatermellonXData = `init_ccpwgl() {
    let watermellon
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.fov = 40
    camera.minDistance = 2300
    camera.maxDistance = 20000
    camera.nearPlane = 1000
    camera.farPlane = 5000000
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/universe/a04_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/pink_hazy.red', function () {
        scene.wrappedScene.lensflares.forEach(lensflare=> {
            lensflare._transform = mat4.fromValues(
                100, 0, 0, 0,
                0, 100, 0, 0,
                0, 0, 100, 0,
                0, 0, 0, 100
            )
            lensflare.mesh.additiveAreas
            .filter(meshArea => meshArea.name.toLowerCase() === "sun0" || meshArea.name.toLowerCase() === "dimwhite")
            .forEach(meshArea => meshArea.display = false);

            lensflare.mesh.additiveAreas
            .filter(meshArea => meshArea.name.toLowerCase() === "backr")
            .forEach(meshArea => meshArea.effect.parameters.Size.value = [5.5, 6, 0, 0]);
        })
    });

    scene.setSunDirection([-0.90, 0.1, 0.7]);
    
    watermellon = scene.loadShip('cl1_t1:aliastra:minmatar', function() {
        camera.focus(this, 1.9)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        this.setTransform(matrix)

        setColor(255, 20, 59, 'Mtl1DiffuseColor')
        setColor(21, 255, 0, 'Mtl2DiffuseColor')
        setColor(255, 20, 59, 'Mtl3DiffuseColor')
        setColor(255, 20, 59, 'Mtl4DiffuseColor')

        setColor(94, 0, 60, 'Mtl1Gloss')
        setColor(59, 59, 59, 'Mtl2Gloss')
        setColor(54, 54, 54, 'Mtl3Gloss')
        setColor(41, 41, 41, 'Mtl4Gloss')

        setColor(0, 0, 0, 'Mtl1FresnelColor')
        setColor(0, 0, 0, 'Mtl2FresnelColor')
        setColor(37, 84, 5, 'Mtl3FresnelColor')
        setColor(82, 6, 47, 'Mtl4FresnelColor')
    });

    const SEEEDS = scene.loadShip('iam1_t1:orebase:minmatar', function() {
        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, -1)

        const SEEDS_STATION_ANGLE = -0.56

        // Translation
        matrix[12] = 1200000 * Math.cos(SEEDS_STATION_ANGLE)
        matrix[13] = 11000
        matrix[14] = 1200000 * Math.sin(SEEDS_STATION_ANGLE)
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)
    });

    const JUICES = scene.loadShip('iam1_t1:orebase:minmatar', function() {
        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, -1)

        const JUICES_STATION_ANGLE = -0.55

        // Translation
        matrix[12] = 2400000 * Math.cos(JUICES_STATION_ANGLE)
        matrix[13] = 41000
        matrix[14] = 2400000 * Math.sin(JUICES_STATION_ANGLE)
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)
    });

    const RIND = scene.loadShip('iam1_t1:orebase:minmatar', function() {
        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, -1)

        const RIND_STATION_ANGLE = -0.543

        // Translation
        matrix[12] = 3400000 * Math.cos(RIND_STATION_ANGLE)
        matrix[13] = 61000
        matrix[14] = 3400000 * Math.sin(RIND_STATION_ANGLE)
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)
    });

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < watermellon.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in watermellon.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (watermellon.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    watermellon.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas, ccpwgl_context)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
}`

export const AugaMilitiaHQCameraXData = `
    rotation_x: 0.61,
    rotation_y: 0.45,
    camera: null,
    resize_canvas: null,
    moon_rotation_angle: 0,
    planet_rotation_angle: 0,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const AugaMilitiaHQXData = `init_ccpwgl() {
    let minmatar_hq
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.fov = 40
    camera.minDistance = 2300
    camera.maxDistance = 20000
    camera.nearPlane = 1000
    camera.farPlane = 5000000
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/universe/m02_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/orange_radiating.red', function () {
        scene.wrappedScene.lensflares.forEach(lensflare=> {
            lensflare.mesh.additiveAreas
            .filter(meshArea => meshArea.name.toLowerCase() === "sun0" || meshArea.name.toLowerCase() === "dimwhite")
            .forEach(meshArea => meshArea.display = false);
        })
    });
    scene.setSunDirection([-0.5, -0.01, 0.4]);

    const moon = scene.loadPlanet(
        40161790,
        'res:/dx9/model/WorldObject/Planet/Template/Moon/p_moon_38.red',
        undefined,
        'res:/dx9/model/worldobject/planet/Moon/Moon01_H.dds.0.png',
        'res:/dx9/model/worldobject/planet/Moon/Moon04_H.dds.0.png',
    );

    const planet = scene.loadPlanet(
        40161782,
        'res:/dx9/model/WorldObject/Planet/Template/Ice/P_Ice_75.red',
        undefined,
        'res:/dx9/model/worldobject/planet/Ice/Ice04_H.dds.0.png',
        'res:/dx9/model/worldobject/planet/Terrestrial/Terrestrial02_H.dds.0.png',
    );
    
    minmatar_hq = scene.loadShip('cl1_t1:minmatarbase:minmatar', function() {
        camera.focus(this, 1.9)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, 3.6)        
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)

        setColor(15, 15, 15, 'Mtl1DiffuseColor')
        setColor(255, 0, 0, 'Mtl2DiffuseColor')
        setColor(133, 4, 4, 'Mtl3DiffuseColor')
        setColor(240, 129, 39, 'Mtl4DiffuseColor')

        setColor(0, 0, 0, 'Mtl1Gloss')
        setColor(200, 200, 200, 'Mtl2Gloss')
        setColor(0, 15, 15, 'Mtl3Gloss')
        setColor(0, 0, 17, 'Mtl4Gloss')
        
        setColor(0, 0, 0, 'Mtl1FresnelColor')
        setColor(50, 50, 50, 'Mtl2FresnelColor')
        setColor(0, 0, 0, 'Mtl3FresnelColor')
        setColor(0, 0, 0, 'Mtl4FresnelColor')
    });

    loadDna('ms3:minmatarbase:minmatar')

    function loadDna(dna) {
        ccpwgl.getSofHullConstructor(dna, function (constructor) {
            if (constructor)
            {
                hull = scene[constructor](dna)
                
                let matrix = mat4.fromValues(
                    0.2, 0, 0, 0,
                    0, 0.2, 0, 0,
                    0, 0, 0.2, 0,
                    0, 0, 0, 1
                )

                const auga_x_station_angle = 1.55

                // Translation
                matrix[12] = 1000000 * Math.cos(auga_x_station_angle)
                matrix[13] = -10000
                matrix[14] = 1000000 * Math.sin(auga_x_station_angle)
                matrix[15] = 1
                
                hull.setTransform(matrix)
            }
        })
    }

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < minmatar_hq.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)

    const rotation_timer = setInterval(function () {
        let planet_angle = 2.25;
        let moon_angle = 1.45;

        let model = mat4.fromValues(
            70000, 0, 0, 0,
            0, 70000, 0, 0,
            0, 0, 70000, 0,
            1000000 * Math.cos(moon_angle), 0, 1000000 * Math.sin(moon_angle), 1
        );

        let out = mat4.create()
        out = mat4.rotateY(out, model, moon_rotation_angle += 0.0005);
        moon.setTransform(out)

        model = mat4.fromValues(
            2000000, 0, 0, 0,
            0, 2000000, 0, 0,
            0, 0, 2000000, 0,
            40000000 * Math.cos(planet_angle), 1300000, 40000000 * Math.sin(planet_angle), 1
        );

        out = mat4.create()
        out = mat4.rotateY(out, model, planet_rotation_angle += 0.0005);
        planet.setTransform(out)
    }, 50)

    document.addEventListener('astro:after-swap', () => {
        clearTimeout(rotation_timer)
    })
}`

export const SpaceInvadersCameraXData = `
    rotation_x: -4.68,
    rotation_y: 0.41,
    camera: null,
    resize_canvas: null,
    moon_rotation_angle: 0,
    planet_rotation_angle: 0,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const SpaceInvadersXData = `init_ccpwgl() {
    let minmatar_hq
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.fov = 40
    camera.minDistance = 2300
    camera.maxDistance = 20000
    camera.nearPlane = 1000
    camera.farPlane = 5000000
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/Universe/a13_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/blue_sun.red', function () {
        scene.wrappedScene.lensflares.forEach(lensflare=> {
            lensflare._transform = mat4.fromValues(
                100, 0, 0, 0,
                0, 100, 0, 0,
                0, 0, 100, 0,
                0, 0, 0, 100
            )
            lensflare.mesh.additiveAreas
            .filter(meshArea => meshArea.name.toLowerCase() === "sun0" || meshArea.name.toLowerCase() === "dimwhite")
            .forEach(meshArea => meshArea.display = false);

            lensflare.mesh.additiveAreas
            .filter(meshArea => meshArea.name.toLowerCase() === "backr")
            .forEach(meshArea => meshArea.effect.parameters.Size.value = [5.5, 6, 0, 0]);
        })
    });

    scene.setSunDirection([-15, 1.6, -6.67]);

    space_invaders = scene.loadShip('cl1_t1:minmatarbase:minmatar', function() {
        camera.focus(this, 1)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, 4)        
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)

        setColor(143, 0, 0, 'Mtl1DiffuseColor')
        setColor(255, 255, 255, 'Mtl2DiffuseColor')
        setColor(135, 0, 0, 'Mtl3DiffuseColor')
        setColor(255, 255, 255, 'Mtl4DiffuseColor')

        setColor(0, 0, 0, 'Mtl1Gloss')
        setColor(48, 47, 48, 'Mtl2Gloss')
        setColor(0, 0, 0, 'Mtl3Gloss')
        setColor(121, 121, 122, 'Mtl4Gloss')
        
        setColor(0, 0, 0, 'Mtl1FresnelColor')
        setColor(240, 178, 72, 'Mtl2FresnelColor')
        setColor(87, 27, 27, 'Mtl3FresnelColor')
        setColor(0, 0, 0, 'Mtl4FresnelColor')
    });

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < space_invaders.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in space_invaders.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (space_invaders.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    space_invaders.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
}`
export const BananaCameraXData = `
    rotation_x: -5.35,
    rotation_y: 0.2,
    camera: null,
    resize_canvas: null,
    moon_rotation_angle: 0,
    planet_rotation_angle: 0,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const BananaXData = `init_ccpwgl() {
    let minmatar_hq
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.fov = 40
    camera.minDistance = 2300
    camera.maxDistance = 20000
    camera.nearPlane = 1000
    camera.farPlane = 5000000
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/Universe/a13_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/pink_sun_small.red', function () {
        scene.wrappedScene.lensflares.forEach(lensflare=> {
            lensflare._transform = mat4.fromValues(
                100, 0, 0, 0,
                0, 100, 0, 0,
                0, 0, 100, 0,
                0, 0, 0, 100
            )
        })
    });

    const moon = scene.loadPlanet(
        40004482,
        'res:/dx9/model/WorldObject/Planet/Template/Moon/p_moon_91.red',
        undefined,
        'res:/dx9/model/worldobject/planet/Moon/Moon03_H.dds.0.png',
        'res:/dx9/model/worldobject/planet/Moon/Moon01_H.dds.0.png',
    );

    const planet = scene.loadPlanet(
        40161782,
        'res:/dx9/model/WorldObject/Planet/Template_HI/SandStorm/P_SandStorm_39.red',
        undefined,
        'res:/dx9/Model/WorldObject/planet/Terrestrial/Terrestrial01_H_HI.dds.0.png',
        'res:/dx9/model/worldobject/planet/Terrestrial/Terrestrial04_H_HI.dds.0.png',
    );

    scene.setSunDirection([15, -4.29, 2.43]);

    banana = scene.loadShip('cl1_t1:minmatarbase:minmatar', function() {
        camera.focus(this, 1)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, 0.9)        
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)

        setColor(255, 119, 0, 'Mtl1DiffuseColor')
        setColor(8, 8, 8, 'Mtl2DiffuseColor')
        setColor(3, 3, 3, 'Mtl3DiffuseColor')
        setColor(5, 5, 5, 'Mtl4DiffuseColor')

        setColor(0, 0, 0, 'Mtl1Gloss')
        setColor(48, 47, 48, 'Mtl2Gloss')
        setColor(0, 0, 0, 'Mtl3Gloss')
        setColor(121, 121, 122, 'Mtl4Gloss')
        
        setColor(0, 0, 0, 'Mtl1FresnelColor')
        setColor(0, 0, 0, 'Mtl2FresnelColor')
        setColor(0, 0, 0, 'Mtl3FresnelColor')
        setColor(0, 0, 0, 'Mtl4FresnelColor')
    });

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < banana.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in banana.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (banana.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    banana.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    const rotation_timer = setInterval(function () {
        let planet_angle = 1.6;
        let moon_angle = 4.65;

        let model = mat4.fromValues(
            40000, 0, 0, 0,
            0, 40000, 0, 0,
            0, 0, 40000, 0,
            1000000 * Math.cos(moon_angle), 0, 1000000 * Math.sin(moon_angle), 1
        );

        let out = mat4.create()
        out = mat4.rotateY(out, model, moon_rotation_angle += 0.0005);
        moon.setTransform(out)

        model = mat4.fromValues(
            900000, 0, 0, 0,
            0, 900000, 0, 0,
            0, 0, 900000, 0,
            40000000 * Math.cos(planet_angle), 100000, 40000000 * Math.sin(planet_angle), 1
        );

        out = mat4.create()
        out = mat4.rotateY(out, model, planet_rotation_angle += 0.0005);
        planet.setTransform(out)
    }, 50)

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
}`

export const RunForrestCameraXData = `
    rotation_x: 1.97,
    rotation_y: 0.89,
    camera: null,
    resize_canvas: null,
    rotation_angle: 0,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const RunForrestXData = `init_ccpwgl() {
    let minmatar_hq
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.minDistance = 2300
    camera.maxDistance = 9000
    camera.fov = 40
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/universe/m02_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/blue_sun.red');
    scene.setSunDirection([-8.95, 1.71, 6.98]);

    const planet = scene.loadPlanet(
        40161533,
        'res:/dx9/model/WorldObject/Planet/Template/Moon/p_moon_80.red',        
        undefined,
        'res:/dx9/model/worldobject/planet/Moon/Moon03_H.dds.0.png',
        'res:/dx9/model/worldobject/planet/Moon/Moon01_H.dds.0.png'
    );

    var angle = 4.8;
    const distance = 400000
    planet.setTransform(mat4.fromValues(
        100000, 0, 0, 0,
        0, 100000, 0, 0,
        0, 0, 100000, 0,
        distance * Math.cos(angle), 30000, distance * Math.sin(angle), 1
    ));

    window.planets = [];
    window.planets.push(planet);
    
    minmatar_hq = scene.loadShip('cm1_t1:upwell:sleeper', function() {
        camera.focus(this, 2)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, 0.05)        
        rotationMatrix[15] = 1
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)
        
        setColor(83, 16, 107, 'Mtl2Gloss')
        setColor(56, 12, 102, 'Mtl4Gloss')
    })

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < minmatar_hq.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    const rotation_timer = setInterval(function () {
        const distance = 400000
        let model = mat4.fromValues(
            100000, 0, 0, 0,
            0, 100000, 0, 0,
            0, 0, 100000, 0,
            distance * Math.cos(angle), 30000, distance * Math.sin(angle), 1
        )

        let out = mat4.create()
        mat4.rotateY(model, model, rotation_angle += 0.0001);
        planet.setTransform(model)  
    }, 50)

    document.addEventListener('astro:after-swap', () => {
        clearTimeout(rotation_timer)
    })

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
}`

export const OurzadCameraXData = `
    rotation_x: -1.22,
    rotation_y: 0.54,
    camera: null,
    resize_canvas: null,
    rotation_angle: 0,
    resizeCanvasToDisplaySize(canvas, ccpwgl_context) {
        // Lookup the size the browser is displaying the canvas in CSS pixels.
        const displayWidth  = canvas.clientWidth;
        const displayHeight = canvas.clientHeight;
        
        // Check if the canvas is not the same size.
        const needResize = canvas.width  !== displayWidth ||
                            canvas.height !== displayHeight;
        
        if (needResize) {
            // Make the canvas the same size
            canvas.width  = displayWidth;
            canvas.height = displayHeight;

            ccpwgl_context.viewport(0, 0, canvas.width, canvas.height)
        }
        
        return needResize;
    },
    update() {
        if (!this.camera) return

        this.camera.rotationX = this.rotation_x
        this.camera.rotationY = this.rotation_y
    }`

export const OurzadXData = `init_ccpwgl() {
    let minmatar_hq
    let canvas
    let scene
    const mat4 = ccpwgl_int.math.mat4

    canvas = document.getElementById('mainCanvas');
    
    ccpwgl.initialize(canvas, fitting.options);
    ccpwgl_context = canvas.getContext("webgl");
    
    camera = ccpwgl.createCamera(canvas, undefined, true);
    camera.rotationX = rotation_x
    camera.rotationY = rotation_y
    camera.minDistance = 2300
    camera.maxDistance = 9000
    camera.fov = 40
    camera.shift = 100.92

    scene = ccpwgl.loadScene('res:/dx9/scene/universe/a05_cube.red');
    
    scene.loadSun('res:/fisfx/lensflare/orange_radiating.red');
    scene.setSunDirection([-0.1, -0.01, 0.4]);

    const planet = scene.loadPlanet(
        40187894,
        'res:/dx9/model/WorldObject/Planet/Template/SandStorm/p_sandstorm_36.red',
        undefined,
        'res:/dx9/model/worldobject/planet/Terrestrial/terrestrial02_h.dds.0.png',
        'res:/dx9/model/worldobject/planet/Terrestrial/terrestrial02_h.dds.0.png'
    );

    var angle = 2.8;
    planet.setTransform(mat4.fromValues(
        50000, 0, 0, 0,
        0, 50000, 0, 0,
        0, 0, 50000, 0,
        100000 * Math.cos(angle), 30000, 100000 * Math.sin(angle), 1
    ));

    window.planets = [];
    window.planets.push(planet);
    
    minmatar_hq = scene.loadShip('cm1_t1:sleeper:sleeper', function() {
        camera.focus(this, 0.37)

        let matrix = mat4.fromValues(
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        )

        let rotationMatrix = mat4.fromYRotation(matrix, -0.1)        
        rotationMatrix[15] = 7
        
        this.setTransform(rotationMatrix)
        this.setTransform(matrix)
        
        setColor(83, 16, 107, 'Mtl2Gloss')
        setColor(56, 12, 102, 'Mtl4Gloss')
    });

    loadDna('as1:amarrnavy:amarr')

    function loadDna(dna) {
        ccpwgl.getSofHullConstructor(dna, function (constructor) {
            if (constructor)
            {
                hull = scene[constructor](dna)
                
                let matrix = mat4.fromValues(
                    0.5, 0, 0, 0,
                    0, 0.5, 0, 0,
                    0, 0, 0.5, 0,
                    0, 0, 0, 1
                )

                // Translation
                matrix[12] = 50000
                matrix[13] = -10000
                matrix[14] = 500000
                matrix[15] = 7
                
                hull.setTransform(matrix)
            }
        })
    }

    ccpwgl.enablePostprocessing(true);

    function setColor(r, g, b, material) {
        for (var i = 0; i < minmatar_hq.wrappedObjects[0].mesh.opaqueAreas.length; i++)
        {
            for (var param in minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters) {
                if (minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].name.indexOf(material) > -1) {

                    minmatar_hq.wrappedObjects[0].mesh.opaqueAreas[i].effect.parameters[param].SetValue([r/255, g/255, b/255, 1]);
                }
            }

        }
    }

    const rotation_timer = setInterval(function () {
        let model = mat4.fromValues(
            50000, 0, 0, 0,
            0, 50000, 0, 0,
            0, 0, 50000, 0,
            100000 * Math.cos(angle), 30000, 100000 * Math.sin(angle), 1
        )

        let out = mat4.create()
        mat4.rotateY(model, model, rotation_angle += 0.0001);
        planet.setTransform(model)  
    }, 50)

    document.addEventListener('astro:after-swap', () => {
        clearTimeout(rotation_timer)
    })

    resize_canvas = ccpwgl_context.canvas
    resizeCanvasToDisplaySize(resize_canvas)
    // ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
}`
---