---
import FlexInline from '@components/compositions/FlexInline.astro';
import type { ButtonColors, ButtonSizes } from '@dtypes/layout_components';

interface Props {
    color?:             ButtonColors;
    external?:          boolean;
    href?:              string;
    size?:              ButtonSizes;
    narrow?:            boolean;
    [propName: string]: any;
}

const {
    color = 'fleet-red',
    external = false,
    href,
    size = 'lg',
    narrow = false,
    ...attributes
} = Astro.props;

delete attributes.class

const button_background_color = `var(--${color})`;
const button_color = (color !== 'transparent' ? 'var(--fleet-yellow)' : 'var(--highlight)');

const Element = href ? 'a' : 'button';
---

<Element
    href={ href }
    class:list={['[ button ]', { narrow: narrow } ,Astro.props.class]}
    {...attributes}
    data-size={size}
    style={`--button_background_color: ${button_background_color}; --button_color: ${button_color}`}
>
    <FlexInline gap={narrow ? 'var(--space-2xs)' : 'var(--space-xs)'}>
        <slot name="icon" />
        <slot />
    </FlexInline>
</Element>

<style lang="scss">
    button,
    a[href].button {
        --background-color: var(--button_background_color);
        --button-color: var(--button_color);
        --font-size: var(--step--0);

        display: inline-block;
        text-decoration: none;
        font-size: var(--font-size);
        font-family: var(--button-font);
        text-transform: uppercase;
        text-align: left;
        padding: var(--space-s) var(--space-l-xl);
        border: solid 1px var(--background-color);
        color: var(--button-color);
        background-color: var(--background-color);
        align-items: center;
        transition: var(--fast-transition);

        &.narrow {
            padding-inline: var(--space-s);
        }

        &[disabled] {
            filter: saturate(50%);
        }

        &:focus-visible {
            outline: none;
        }
        
        /* Desktop */
        @media (hover: hover) {
            &:focus-visible,
            &:hover:not([disabled]) {
                cursor: pointer;
                transform: scale(1.05);
            }

            &[data-size="sm"] {
                &:focus-visible,
                &:hover:not([disabled]) {
                    transform: scale(1.1);
                }
            }
        }
        
        &:active:not([disabled]) {
            transform: scale(1);
        }

        &[data-size="sm"] {
            &:active:not([disabled]) {
                transform: scale(1);
            }
        }

        /* Tactile */
        @media (hover: none) {
            transform: scale(1);

            &:active:not([disabled]) {
                transform: scale(0.95);
            }

            &[data-size="sm"]:active:not([disabled]) {
                transform: scale(0.90);
            }
        }

        &[data-size="sm"] {
            padding: var(--space-2xs) var(--space-xs-s);

            &.narrow {
                padding-inline: var(--space-2xs);
            }

            :global(svg) {
                scale: 0.85;
            }
        }

        &.w-full > div {
            justify-content: center;
        }
    }
</style>