---
import { i18n } from '@helpers/i18n'
const { lang, t } = i18n(Astro.url)

import type { CombatLogAnalysis } from '@dtypes/layout_components'

interface Props {
    combat_log_analysis:    CombatLogAnalysis;
}

const {
    combat_log_analysis
} = Astro.props

const timeline = combat_log_analysis?.timeline
const damage_in = combat_log_analysis?.damage_in
const damage_out = combat_log_analysis?.damage_out
const timeline_time = timeline.map(datetime => datetime.split(' ')[1])

import { format_date_time } from '@helpers/date'

import Flexblock from '@components/compositions/Flexblock.astro'
import Grid from '@components/compositions/Grid.astro'
import FlexInline from '@components/compositions/FlexInline.astro'

import TextGroup from '@components/blocks/TextGroup.astro'
import Button from '@components/blocks/Button.astro'
import ComponentBlock from '@components/blocks/ComponentBlock.astro'
import DamageBadge from '@components/blocks/DamageBadge.astro';
import MultiRangeInput from './MultiRangeInput.astro';
import CombatLogChart from './CombatLogChart.astro';
---

<Flexblock gap='var(--space-xl)'>
    <Grid
        class="[ component w-full grid-fill ]"
        row_gap="var(--space-3xs)"
        column_gap="var(--space-3xs)"
        min_item_width="300px"
    >
        <TextGroup title={t('log_start')}>{format_date_time(lang, combat_log_analysis?.start)}</TextGroup>
        <TextGroup title={t('log_end')}>{format_date_time(lang, combat_log_analysis?.end)}</TextGroup>
        <TextGroup title={t('logged_events')}>{combat_log_analysis?.logged_events.toLocaleString()}</TextGroup>
    </Grid>

    <Flexblock>
        {(combat_log_analysis?.weapons?.length ?? 0) > 0 &&
            <ComponentBlock>
                <Flexblock gap='var(--space-l)'>
                    <h3>{t('weapons')}</h3>
                    <Grid
                        class="[ component w-full grid-fill ]"
                        row_gap="var(--space-m)"
                        column_gap="var(--space-3xs)"
                        min_item_width="350px"
                    >
                        {combat_log_analysis?.weapons.map(weapon_damage =>
                            <DamageBadge damage={weapon_damage} />
                        )}
                    </Grid>
                </Flexblock>
            </ComponentBlock>
        }

        {(combat_log_analysis?.enemies?.length ?? 0) > 0 &&
            <ComponentBlock>
                <Flexblock gap='var(--space-l)'>
                    <h3>{t('enemies')}</h3>
                    <Grid
                        class="[ component w-full grid-fill ]"
                        row_gap="var(--space-m)"
                        column_gap="var(--space-3xs)"
                        min_item_width="350px"
                    >
                        {combat_log_analysis?.enemies.map(enemy_damage =>
                            <DamageBadge damage={enemy_damage} />
                        )}
                    </Grid>
                </Flexblock>
            </ComponentBlock>
        }

        <ComponentBlock>
            <CombatLogChart
                damage_in={damage_in}
                damage_out={damage_out}
                timeline_time={timeline_time}
            />
        </ComponentBlock>
    </Flexblock>
</Flexblock>