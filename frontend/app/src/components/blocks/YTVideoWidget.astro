---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import type { VideoWidgetCredits } from '@dtypes/layout_components';
import { query_string } from '@helpers/string';

interface Props {
    videoid:        string;
    videotitle?:    string;
    credits?:       false | VideoWidgetCredits;
    shadow?:        boolean;
}

const {
    videoid,
    videotitle = 'YouTube video player',
    credits = false,
    shadow = false,
} = Astro.props

import Wrapper from "@components/compositions/Wrapper.astro";
---

<Wrapper
    class:list={[ 'relative', {shadow:shadow} ]}
    max_width="var(--max-col-width)"
    padding_inline="0"
    padding_block="0"
>
    <div
        class="[ video-frame w-full ]"
        x-data={`{
            id: $id('yt-player')
        }`}
    >
        <lite-youtube
            class="[ max-w-full h-full w-full ]"
            x-bind:id="id"
            videoid={videoid}
            videotitle={videotitle}
            posterquality="maxresdefault"
            x-data={`{
                init() {
                    $nextTick(() => {
                        const frame = document.getElementById(this.id).shadowRoot.getElementById('frame')
                        frame.innerHTML += '<style>#frame:before { display: none }</style>'
                    })
                }
            }`}
        />
    </div>
    {credits !== false &&
        <p>{t('credits')}:
            {credits.character_id ?
                <span
                    class="[ cursor-pointer ]"
                    x-data={`{
                        show_character_modal() {
                            show_modal({
                                partial: '${translatePath('/partials/character_modal_component/')}?${query_string({
                                    character_id: credits.character_id.toString(),
                                })}',
                            })
                        }
                    }`}
                    x-on:click="show_character_modal()"
                >{credits.character_name}</span>
                :
                <span>{credits.character_name}</span>
            }
        </p>
    }
</Wrapper>

<script>
    import '@justinribeiro/lite-youtube';
</script>

<style lang="scss">
    .video-frame {
        overflow: hidden;
        display: flex;
        align-items: center;
        aspect-ratio: 960/540;
        max-width: 960;
    }

    .shadow {
        box-shadow: 0 0 200px 60px black, inset 0 0 200px 200px black;
    }

    span {
        color: var(--highlight);
    }

    p {
        position: absolute;
        bottom: -25px;
        right: 0;
        font-size: var(--step--2);
    }
</style>