---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { CorporationBasic, EvEImageServiceSize } from '@dtypes/layout_components'

interface Props {
    character_id:   number;
    character_name: string;
    corporation?:   CorporationBasic | false;
    size?:          EvEImageServiceSize;
    inert?:         boolean;
    [propName: string]: any;
}

const {
    character_id,
    character_name,
    corporation = false,
    size = 64,
    inert = false,
    ...attributes
} = Astro.props

import { query_string } from '@helpers/string';
import { get_corporation_logo } from '@helpers/eve_image_server';

import Flexblock from '@components/compositions/Flexblock.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';

const primary_pilot = Astro.cookies.has('primary_pilot') ? JSON.parse(Astro.cookies.get('primary_pilot')?.value as string) : null
const primary_pilot_id = primary_pilot ? parseInt(primary_pilot.character_id) : null

delete attributes.class
---

<FixedFluid
    width={`${size}px`}
    gap={size < 64 ? 'var(--space-3xs)' : 'var(--space-s)'}
    class:list={['pilot-item', { 'inert': inert }, Astro.props.class]}
    {...attributes}
>
    <CharacterPicture
        character_id={character_id}
        character_name={character_name}
        size={size}
        icon_quality={size}
    />
    <VerticalCenter>
        <Flexblock gap='0' class="[ w-full ]">
            <span
                class="truncate text-[var(--highlight)] cursor-pointer max-w-fit"
                set:text={character_id > 0 ? character_name : `[ ${t('unknown_character')} ]`}
                x-data={`{
                    show_character_modal() {
                        if (${character_id} == 0)
                            return

                        show_modal({
                            partial: '${translatePath('/partials/character_modal_component/')}?${query_string({
                                character_id: character_id.toString(),
                            })}',
                        })
                    }
                }`}
                x-on:click.stop.prevent="show_character_modal()"
            /> <slot name="title"></slot>
            <slot>
                {corporation &&
                    <FixedFluid
                        width='24px'
                        class="[ items-center ]"
                        gap='var(--space-3xs)'
                    >
                        <picture>
                            <img loading="lazy" src={get_corporation_logo(corporation.id, 32)} width="24" height="24" alt={`${t('profile_picture_of')} ${character_name}`} />
                        </picture>
                        <span class="[ truncate ]">
                            <small>{corporation.name}</small>
                        </span>
                    </FixedFluid>
                }
            </slot>
        </Flexblock>
    </VerticalCenter>
</FixedFluid>

<style lang="scss">
    .inert {
        pointer-events: none;
    }
</style>