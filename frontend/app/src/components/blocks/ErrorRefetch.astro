---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import type { ErrorRefetchParams } from '@dtypes/layout_components';
interface Props {
    args:       ErrorRefetchParams;
    animation?: boolean;
}

const {
    args,
    animation = true,
} = Astro.props

import { marked } from 'marked';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import RifterIcon from '@components/icons/RifterIcon.astro';

let url = new URL(args.partial, new URL(Astro.url.origin))
const MAX_RETRYING_TIME_SECONDS = parseInt(import.meta.env.MAX_RETRYING_TIME_SECONDS ?? 30)
const RETRYING_TIME_INCREMENT_SECONDS = parseInt(import.meta.env.RETRYING_TIME_INCREMENT_SECONDS ?? 5)
const next_delay = args.delay + RETRYING_TIME_INCREMENT_SECONDS

url.searchParams.append('delay', next_delay.toString())

const target = args?.target

console.log(args.message)
---

{(args.delay > MAX_RETRYING_TIME_SECONDS) ?
    <Flexblock gap='var(--space-3xs)' class="[ grow basis-[300px] ]">
        <p class="[ text-[var(--highlight)] ]" set:html={marked.parseInline(args.message)} />
        <small>{t('too_many_tries')}</small>
    </Flexblock>
    :
    <FlexInline
        class="[ py-[var(--space-s)] ]"
        x-data={`{
            id: $id('error-refetch'),
        }`}
        x-bind:id="id"
    >
        {animation && <RifterIcon />}
            
        <Flexblock gap='var(--space-3xs)' class="[ grow basis-[300px] ]">
            <p class="[ text-[var(--highlight)] ]" set:html={marked.parseInline(args.message)} />
            <div
                class="[ loading ]"
                hx-get={`${url.toString()}`}
                hx-trigger={args.delay === 0 ? 'intersect once' : `load delay:${args.delay}s`}
                x-bind:hx-target={`${target ? `'${target}'` : '`#${id}`'}`}
                hx-indicator=".loader"
                hx-swap="outerHTML transition:true"
                x-data={`{
                    countdown: ${args.delay},
                    timer: null,
                    get_text() {
                        return (this.countdown > 0 ? '${t('retrying_in')} '+this.countdown+' ${t('seconds')}' : '${t('retrying_now')}')
                    },
                    tick(that) {
                        if (that.countdown > 0) {
                            that.countdown--
                        } else if (that.timer) {
                            clearInterval(that.timer)
                        }
                    },
                    start_countdown() {
                        this.timer = setInterval(this.tick, 1000, this)
                    }
                }`}
                x-init="start_countdown"
                x-text="get_text()"
            >
                {args.delay > 0 ? `${t('retrying_in')} ${args.delay} ${t('seconds')}` : t('retrying_now')}
            </div>
        </Flexblock>
    </FlexInline>
}