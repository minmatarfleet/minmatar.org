---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { TradeHub, SelectOptions, ContractUI } from '@dtypes/layout_components'

interface Props {
    trade_hubs:             TradeHub[];
    is_supplier:            boolean;
    characters_options:     SelectOptions[];
    corporations_options:   SelectOptions[];
    active_hub:             string | null;
    tabular?:               boolean;
}

const {
    trade_hubs,
    characters_options,
    corporations_options,
    is_supplier,
    active_hub,
    tabular = false,
} = Astro.props

let contracts:ContractUI[] = []
if (tabular) {
    const active_trade_hub = trade_hubs.find(trade_hub => trade_hub.name === active_hub)
    const unsorted_contracts:ContractUI[] = active_trade_hub ? 
        active_trade_hub.contract_groups.flatMap(group => group.contracts) :
        []

    contracts = unsorted_contracts.sort((a, b) => (b.desired_quantity - b.current_quantity) - (a.desired_quantity - a.current_quantity))
}

import { query_string } from '@helpers/string';

import Flexblock from '@components/compositions/Flexblock.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import BlockList from '@components/compositions/BlockList.astro';

import ContractListItemCard from '@components/blocks/ContractListItemCard.astro';
import ContractListItemRow from '@components/blocks/ContractListItemRow.astro';
import StagingsReel from '@components/blocks/StagingsReel.astro';
import StagingReelSlide from '@components/blocks/StagingReelSlide.astro';
import StylessButton from '@components/blocks/StylessButton.astro';

const REEL_GAP = 20
---

<Flexblock role="list" gap='var(--space-xl)'>
    <StagingsReel gap={REEL_GAP}>
        {trade_hubs.map(trade_hub =>
            <StagingReelSlide gap={REEL_GAP}>
                <Wrapper padding_block='0' padding_inline='0' max_width='350px'>
                    {active_hub === trade_hub.name ?
                        <Flexblock gap="var(--space-3xs)">
                            <h2>{trade_hub.name}</h2>
                            <small>{trade_hub.contract_groups.reduce((c, group) => c + group.contracts.length, 0)} {t('contracts_in_hub')}</small>
                        </Flexblock>
                        :
                        <StylessButton class="[ w-full staging-selector ]" href={translatePath(`/market/contracts/?${query_string({staging: trade_hub.name})}`)}>
                            <Flexblock gap="var(--space-3xs)">
                                <h2>{trade_hub.name}</h2>
                                <small>{trade_hub.contract_groups.reduce((c, group) => c + group.contracts.length, 0)} {t('contracts_in_hub')}</small>
                            </Flexblock>
                        </StylessButton>
                    }
                </Wrapper>
            </StagingReelSlide>
        )}
    </StagingsReel>

    {trade_hubs.map((trade_hub) =>
        trade_hub.name === active_hub &&
            <BlockList class="[ doctrine-groups ]" gap='var(--space-2xl)'>
                {tabular &&
                    <ContractListItemRow
                        contracts={contracts}
                        is_supplier={is_supplier}
                        characters_options={characters_options}
                        corporations_options={corporations_options}
                    />
                }
                {!tabular && trade_hub.contract_groups.map(contract_group =>
                    <ContractListItemCard
                        contract_group={contract_group}
                        is_supplier={is_supplier}
                        characters_options={characters_options}
                        corporations_options={corporations_options}
                    />
                )}
            </BlockList>
    )}
</Flexblock>

<style lang="scss">
    .doctrine-groups:not(:has(.contract-badge-container:not([style="display: none;"]))) {
        border: 0;
        clip: rect(0 0 0 0);
        height: auto;
        margin: 0;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
        white-space: nowrap;
        left: 0;
        top: 0;
    }

    .doctrine-contract-group:not(:has(.contract-badge-container:not([style="display: none;"]))) {
        border: 0;
        clip: rect(0 0 0 0);
        height: auto;
        margin: 0;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
        white-space: nowrap;
        left: 0;
        top: 0;
    }

    .staging-selector {
        h2 {
            color: var(--faded);
        }

        small {
            color: var(--fleet-yellow);
        }
    }
</style>