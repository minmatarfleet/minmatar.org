---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { ButtonSizes } from '@dtypes/layout_components';
import { srp_categories } from '@dtypes/api.minmatar.org';

interface Props {
    fleet_id:       number;
    target?:        string;
    remove_table?:  boolean;
    size?:          ButtonSizes;
    fleet_title?:   boolean;
    hidden?:        boolean;
    id?:            string;
    filterable?:    boolean;
}

const {
    fleet_id,
    target = '#srp-table',
    remove_table = false,
    size = 'sm',
    fleet_title = false,
    hidden = false,
    id,
    filterable = false,
} = Astro.props

import { query_string } from '@helpers/string';

const options = query_string({
    fleet_id: fleet_id,
    remove_table: remove_table,
    fleet_title: fleet_title,
    filterable: filterable,
})

const SRP_TABLE_PARTIAL_URL = `${translatePath('/partials/srp_table_component')}?${options}`

import Flexblock from '@components/compositions/Flexblock.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import Textarea from '@components/blocks/Textarea.astro';
import Button from '@components/blocks/Button.astro';
import CollapsibleBlock from '@components/blocks/CollapsibleBlock.astro';
import SwitchSquare from '@components/blocks/SwitchSquare.astro';
import DialogButton from "@components/blocks/DialogButton.astro";
import TutorialBadge from "@components/blocks/TutorialBadge.astro";
import Markdown from "@components/blocks/Markdown.astro";

import TutorialIcon from '@components/icons/TutorialIcon.astro';
---

<DialogButton
    size={size}
    color='green'
    hidden={hidden}
    id={id ? id : undefined}
>
    {t('add_killmail')}

    <form
        slot="dialog" 
        hx-post={SRP_TABLE_PARTIAL_URL}
        hx-trigger="submit"
        hx-target={target}
        hx-indicator=".loader"
        hx-swap="outerHTML transition:true"
        x-data={`{
            is_corp_ship: false,
            external_killmail_link: '',
            category: '',
            comments: '',
            clear_form() {
                $nextTick(() => {
                    this.external_killmail_link = ''
                    this.is_corp_ship = false
                })
            },
        }`}
        x-on:submit="close_dialog(); clear_form()"
    >
        <Flexblock gap="var(--space-l)">
            <h3>{t('srp_submit_dialog_title')}</h3>
            
            <Flexblock gap="var(--space-s)">
                <Markdown markdown={fleet_id > 0 ? t('srp_submit_dialog_text') : t('srp_no_fleet_submit_dialog_text')} />
                
                <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
                    <label for="srp-url">{t('external_killmail_link')}</label>
                    <Input
                        id="srp-url"
                        x-model="external_killmail_link"
                        name="external_killmail_link"
                        type="text"
                        autocomplete="off"
                        required
                        x-data={`{
                            update_validity() {
                                if (!external_killmail_link) return

                                if (!external_killmail_link.trim().startsWith('https://esi.evetech.net/v1/killmails/'))
                                    $el.setCustomValidity('${t('invalid_killmail_link')}')
                                else
                                    $el.setCustomValidity('')
                            }
                        }`}
                        x-on:input="update_validity()"
                    />

                    <CollapsibleBlock padding_inline='0'>
                        <FixedFluid
                            width='48'
                            breakpoint='70%'
                            slot="head"
                            class="[ w-full items-center ]"
                        >
                            <picture class="[ hidden sm:block ]">
                                <TutorialIcon />
                            </picture>
                            <small>{t('paste_above_tutorial_string')}</small>
                        </FixedFluid>

                        <video autoplay loop class="[ mt-[var(--space-xs)] w-full ]">
                            <source src="/videos/srp-tutorial.mp4" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </CollapsibleBlock>
                </Flexblock>

                <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
                    <label for="srp-category">{t('category')}</label>
                    <Select id="srp-category" x-model="category" name="category" required>
                        <option value="" selected disabled>{t('select_category')}</option>
                        {srp_categories.map((cat) => 
                            <option value={cat}>{t(cat)}</option>
                        )}
                    </Select>
                </Flexblock>

                {fleet_id === 0 &&
                    <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
                        <label for="srp-comments">{t('comments')}</label>
                        <Textarea rows="2" id="srp-comments" x-model="comments" name="comments" />
                    </Flexblock>
                }
                
                <SwitchSquare
                    class="[ w-full ]"
                    name="is_corp_ship"
                    label={t('corp_ship')}
                    description={t('corp_ship_description')}
                    x-model="is_corp_ship"
                />
                
                <TutorialBadge>
                    <Markdown
                        markdown={t('srp_wiki')}
                        inline={true}
                        inline_element='small'
                    />
                </TutorialBadge>
            </Flexblock>

            <FlexInline justification='flex-end'>
                <Button
                    size='sm'
                    type="submit"
                >
                    {t('submit')}
                </Button>
                <Button
                    type="button"
                    size='sm'
                    x-on:click="close_dialog()"
                >
                    {t('close')}
                </Button>
            </FlexInline>
        </Flexblock>
    </form>
</DialogButton>