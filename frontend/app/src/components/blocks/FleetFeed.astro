---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!user)
    return HTTP_403_Forbidden()

import { prod_error_messages } from '@helpers/env'
import type { FleetItem } from '@dtypes/layout_components'
import { fetch_fleets_auth } from '@helpers/fetching/fleets'

let fetch_fleets_error:string | false = false
let fleets:FleetItem[] = []
let active_fleet_index:number = -1 // No active fleet

try {
    fleets = await fetch_fleets_auth(auth_token as string)
    fleets = fleets.filter((i) => (new Date(i.start_time).getTime() < new Date(Date.now() + 24 * 60 * 60 * 1000).getTime()))
    fleets = fleets.filter((i) => (new Date(i.start_time).getTime() > new Date(Date.now() - 60 * 60 * 1000).getTime()))
    fleets.sort((a, b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime())
    active_fleet_index = fleets.findIndex(fleet => fleet?.status !== 'cancelled' && fleet?.tracking && !fleet?.tracking?.end_time)
} catch (error) {
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const FLEET_FEED_PARTIAL_URL = `${translatePath('/partials/fleet_feed_component')}`
const REFRESH_RATE_SECONDS = 300

import FeedSwiper from '@components/blocks/FeedSwiper.astro';
import FleetFeedItem from '@components/blocks/FleetFeedItem.astro';
---

<div x-show="show_fleet_feeds">
    <div
        class="[ fleet-feed swiper ][ animate-fade-in-up !hidden 2xl:!block ]"
        hx-get={FLEET_FEED_PARTIAL_URL}
        hx-trigger={`load delay:${REFRESH_RATE_SECONDS}s`}
        hx-swap="outerHTML transition:true"
        @htmx:response-error={`$el.removeAttribute('hx-trigger'); setTimeout(() => { $el.setAttribute('hx-trigger', 'load delay:${REFRESH_RATE_SECONDS}s'); htmx.process($el, 'load') })`}
        @htmx:send-error={`$el.removeAttribute('hx-trigger'); setTimeout(() => { $el.setAttribute('hx-trigger', 'load delay:${REFRESH_RATE_SECONDS}s'); htmx.process($el, 'load') })`}
    >
        <FeedSwiper autoplay={active_fleet_index === -1} initial_slide={active_fleet_index > 0 ? active_fleet_index + 1 : 1}>
            {fleets.map( (fleet) =>
                <div class="swiper-slide">
                    <FleetFeedItem fleet={fleet} />
                </div>
            )}
        </FeedSwiper>
    </div>
</div>

<style lang="scss">
    .fleet-feed {
        width: min(100%, 700px);
        position: fixed;
        max-height: calc(2 * 64px);
        bottom: var(--space-l);
        right: var(--space-xl);
        display: none;
    }

    .swiper-slider {
        max-height: 64px;
        width: min(100%, 700px);
    }
</style>