---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import type { Alert, GroupItemUI, GroupItemType } from '@dtypes/layout_components'
import { is_valid_http_url } from '@helpers/string';

interface Props {
    group:  GroupItemUI;
    type:   GroupItemType,
    alert?: Alert | false;
}

const {
    group,
    type,
    alert = false,
} = Astro.props

import FixedFluid from '@components/compositions/FixedFluid.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import GroupStatus from '@components/blocks/GroupStatus.astro';
import Markdown from '@components/blocks/Markdown.astro';

import AugmentationEvEIcon from '@components/icons/AugmentationEvEIcon.astro';
import GroupsEvEIcon from '@components/icons/GroupsEvEIcon.astro';

const LOGO_TEXT = {
    'team': t('team_logo'),
    'group': t('group_logo'),
}

const DESCRIPTION_TEXT = {
    'team': t('view_team_description'),
    'group': t('view_group_description'),
}

const PLACEHOLDER_IMAGE = type === 'team' ? '/images/icons/48px-Augmentations.png' : '/images/icons/48px-Grouplist.png';
---

<FixedFluid
    width='64px'
    class="[ group-item ][ items-center h-full ]"
    id={`group-item-${group.id}`}
    x-data={`{
        group_item_init() {
            ${alert !== false ? `show_alert_dialog(${JSON.stringify(alert)})` : ''}
        }
    }`}
    x-init="group_item_init()"
>
    {!group?.image_url ?
        <picture class="bordered">
            {type === 'team' &&
                <AugmentationEvEIcon />
            }
            {type === 'group' &&
                <GroupsEvEIcon />
            }
        </picture>
        :
        <picture>
            <img
                loading="lazy"
                src={group.image_url}
                width="64"
                height="64"
                alt={`${group.name} ${LOGO_TEXT[type]}`}
                onerror={`
                    this.onerror=null;
                    this.src='${PLACEHOLDER_IMAGE}';
                    this.closest('picture').classList.add('bordered')
                    this.height = 48
                    this.width = 48
                `}
            />
        </picture>
    }
    <FlexInline justification='space-between' class="[ items-center ]">
        <Flexblock gap='0' class="[ w-full basis-[320px] ]">
            <span class="text-[var(--highlight)]">
                {group.name}
            </span>
            <slot>
                {is_valid_http_url(group?.description as string) ?
                    <small>
                        <a href={group.description} target="_blank">
                            {DESCRIPTION_TEXT[type]}
                        </a>
                    </small>
                    :
                    <Markdown
                        markdown={group.description as string}
                        inline={true}
                        inline_element='small'
                    />
                }
            </slot>
        </Flexblock>
        <GroupStatus
            group={group}
            group_type={type}
        />
    </FlexInline>
</FixedFluid>

<style lang="scss">
    .group-item {
        picture {
            display: flex;
            justify-content: center;
            align-items: center;
            aspect-ratio: 1/1;

            &.bordered {
                border: solid 1px var(--border-color)
            }
        }

        a {
            display: inline-block;
            color: var(--fleet-yellow);

            > .flex-inline {
                max-width: fit-content;
            }
        }
    }
</style>