---
import Wrapper from '@components/compositions/Wrapper.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

interface Props {
    breakout?:          boolean;
    fixed?:             boolean;
    thin?:              boolean;
    non_centered?:      boolean;
    [propName: string]: any;
}

const {
    breakout = false,
    fixed = true,
    thin = false,
    non_centered = false,
    ...attributes
} = Astro.props;

delete attributes.class
---

<div
    role="dialog"
    class:list={['dialog solid-transparency', { breakout: breakout }, { 'non-centered': non_centered }, { fixed: fixed }, Astro.props.class]}
    {...attributes}
>
    {thin ?
        <Wrapper padding_block='var(--space-3xs)' padding_inline='var(--space-3xs)'>
            <slot />
        </Wrapper>
        :
        <Wrapper padding_block='var(--space-m)' padding_inline='var(--space-m)'>
            <Flexblock gap='var(--space-m)'>
                <slot name="header" />
                <div class="[ cover-body ]">
                    <slot />
                </div>
                <slot name="footer" />
            </Flexblock>
        </Wrapper>
    }
</div>

<style lang="scss" is:global>
    .dialog {
        --pop-up--margin: 0;
        
        position: absolute;
        top: 75px;
        left: 50%;
        transform: translate(-50%) scale(0.97);
        border: solid 1px var(--border-color);
        opacity: 0;
        transition: all cubic-bezier(0.680, -0.550, 0.265, 1.550) 0.25s;
        pointer-events: none;
        box-shadow: 0 0 5px 0px rgba(0, 0, 0, 0.75);
        z-index: var(--dialog-z-index);

        &:before {
            @media screen and (min-width: 980px) {
                transition: all cubic-bezier(0.680, -0.550, 0.265, 1.550) 1s;
                backdrop-filter: blur(0px) !important;
                background-color: var(--solid-transparency-background-mobile) !important;
            }
        }

        &.open:before {
            @media screen and (min-width: 980px) {
                background-color: var(--solid-transparency-background) !important;
                backdrop-filter: blur(var(--transparency-backdrop-blur)) !important;
            }
        }

        &.non-centered {
            transform: translateX(-50%) scale(0.97);
        }

        &.open {
            transform: translate(-50%) scale(1);
            opacity: 1;
            pointer-events: all;

            &.non-centered {
                transform: translateX(-50%) scale(1);
            }
        }

        &:not(.breakout) {
            max-width: calc(100% - ( var(--pop-up--margin) * 2 ));
            max-height: calc(100% - ( var(--pop-up--margin) * 2 ));
            overflow: auto;
        }

        &.fixed {
            position: fixed;
        }
    }
</style>