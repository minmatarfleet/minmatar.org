---
import type { FittingGroups } from '@dtypes/LayoutComponents';
import { parse_eft } from '@lib/eft-parser.ts';

import Wrapper from '@components/compositions/Wrapper.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import FitSlot from '@components/blocks/FitSlot.astro';

interface Props {
    fitting: string;
}

const {
    fitting,
} = Astro.props

const fitting_parsed = parse_eft(fitting)

let fitting_groups:FittingGroups[] = [];
const groups_order = [ 'High power', 'Medium power', 'Low power', 'Rig Slot' ]

groups_order.forEach((group_title) => {
    if (fitting_parsed[group_title]) {
        fitting_groups.push({
            name: group_title,
            fittables: fitting_parsed[group_title]
        })
    }
})

for (let group_title in fitting_parsed) {
    if (groups_order.includes(group_title)) continue

    fitting_groups.push({
        name: `${group_title}s`,
        fittables: fitting_parsed[group_title]
    })
}
---

<Flexblock gap='var(--space-3xs)'>

    {fitting_groups.map((fitting_group) =>
        <Wrapper class="[ card component ][ light-transparency ]" padding_block='var(--space-l)' padding_inline='var(--space-l-xl)' max_width="var(--max-text-width)">
            <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                <h2>{fitting_group.name}</h2>
                <Flexblock gap="var(--space-3xs)">
                    {fitting_group.fittables.map((fittable) =>
                        <FitSlot fittable={fittable} />
                    )}
                </Flexblock>
            </Flexblock>
        </Wrapper>
    )}

</Flexblock>

<style lang="scss">
    .wrapper {
        display: flex;
        align-items: center;
    }
</style>