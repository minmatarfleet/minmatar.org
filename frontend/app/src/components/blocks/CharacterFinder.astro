---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

interface Props {
    [propName: string]: any;
}

const CHARACTER_FINDER_LIST_PARTIAL_URL = translatePath('/partials/character_finder_list_component/')

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import BlockList from '@components/compositions/BlockList.astro';

import Dialog from '@components/blocks/Dialog.astro';
import Kbd from '@components/blocks/Kbd.astro';
import Input from '@components/blocks/Input.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';
---

<div
    class="[ characters-finder ]"    
    x-data={`{
        search: '',
        close_dialog() {
            characters_finder_open = false
            this.search = ''
            $refs.character_finder_list.innerHTML = ''
        },
        ctrl_shift_f(e) {
            if (e.ctrlKey && e.shiftKey && e.code === 'KeyF') {
                show_characters_finder()
            }
        },
        init() {
            document.addEventListener('keydown', this.ctrl_shift_f, false);
        }
    }`}
>
    <Dialog
        breakout={true}
        non_centered={true}
        thin={true}
        class="[ w-full max-w-[500px] ]"
        x-bind:class="(characters_finder_open ? 'open' : '')"
        x-bind:aria-hidden="characters_finder_open == false"
        x-trap="characters_finder_open"
        x-bind:inert="!characters_finder_open"
        @keyup.escape.window="close_dialog()"
        @mousedown.outside="open && close_dialog()"
    >
        <Flexblock gap="0">
            <Input
                placeholder={t('find_character_placeholder')}
                autocomplete="off"
                name="character_name"
                x-model="search"
                hx-get={CHARACTER_FINDER_LIST_PARTIAL_URL}
                hx-trigger="keyup changed delay:0.5s"
                hx-target="#character-finder-list"
                hx-indicator=".loader"
                class="[ relative z-10 ]"
            >
                <MagnifierIcon slot="icon" />
            </Input>

            <div class="[ relative ]">
                <Flexblock gap='var(--space-3xs)'>
                    <BlockList
                        id="character-finder-list"
                        class="[ character-finder-list ][ light-transparency w-full ]"
                        gap='var(--space-3xs)'
                        x-ref="character_finder_list"
                    />

                    <FlexInline justification='center'>
                        <FlexInline gap="var(--space-3xs)">
                            <span class="[ text-[var(--highlight)] ]">(</span>
                            <Kbd>Shift</Kbd>
                            <span class="[ text-[var(--highlight)] ]">+</span>
                            <span class="[ text-[var(--highlight)] ]">)</span>
                            <Kbd>Tab</Kbd>
                            <small>to navigate</small>
                        </FlexInline>
                        <FlexInline gap="var(--space-3xs)">
                            <Kbd>Enter</Kbd>
                            <small>to select</small>
                        </FlexInline>
                        <FlexInline gap="var(--space-3xs)">
                            <Kbd>Esc</Kbd>
                            <small>to close</small>
                        </FlexInline>
                    </FlexInline>
                </Flexblock>
            </div>
        </Flexblock>
    </Dialog>
</div>

<style lang="scss">
    .dialog {
        top: 12%;
    }
    
    .character-finder-list {
        overflow-y: auto;
        max-height: 320px;
        background-color: #171616;
        border: solid 1px var(--border-color);
        border-top: none;
        height: calc(100% - 20px);
    }

    :global(.character-finder-list > button) {
        background-color: transparent;
        cursor: pointer;
        border: none;
        padding: 0;

        &:focus-within {
            outline: none;
            background-color: var(--component-background);
        }

        span {
            color: var(--highlight);
        }

        small {
            color: var(--foreground);
        }
        
        &:hover {
            background-color: var(--component-background);
        }
    }
</style>