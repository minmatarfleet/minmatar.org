---
import type { ContractUI, CharacterBasic, CorporationBasic, SelectOptions } from '@dtypes/layout_components'

interface Props {
    contracts:              ContractUI[];
    is_supplier:            boolean;
    characters_options:     SelectOptions[];
    corporations_options:   SelectOptions[];
}

const {
    contracts,
    characters_options,
    corporations_options,
    is_supplier,
} = Astro.props

import BlockList from '@components/compositions/BlockList.astro';

import SupplierContractRow from '@components/blocks/SupplierContractRow.astro';
import ContractRow from '@components/blocks/ContractRow.astro';
---

<BlockList class="[ doctrine-contract-group ]" role="list" gap='var(--space-3xs)'>
    {contracts.map(contract => {
        let claimed_by_user_characters:CharacterBasic[] = []
        characters_options.forEach(characters_option => {
            if (contract.responsabilities.find(responsability => responsability.entity_id === characters_option.value as number) !== undefined) {
                claimed_by_user_characters.push({
                    character_id: characters_option.value as number,
                    character_name: characters_option.label,
                })
            }
        })

        const filtered_characters_options = characters_options.filter(option => claimed_by_user_characters.find(contract_entity => contract_entity.character_id === option.value) === undefined)

        let claimed_by_user_corporations:CorporationBasic[] = []
        corporations_options.forEach(corporations_option => {
            if (contract.responsabilities.find(responsability => responsability.entity_id === corporations_option.value as number) !== undefined) {
                claimed_by_user_corporations.push({
                    id: corporations_option.value as number,
                    name: corporations_option.label,
                })
            }
        })

        const filtered_corporations_options = corporations_options.filter(option => claimed_by_user_corporations.find(contract_entity => contract_entity.id === option.value) === undefined)

        const is_claimed = claimed_by_user_characters.length > 0 || claimed_by_user_corporations.length > 0

        return (
            <div
                class="[ contract-badge-container ]"
                x-show={`show_item($el) && (${JSON.stringify(is_claimed)} ? true : show_all)`}
                x-bind:id="id"
                x-data={`{
                    id: $id('contract-badge-container'),
                }`}
            >
                {is_supplier ?
                    <SupplierContractRow
                        contract={contract}
                        characters_options={filtered_characters_options}
                        corporations_options={filtered_corporations_options}
                        claimed_by_user_characters={claimed_by_user_characters}
                        claimed_by_user_corporations={claimed_by_user_corporations}
                    /> :
                    <div class="[ non-supplier-contract-row ]">
                        <ContractRow contract={contract} is_supplier={false} />
                    </div>
                }
            </div>
        )
    })}
</BlockList>

<style lang="scss">
    .contract-badge-container {
        overflow-x: auto;
    }

    .non-supplier-contract-row {
        width: 100%;
        min-width: 1000px;
    }
</style>