---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import type { AssetsUI } from '@dtypes/layout_components'

interface Props {
    character_assets:   AssetsUI;
}

const {
    character_assets,
} = Astro.props

let total_assets_count = 0
character_assets.locations.forEach( (i) => total_assets_count += i.assets.reduce( (c, i) => c + i.count , 0) )

import Flexblock from '@components/compositions/Flexblock.astro';

import PilotBadge from '@components/blocks/PilotBadge.astro';
import LoadingBlock from '@components/blocks/LoadingBlock.astro';
import AssetsListAlpine from '@components/blocks/AssetsListAlpine.astro';
import CollapsableButton from './CollapsableButton.astro';
---

<Flexblock
    class="[ user-assets ]"
    gap='var(--space-xl)'
    x-data={`{
        character_expanded: true,
        assets_locations: ${JSON.stringify(character_assets.locations)},
        assets_locations_icons: ${JSON.stringify(character_assets.location_icons)},
        assets_locations_filtered: ${JSON.stringify(character_assets.locations)},
        total_assets_count: ${total_assets_count},
        total_assets_count_unfiltered: ${total_assets_count},
        collapse_character() {
            this.character_expanded = false
        },
        global_character_collapse() {
            global_players_collapse && this.collapse_character()
        },
        filter() {
            if (asset_name === '' && asset_station === '-1') {
                this.assets_locations_filtered = (assets_style == 'list' ? this.assets_locations : this.assets_locations_icons)
                this.total_assets_count = this.total_assets_count_unfiltered
                return
            }

            this.assets_locations_filtered = []
            this.total_assets_count = 0
            const assets = (assets_style == 'list' ? this.assets_locations : this.assets_locations_icons)
            assets.forEach( (assets_location) => {
                if (asset_station !== '-1' && assets_location.location_name !== asset_station)
                    return true

                filtered_assets = assets_location.assets.filter( (asset) => asset.name.toLowerCase().includes(asset_name.toLowerCase()) )
                                
                if (filtered_assets.length > 0) {
                    this.total_assets_count += filtered_assets.reduce( (c, asset) => c + (asset?.count ?? 1) , 0 )
                    this.assets_locations_filtered.push({
                        location_name: assets_location.location_name,
                        assets: filtered_assets
                    })
                }
            })
        },
        init() {
            $refs.server_side_render.remove()
        },
        toggle_assets_collapse() {
            this.character_expanded = !this.character_expanded
            global_players_collapse = false
        },
        character_id: ${character_assets.character_id},
        character_name: "${character_assets.character_name}",
    }`}
    x-effect="filter(); global_character_collapse()"
>
    <CollapsableButton
        x-on:click="toggle_assets_collapse()"
        class="[ !max-w-[var(--max-text-width)] ]"
    >
        <PilotBadge
            character_id={character_assets.character_id}
            character_name={character_assets.character_name}
        >
            <small x-text={`\`\${total_assets_count} \${total_assets_count != 1 ? '${t('assets').toLowerCase()}' : '${t('asset').toLowerCase()}'} ${t('in_inventory').toLowerCase()}\``}>
                {total_assets_count} {total_assets_count != 1 ? t('assets').toLowerCase() : t('asset').toLowerCase()} {t('in_inventory').toLowerCase()}
            </small>
        </PilotBadge>
    </CollapsableButton>

    <div x-ref="server_side_render">
        <LoadingBlock message={t('loading_assets')} />
    </div>
    <div
        x-show="character_expanded"
        x-collapse.duration.0ms
    >
        <AssetsListAlpine />
    </div>
</Flexblock>