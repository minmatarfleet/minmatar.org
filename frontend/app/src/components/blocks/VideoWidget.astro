---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { VideoWidgetCredits } from '@dtypes/layout_components';
import { query_string } from '@helpers/string';

interface Props {
    url:            string;
    credits?:       false | VideoWidgetCredits;
    shadow?:        boolean;
}

const {
    url,
    credits = false,
    shadow = false,
} = Astro.props

import Wrapper from "@components/compositions/Wrapper.astro";
---

<Wrapper
    class="relative"
    max_width="var(--max-col-width)"
    padding_inline="0"
    padding_block="0"
>
    <div
        class:list={[ '[ video-frame w-full relative ]', {shadow:shadow} ]}
        x-data={`{
            SYNC_INTERVAL: 10000,
            sync_players() {
                if (!$refs.main_player) return

                $refs.background_player.currentTime = $refs.main_player.currentTime;
                setTimeout(() => this.sync_players(), this.SYNC_INTERVAL)
            },
            init() {
                this.sync_players()
            }
        }`}
    >
        <div class="[ video-container ]">
            <video x-ref="main_player" class="[ w-full relative z-10 ]" autoplay loop muted>
                <source src={url} type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
        
        <div x-ref="background_player" class="[ video-container background-light z-0 ]">
            <video class="[ w-full ]" autoplay loop muted>
                <source src={url} type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
    </div>
    {credits !== false &&
        <p>{t('credits')}:
            {credits.character_id ?
                <span
                    class="[ cursor-pointer ]"
                    x-data={`{
                        show_character_modal() {
                            show_modal({
                                partial: '${translatePath('/partials/character_modal_component/')}?${query_string({
                                    character_id: credits.character_id.toString(),
                                })}',
                            })
                        }
                    }`}
                    x-on:click="show_character_modal()"
                >{credits.character_name}</span>
                :
                <span>{credits.character_name}</span>
            }
        </p>
    }
</Wrapper>

<style lang="scss">
    .video-container {
        overflow: hidden;

        > video {
            transform: scale(1.1);
            display: block;
            width: 100%;
        }
    }

    .background-light {
        position: absolute;
        inset: 0;
        transform: scale(1.1);
        filter: blur(100px);
        opacity: 0.7;
        display: flex;
        align-items: center;
    }

    .video-frame {
        display: flex;
        align-items: center;
        aspect-ratio: 960/540;
        max-width: 960px;
    }

    .shadow {
        max-width: 960px;
        box-shadow: 0 0 200px 60px black, inset 0 0 400px 400px black;
    }

    span {
        color: var(--highlight);
    }

    p {
        position: absolute;
        bottom: -25px;
        right: 0;
        font-size: var(--step--2);
    }
</style>