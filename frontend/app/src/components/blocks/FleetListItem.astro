---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

import type { FleetItem } from '@dtypes/layout_components';

interface Props {
    fleet: FleetItem;
    history?: boolean;
    [propName: string]: any;
}

const {
    fleet,
    history = false,
    ...attributes
} = Astro.props

import { get_player_icon } from '@helpers/eve_image_server'
import { marked } from 'marked';
import { renderer } from '@helpers/marked';

const APPLY_HINT_TEXT = (marked.parseInline(t('apply_hint')) as string)
    .replace(
        'FLEET_PAGE_LINK', translatePath('/alliance/')
    ).replace(
        'CORPORATIONS_PAGE_LINK', translatePath('/alliance/corporations/list/')
    )

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import Button from '@components/blocks/Button.astro';
import ThumbCard from '@components/blocks/ThumbCard.astro';
import Countdown from '@components/blocks/Countdown.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import TextGroup from '@components/blocks/TextGroup.astro';
import LocalTimeGroup from '@components/blocks/LocalTimeGroup.astro'

import StratopIcon from '@components/icons/StratopIcon.astro';
import NonStrategicIcon from '@components/icons/NonStrategicIcon.astro';
import TrainingIcon from '@components/icons/TrainingIcon.astro';

const eve_time = new Date(fleet.start_time);
const eve_time_text = eve_time.toLocaleDateString(lang, JSON.parse(import.meta.env.DATETIME_FORMAT))
---

<ThumbCard
    thumb_name={fleet.fleet_commander_name}
    thumb_image={get_player_icon(fleet.fleet_commander_id, 512)}
    thumb_image_small={get_player_icon(fleet.fleet_commander_id, 512)}
    thumb_image_alt={fleet.fleet_commander_name}
    thumb_title={t('fleet_commander')}
    {...attributes}
>
    <div
        class="[ absolute top-0 left-0 ]"
        data-tippy-content={
            fleet.type === 'strategic' ?
            t('strategic_fleet') :
            fleet.type === 'training' ?
            t('training_fleet') :
            t('non_strategic_fleet')
        }
        x-init="tippy($el, tippy_options)"
    >
        {fleet.type === 'strategic' ?
            <StratopIcon /> :
            fleet.type === 'training' ?
            <TrainingIcon /> :
            fleet.type === 'non_strategic' &&
            <NonStrategicIcon />
        }
    </div>

    {fleet.fleet_commander_id === 0 &&
        <VerticalCenter class="[ grow ]">
            <FlexInline justification='space-between'>
                <Flexblock gap='0'>
                    <p class="[ text-[var(--highlight)] ]">{t('cant_view_fleet_details')}</p>
                    
                    {user && fleet.audience === 'Alliance' &&
                        <small set:html={APPLY_HINT_TEXT} />
                    }
                    {user && fleet.audience === 'Militia' &&
                        <small>{t('enlist_fw_hint')}</small>
                    }
                </Flexblock>
            </FlexInline>
        </VerticalCenter>
    }

    {fleet.fleet_commander_id > 0 &&
        <VerticalCenter>
            <Flexblock gap="var(--space-s-m)">
                <TextGroup title={t('eve_time')} class="[ sentence-cap ]">
                    {eve_time_text}
                </TextGroup>
                <LocalTimeGroup eve_time={eve_time} />
            </Flexblock>
        </VerticalCenter>

        <VerticalCenter>
            <TextGroup title={t('description')} full={true}>
                <Flexblock slot="outside" class="[ wrap-break-word max-w-full ]" gap="var(--space-s-m)" set:html={marked.parse(fleet.description ?? '', { renderer })} />
            </TextGroup>
        </VerticalCenter>

        <VerticalCenter class="[ justify-center ]">
            <Flexblock>
                {fleet?.status === 'cancelled' &&
                    <p class="[ fleet-status-text cancelled ]">{t('cancelled')}</p>
                }
                
                {fleet?.status !== 'cancelled' && fleet?.tracking && !fleet?.tracking?.end_time &&
                    <p class="[ fleet-status-text blink-animation ]">{t('active')}</p>
                }

                {fleet?.status !== 'cancelled' && fleet?.tracking && fleet?.tracking?.end_time &&
                    <p class="[ fleet-status-text ]">{t('completed')}</p>
                }

                {fleet?.status !== 'cancelled' && !history && !fleet?.tracking &&
                    <Countdown
                        date={fleet.start_time}
                        id={fleet.id}
                        tag='countdown-fleet'
                    />
                }
            </Flexblock>
        </VerticalCenter>
    }

    {fleet.fleet_commander_id > 0 &&
        <VerticalCenter slot="actions">
            <Button href={translatePath(`/fleets/${history ? 'history' : 'upcoming'}/${fleet.id}`)}>
                {t('view_details')}
            </Button>
        </VerticalCenter>
    }
</ThumbCard>

<style lang="scss">
    .wrap-break-word {
        max-width: 100%;
        overflow-wrap: break-word;
    }

    :global(.wrap-break-word *) {
        max-width: 100%;
        overflow-wrap: break-word;
    }

    .fleet-status-text {
        font-family: var(--heading-font);
        font-size: var(--step-0);
        margin-left: -10px;
        margin-right: -10px;
        color: var(--highlight);
		letter-spacing: 12px;
        text-indent: 12px;
		line-height: 1;
        white-space: nowrap;
        text-transform: uppercase;

        &.cancelled {
            color: var(--fleet-red);
        }
    }
</style>