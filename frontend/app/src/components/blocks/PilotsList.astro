---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { query_string } from '@helpers/string';
import type { Character } from '@dtypes/api.minmatar.org'
import { get_api_url, get_app_url } from '@helpers/env'
import type { Alert } from '@dtypes/layout_components'

interface Props {
    pilots?:            Array<Character>;
    readonly?:          boolean;
    removed_character?: number | false;
    alert?:             Alert | false;
    [propName: string]: any;
}

const {
    pilots = [],
    readonly = true,
    removed_character = false,
    alert = false,
    ...attributes
} = Astro.props

const primary_pilot = Astro.cookies.has('primary_pilot') ? JSON.parse(Astro.cookies.get('primary_pilot')?.value as string) : null
const primary_pilot_id = primary_pilot ? parseInt(primary_pilot.character_id) : null

// const ADD_PRIMARY_CHARACTER_URL = `${get_api_url()}/api/eveonline/characters/primary/add?redirect_url=${get_app_url()}${translatePath('/redirects/add_primary_character')}&token_type=Basic`
const ADD_CHARACTER_URL = `${get_api_url()}/api/eveonline/characters/add?redirect_url=${get_app_url()}${translatePath('/account')}&token_type=Basic`
const PILOTS_LIST_PARTIAL_URL = `${get_app_url()}${translatePath('/partials/pilots_list_component')}`
const SET_MAIN_CHARACTER_PARTIAL_URL = translatePath('/partials/set_primary_character')

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import TrashIcon from '@components/icons/buttons/TrashIcon.astro';
import Button from '@components/blocks/Button.astro';
import DisableBlock from '@components/blocks/DisableBlock.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';

delete attributes.class
---

<DisableBlock
    id="pilots-list"
    disabled={false}
    x_model="enabled"
    class:list={['pilot-list', Astro.props.class]}
    {...attributes}
    gap='var(--space-s)'
    x-data={`{
        pilots: ${JSON.stringify(pilots)},
        primary_pilot: ${primary_pilot_id},
        character_name_slugs: {},
        enabled: true,
        add_pilot(accepted) {
            if (accepted) window.location.href = "${ADD_CHARACTER_URL}"
        },
        pilot_list_init() {
            ${removed_character !== false ? `stop_remove_animation(${removed_character})` : ''}
            ${alert !== false ? `show_alert_dialog(${JSON.stringify(alert)})` : ''}
        }
    }`}
    x-init="pilot_list_init()"
>
    <Flexblock gap='var(--component-block-gap)'>
        <FlexInline
            justification='space-between'
            gap="var(--space-s)"
            class="[ items-center ]"
        >
            <Flexblock gap="var(--space-3xs)">
                <h2>{t('pilot')}s</h2>
                <small class="!mt-[var(--space-3xs)]">
                    {pilots.length} {pilots.length != 1 ? t('pilots').toLowerCase() : t('pilot').toLowerCase()}
                </small>
            </Flexblock>
            
            {!readonly &&
                <FlexInline>
                    <Button
                        size='sm'
                        type="button"
                        x-data={`{
                            show_add_pilot_disclaimer() {
                                if (pilots.length == 0) {
                                    show_alert_dialog({
                                        title: '${t('add_primary_pilot_dialog_title')}',
                                        partial: '${translatePath('/partials/add_pilot_dialog/')}?${query_string({
                                            is_main: JSON.stringify(true),
                                        })}',
                                    }).then( (accepted) => add_pilot(accepted) )
                                } else {
                                    show_alert_dialog({
                                        title: '${t('add_pilot_dialog_title')}',
                                        partial: '${translatePath('/partials/add_pilot_dialog/')}?${query_string({
                                            is_main: JSON.stringify(false),
                                        })}',
                                    }).then( (accepted) => add_pilot(accepted) )
                                }
                            }
                        }`}
                        x-on:click="show_add_pilot_disclaimer"
                    >
                        {pilots.length === 0 &&
                            t('add_primary_pilot')
                        }
                        {pilots.length > 0 &&
                            t('add_pilot')
                        }
                    </Button>
                </FlexInline>
            }
        </FlexInline>

        <Flexblock gap='var(--space-3xs)'>
            {pilots.map((pilot) =>
                <FixedFluid width='64px' class="[ pilot-item ]" x-bind:class={`{ 'blink-animation': remove_request_ongoing.includes(${pilot.character_id}) }`}>
                    <CharacterPicture
                        character_id={pilot.character_id}
                        character_name={pilot.character_name}
                    />
                    <FlexInline class="[ items-center ]">
                        <Flexblock gap='0' class="[ grow ]">
                            <span
                                class="truncate cursor-pointer text-[var(--highlight)]"
                                set:text={pilot.character_name}
                                x-data={`{
                                    show_character_modal() {
                                        show_modal({
                                            partial: '${translatePath('/partials/character_modal_component/')}?${query_string({
                                                character_id: pilot.character_id.toString(),
                                            })}'
                                        })
                                    }
                                }`}
                                x-on:click="show_character_modal()"
                            />
                            <small class="truncate">
                                {pilot.character_id == primary_pilot_id ?
                                    t('main_character') :
                                    t('alt_character')
                                }
                            </small>
                        </Flexblock>
                        <FlexInline>
                            {!readonly && pilot.character_id != primary_pilot_id &&
                                <Button
                                    class="[ action-button ]"
                                    size='sm'
                                    type="button"
                                    x-data={`{
                                        show_set_main_dialog() {
                                            show_confirm_dialog({
                                                title: '${t('set_main_character_dialog_title')}',
                                                partial: '${translatePath('/partials/dialog_with_character/')}?${query_string({
                                                    id: pilot.character_id,
                                                    character_name: pilot.character_name,
                                                    message: t('set_main_character_dialog_text')    
                                                })}',
                                                hx: {
                                                    method: 'post',
                                                    url: '${SET_MAIN_CHARACTER_PARTIAL_URL}?${query_string({
                                                        id: pilot.character_id,
                                                        character_name: pilot.character_name,
                                                    })}',
                                                    target: '#pilots-list',
                                                    swap: 'outerHTML transition:true'
                                                }
                                            })
                                        }
                                    }`}
                                    x-on:click="show_set_main_dialog"
                                >
                                    {t('set_primary_pilot')}
                                </Button>
                            }

                            {!readonly &&
                                <Button
                                    class="[ action-button ]"
                                    size='sm'
                                    type="button"
                                    narrow={true}
                                    x-data={`{
                                        show_remove_character_dialog() {
                                            show_confirm_dialog({
                                                title: '${t('remove_pilot_dialog_title')}',
                                                partial: '${translatePath('/partials/dialog_with_character/')}?${query_string({
                                                    id: pilot.character_id.toString(),
                                                    character_name: pilot.character_name,
                                                    message: t('remove_pilot_dialog_text'),
                                                })}',
                                                return_on_accept: ${pilot.character_id},
                                                hx: {
                                                    method: 'delete',
                                                    url: '${PILOTS_LIST_PARTIAL_URL}?${query_string({
                                                        id: pilot.character_id.toString(),
                                                        character_name: pilot.character_name
                                                    })}',
                                                    target: '#pilots-list',
                                                    swap: 'outerHTML transition:true'
                                                }
                                            }).then( (character_id) => start_remove_animation(character_id) )
                                        }
                                    }`}
                                    x-on:click="show_remove_character_dialog()"
                                >
                                    <TrashIcon slot="icon" />
                                </Button>
                            }
                        </FlexInline>
                    </FlexInline>
                </FixedFluid>
            )}
            {pilots.length == 0 &&
                <slot>
                    {t('empty_pilots_text')}
                </slot>
            }
        </Flexblock>
    </Flexblock>
</DisableBlock>

<style lang="scss">
    .pilot-list {
        transition: var(--slow-transition);

        img {
            object-fit: cover;
            width: 100%;
            height: 100%;
        }

        .pilot-item {
            @media (hover: hover) {
                .action-button {
                    transition: var(--fast-transition);
                    opacity: 0;
                }

                &:hover,
                &:focus-within {
                    .action-button {
                        opacity: 1;
                    }
                }
            }
        }

        &.disabled {
            pointer-events: none;
            opacity: 0.25;
        }
    }
</style>