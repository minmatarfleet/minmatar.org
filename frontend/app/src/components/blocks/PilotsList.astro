---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import { get_player_icon } from '@helpers/eve_image_server';
import type { Character } from '@dtypes/api.minmatar.org'

interface Props {
    pilots?:            Array<Character>;
    empty_text?:        string | boolean;
    readonly?:          boolean;
    [propName: string]: any;
}

const {
    pilots = [],
    empty_text = t('empty_pilots_text'),
    ADD_CHARACTER_TOKEN_ENDPOINT = `${import.meta.env.API_URL}/api/eveonline/characters/add?redirect_url=${import.meta.env.APP_URL}/account&token_type=Basic`,
    readonly = true,
    ...attributes
} = Astro.props;

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import TrashIcon from '@components/icons/buttons/TrashIcon.astro';
import FluidFixed from '@components/compositions/FluidFixed.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import Button from '@components/blocks/Button.astro';

delete attributes.class
---

<Flexblock
    class:list={['pilot-list', Astro.props.class]}
    {...attributes}
    gap='var(--space-s)'
    x-data={`{
        pilots: ${JSON.stringify(pilots)},
        pilots_ids: [],
        init() {
            $refs.server_side_render.remove()
            this.generate_ids()
        },
        generate_ids() {
            this.pilots_ids = this.pilots.map(e => e.character_id).join(',')
        },
        add_pilot() {
            window.location.href = "${ADD_CHARACTER_TOKEN_ENDPOINT}"
        }
    }`}
    x-init="init"
>
    <FlexInline
        justification='space-between'
        gap="var(--space-s)"
    >
        <Flexblock gap="var(--space-3xs)">
            <h2>{t('pilot')}s</h2>
            <small class="!mt-[var(--space-3xs)]" x-text={'`${pilots.length} '+t('pilot').toLowerCase()+'${pilots.length != 1 ? `s` : ``}`'}>
                {pilots.length} {pilots.length != 1 ? t('pilots').toLowerCase() : t('pilot').toLowerCase()}
            </small>
        </Flexblock>
        
        {!readonly && 
            <VerticalCenter>
                <Button
                    size='sm'
                    type="button"
                    class="[ w-full ]"
                    x-on:click={`add_pilot(await show_alert_dialog('${t('add_pilot_dialog_title')}', '<p>${t('add_pilot_dialog_text')}</p>'))`}
                >
                    {t('add_pilot')}
                </Button>
            </VerticalCenter>
        }
    </FlexInline>

    <Flexblock x-ref="server_side_render" gap='var(--space-3xs)'>
        {pilots.map((pilot) =>
            <FixedFluid width='64px'>
                <picture>
                    <img src={get_player_icon(pilot.character_id, 256)} width="64" height="64" alt={`${t('profile_picture_of')} ${pilot.character_name}`}>
                </picture>
                <FluidFixed width='46px' breakpoint='60%'>
                    <VerticalCenter>
                        <Flexblock gap='0' class="[ w-full ]">
                            <span class="truncate text-[var(--highlight)]" set:text={pilot.character_name} />
                            <small class="truncate">Not group membership</small>
                        </Flexblock>
                    </VerticalCenter>
                    <VerticalCenter></VerticalCenter>
                </FluidFixed>
            </FixedFluid>
        )}
        {empty_text && pilots.length == 0 &&
            <p>{empty_text}</p>
        }
    </Flexblock>

    <Flexblock gap='var(--space-3xs)'>
        <template x-for="pilot in pilots">
            <FixedFluid width='64px' class="[ pilot-item ]">
                <picture>
                    <img x-bind:src="get_player_icon(pilot.character_id, 256)" width="64" height="64" alt="pilot.alt">
                </picture>
                <FluidFixed width='46px' breakpoint='60%'>
                    <VerticalCenter>
                        <Flexblock gap='0' class="[ w-full ]">
                            <span class="truncate text-[var(--highlight)]" x-text="pilot.character_name" />
                            <small class="truncate">Not group membership</small>
                        </Flexblock>
                    </VerticalCenter>
                    <VerticalCenter>
                        {!readonly && 
                            <Button
                                class="[ action-button ]"
                                size='sm'
                                type="button"
                                narrow={true}
                            >
                                <TrashIcon slot="icon" />
                            </Button>
                        }
                    </VerticalCenter>
                </FluidFixed>
            </FixedFluid>
        </template>

        {empty_text &&
            <p class="hidden" x-bind:class="{ hidden: pilots.length > 0 }">{empty_text}</p>
        }
    </Flexblock>

    <input type="hidden" name="pilots" x-model="pilots_ids">
</Flexblock>

<style lang="scss">
    [x-ref="server_side_render"] + .flex-block {
        margin-block-start: 0;
    }

    template + .pilot-item {
        margin-block-start: 0;
    }

    .pilot-list {
        transition: var(--slow-transition);

        img {
            object-fit: cover;
            width: 100%;
            height: 100%;
        }

        .pilot-item {
            @media (hover: hover) {
                .action-button {
                    transition: var(--fast-transition);
                    opacity: 0;
                }

                &:hover,
                &:focus-within {
                    .action-button {
                        opacity: 1;
                    }
                }
            }
        }

        &.disabled {
            pointer-events: none;
            opacity: 0.25;
        }
    }
</style>