---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import type { FleetUI, FleetCompositionUI, FleetRadarUI, SRPUI, FleetCombatLog } from '@dtypes/layout_components'

interface Props {
    fleet:                  FleetUI;
    history?:               boolean;
    can_remove_fleet:       boolean;
    is_fleet_commander?:    boolean;
    fleet_composition?:     FleetCompositionUI[];
    fleet_radar?:           FleetRadarUI[];
    fleet_srps?:            SRPUI[];
    saved_logs?:            FleetCombatLog[];
}

const {
    fleet,
    history = false,
    can_remove_fleet = false,
    is_fleet_commander = false,
    fleet_composition,
    fleet_radar,
    fleet_srps,
    saved_logs = [],
} = Astro.props

import { query_string } from '@helpers/string';

const FLEET_REMOVE_BUTTON_PARTIAL_URL = translatePath('/partials/fleet_remove_button_component')
const FLEET_COMPOSITION_PARTIAL_URL = `${translatePath('/partials/fleet_composition')}?id=${fleet.id}`

import { marked } from 'marked';
import { renderer } from '@helpers/marked';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Wrapper from '@components/compositions/Wrapper.astro';

import FleetCompositionBlock from '@components/blocks/FleetCompositionBlock.astro';
import Button from '@components/blocks/Button.astro';
import TextGroup from '@components/blocks/TextGroup.astro';
import DoctrineItem from '@components/blocks/DoctrineItem.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import PilotBadge from '@components/blocks/PilotBadge.astro';
import FleetStatus from '@components/blocks/FleetStatus.astro';
import SRPTable from '@components/blocks/SRPTable.astro';
import FleetCombatLogTable from '@components/blocks/FleetCombatLogTable.astro';

const eve_time = new Date(fleet.start_time);
const eve_time_text = eve_time.toLocaleDateString(lang, JSON.parse(import.meta.env.DATETIME_FORMAT))
---

<Flexblock
    gap="var(--space-2xl)"
    x-data={`{
        time_class: '',
        time_tooltip: false,
        set_time_class() {
            const date = new Date('${eve_time} UTC')
            const hour = date.getHours()

            if (hour >= 0 && hour < 1) {
                this.timer_class = 'text-status-point-1'
                this.time_tooltip = '${t('sleeptime')}'
            } else if (hour >= 1 && hour < 7) {
                this.time_class = 'text-status-point-2'
                this.time_tooltip = '${t('sleeptime')}'
            } else if (hour >= 7 && hour < 8) {
                this.time_class = 'text-status-point-3'
                this.time_tooltip = '${t('sleeptime')}'
            } else if (hour >= 8 && hour < 9) {
                this.time_class = 'text-status-point-4'
                this.time_tooltip = '${t('daytime')}'
            } else if (hour >= 9 && hour < 19) {
                this.time_class = 'text-status-point-5'
                this.time_tooltip = '${t('daytime')}'
            } else if (hour >= 19 && hour < 20) {
                this.time_class = 'text-status-point-6'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 20 && hour < 21) {
                this.time_class = 'text-status-point-7'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 21 && hour < 22) {
                this.time_class = 'text-status-point-8'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 22 && hour < 23) {
                this.time_class = 'text-status-point-9'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 23) {
                this.time_class = 'text-status-null'
                this.time_tooltip = '${t('sleeptime')}'
            } else {
                this.time_class = 'text-yellow'
                this.time_tooltip = '${t('daytime')}'
            }
        },
        tracking_started: false,
        local_time: new Date('${eve_time} UTC').toLocaleDateString(
            '${lang}',
            ${import.meta.env.DATETIME_FORMAT}
        ),
        init() {
            this.set_time_class()
        }
    }`}
    @tracking_started="tracking_started = true"
>
    <Flexblock gap="var(--space-3xs)">
        <ComponentBlock>
            <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                <FlexInline class="[ grow !items-start ]" justification='space-between'>
                    <Flexblock class="[ basis-[250px] ]" gap='var(--space-3xs)'>
                        <h4>{t('fleet_commander')}</h4>
                        <PilotBadge
                            character_id={fleet.fleet_commander_id}
                            character_name={fleet.fleet_commander_name}
                            size={32}
                        />
                    </Flexblock>
                    {can_remove_fleet &&
                        <FlexInline>
                            {!history &&
                                <Button
                                    size='sm'
                                    href={translatePath(`/fleets/upcoming/edit/${fleet.id}`)}
                                >
                                    {t('edit')}
                                </Button>
                            }

                            {(!history && fleet.tracking === null) &&
                                <Button
                                    size='sm'
                                    x-data={`{
                                        show_remove_fleet_dialog() {
                                            show_confirm_dialog({
                                                title: '${t('remove_fleet_dialog_title')}',
                                                content: '${t('remove_fleet_dialog_text')}',
                                                hx: {
                                                    method: 'delete',
                                                    url: '${FLEET_REMOVE_BUTTON_PARTIAL_URL}?${query_string({
                                                        fleet_id: fleet.id,
                                                    })}',
                                                    swap: 'outerHTML transition:true'
                                                }
                                            })
                                        }
                                    }`}
                                    x-on:click="show_remove_fleet_dialog"
                                >
                                    {t('remove')}
                                </Button>
                            }
                        </FlexInline>
                    }
                </FlexInline>

                <FlexInline class="[ !items-start ]">
                    <div class="[ basis-[250px] ]">
                        <Flexblock class="[ basis-[250px] ]">
                            <TextGroup title={t('eve_time')} class="[ sentence-cap ]">
                                {eve_time_text}
                            </TextGroup>
                            <TextGroup title={t('local_time')}>
                                <span
                                    class="[ sentence-cap ]"
                                    x-bind:class="time_class"
                                    x-text="local_time"
                                    x-bind:data-tippy-content="time_tooltip"
                                    x-init="tippy($el, this.tippy_options)"
                                >
                                    <span class="[ loading ]">{t('calculating')}</span>
                                </span>
                            </TextGroup>
                        </Flexblock>
                    </div>
                    <div class="[ basis-[250px] ]">
                        <Flexblock class="[ basis-[250px] ]">
                            <TextGroup title={t('location')} class="[ sentence-cap ]">
                                {fleet.location}
                            </TextGroup>
                            <TextGroup title={t('type')} class="[ sentence-cap ]">
                                {t(fleet.type as any)}
                            </TextGroup>
                        </Flexblock>
                    </div>
                </FlexInline>

                <Flexblock gap='var(--space-3xs)'>
                    <h4 class="[ sentence-cap ]">{t('description')}</h4>
                    <TextBox max_width='40rem'>
                        <Flexblock set:html={marked.parse(fleet.description, { renderer })} />
                    </TextBox>
                </Flexblock>

                <!--<VerticalCenter>
                    <TextGroup title={t('tracking')} class:list={[ { loading: (fleet.tracking == t('forming')) } ]}>
                        {fleet.tracking}
                    </TextGroup>
                </VerticalCenter> -->
            </Flexblock>
        </ComponentBlock>

        <FleetStatus fleet={fleet} is_fleet_commander={is_fleet_commander} />

        {is_fleet_commander &&
            <div
                x-data={`{
                    global_collapse: $persist(false),
                }`}
            >
                {fleet?.tracking &&
                    <ComponentBlock>
                        <FleetCompositionBlock
                            composition={fleet_composition ?? []}
                            fleet_radar={fleet_radar ?? []}
                            fleet_id={fleet.id}
                        />
                    </ComponentBlock>
                }

                {!fleet?.tracking &&
                    <template
                        x-if="tracking_started"
                    >
                        <ComponentBlock
                            x-data={`{
                                init() {
                                    htmx.process($el)
                                }
                            }`}
                            hx-get={FLEET_COMPOSITION_PARTIAL_URL}
                            hx-trigger="load delay:30s once"
                            hx-indicator=".loader"
                            hx-swap="innerHTML transition:true"
                        >
                            <p class="[ loading ]">{t('loading_fleet_composition')}</p>
                        </ComponentBlock>
                    </template>
                }
            </div>
        }

        {fleet.doctrine !== null &&
            <ComponentBlock>
                <DoctrineItem doctrine={fleet.doctrine} />
            </ComponentBlock>
        }
    </Flexblock>

    <Wrapper padding_block='0' padding_inline='var(--space-l-xl)'>
        <SRPTable fleet_id={fleet.id} fleet_srps={fleet_srps as SRPUI[]} readonly={!can_remove_fleet} />
    </Wrapper>

    <Wrapper padding_block='0' padding_inline='var(--space-l-xl)'>
        <FleetCombatLogTable saved_logs={saved_logs} fleet_id={fleet.id} />
    </Wrapper>
</Flexblock>