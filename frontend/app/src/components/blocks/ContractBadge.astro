---
import { i18n } from '@helpers/i18n'
const { lang, t } = i18n(Astro.url)

import type { ContractUI } from '@dtypes/layout_components'

interface Props {
    contract:       ContractUI;
    is_supplier:    boolean;
}

const {
    contract,
    is_supplier,
} = Astro.props

const low_amount = (contract.current_quantity <= (20 * contract.desired_quantity)/100)

import { get_item_icon } from '@helpers/eve_image_server'
import { format_date_shortest } from '@helpers/date'

import FlexInline from '@components/compositions/FlexInline.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';
import CorporationPicture from '@components/blocks/CorporationPicture.astro';
import Square from '@components/blocks/Square.astro';
---

<ComponentBlock padding_inline='0' padding_block='0'>
    <Flexblock gap='0'>
        <Wrapper padding_block='var(--space-2xs)' padding_inline='var(--space-2xs)'>
            <FlexInline justification='space-between'>
                <FixedFluid width='32px' class="[ items-center grow ]">
                    <picture>
                        <img loading="lazy" src={get_item_icon(contract.eve_type_id, 32)} width={32} height={32} />
                    </picture>
                    <h4 class="[ title ]">{contract.title}</h4>
                </FixedFluid>
                <div class="[ quantity ]">
                    <span class:list={{ 'text-red': low_amount }}>{contract.current_quantity}</span>/{contract.desired_quantity}
                </div>
            </FlexInline>
        </Wrapper>
        <div class="h-[64px] mb-[-7px]">
            <canvas
                x-data={`{
                    init() {
                        if (window.innerWidth < 1280) {
                            $el.closest('div').remove()
                            return
                        }

                        const ctx = $el.getContext('2d')

                        const gradient = ctx.createLinearGradient(0, 0, 0, 64)
                        gradient.addColorStop(0, '${low_amount ? 'rgba(255, 110, 110, 0.5)' : 'rgba(110, 233, 255, 0.5)'}')
                        gradient.addColorStop(1, '${low_amount ? 'rgba(255, 110, 110, 0)' : 'rgba(110, 233, 255, 0)'}')

                        Chart.defaults.font.family = 'Montserrat Variable';
                        Chart.defaults.backgroundColor = 'rgba(0, 0, 0, 0)';

                        const myChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: ${JSON.stringify(contract.trend_x_axis.reverse().map(x => format_date_shortest(lang, x)))},
                                datasets: [{
                                    label: "${t('contracts_sold')}",
                                    data: ${JSON.stringify(contract.trend_y_axis.reverse())},
                                    pointStyle: 'rect',
                                    fill: true,
                                    backgroundColor: gradient,
                                    borderColor: '${low_amount ? '#ff6e6e' : '#6ee9ff'}',
                                    borderWidth: 2,
                                    pointRadius: 1
                                },
                                {
                                    label: "${t('desired_quantity')}",
                                    data: ${JSON.stringify(Array(contract.trend_x_axis.length).fill(contract.desired_quantity))},
                                    pointStyle: 'rect',
                                    backgroundColor: 'rgba(241, 217, 160, 0.2)',
                                    borderColor: 'rgba(241, 217, 160, 0.2)',
                                    borderWidth: 1,
                                    pointRadius: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                layout: {
                                    padding: {
                                        left: -10,
                                        bottom: -10
                                    }
                                },
                                plugins: {
                                    legend: {
                                        display: false
                                    },
                                    glow: {
                                        consoleText: 'testText'
                                    },
                                },
                                scales: {
                                    x: {
                                        title: {
                                            display: false
                                        },
                                        grid: {
                                            display: false
                                        },
                                        ticks: {
                                            display: false
                                        },
                                        border: {
                                            display: false
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: false
                                        },
                                        grid: {
                                            display: false
                                        },
                                        ticks: {
                                            display: false
                                        },
                                        border: {
                                            display: false
                                        },
                                        min: 0,
                                        max: ${Math.max(Math.max(...contract.trend_y_axis), contract.desired_quantity) + 1}
                                    }
                                }
                            },
                            plugins: [{
                                id: 'glow',
                                beforeDraw: (chart, args, options) => {
                                    let ctx = chart.ctx
                                    let _stroke = ctx.stroke
                                    ctx.stroke = function() {
                                        ctx.save()
                                        ctx.shadowColor = '#ffffff'
                                        ctx.shadowBlur = 5
                                        ctx.shadowOffsetX = 0
                                        ctx.shadowOffsetY = 0
                                        _stroke.apply(this, arguments)
                                        ctx.restore()
                                    }
                                }
                            }]
                        })
                    }
                }`}
            ></canvas>
        </div>

        <hr class:list={[ 'border', { 'mb-[var(--space-2xs)]': !is_supplier } ]} />

        {is_supplier &&
            <Wrapper padding_block='var(--space-3xs)' padding_inline='var(--space-2xs)'>
                {contract.responsabilities.length > 0 ?
                    <FlexInline gap='var(--space-3xs)'>
                        <small>{contract.responsabilities.length !== 1 ? t('seeders') : t('seeder')}</small>
                        {contract.responsabilities.map(entity =>
                            <div data-tippy-content={entity.entity_name} x-init="tippy($el, tippy_options)">
                                {entity.entity_type === 'character' ?
                                    <CharacterPicture
                                        character_id={entity.entity_id}
                                        character_name={entity.entity_name}
                                        size={16}
                                        icon_quality={32}
                                    />
                                    :
                                    <CorporationPicture
                                        corporation_id={entity.entity_id}
                                        corporation_name={entity.entity_name}
                                        size={16}
                                        icon_quality={32}
                                    />
                                }
                            </div>
                        )}
                    </FlexInline>
                    :
                    <FlexInline gap='var(--space-3xs)'>
                        <Square color='fleet-red' />
                        <small>{t('no_seeders')}</small>
                    </FlexInline>
                }
            </Wrapper>
        }
    </Flexblock>
</ComponentBlock>

<style lang="scss">
    .quantity {
        font-family: var(--heading-font);
        text-transform: uppercase;
        font-size: var(--step-0);
        font-weight: 400;
        color: var(--highlight);
    }
</style>