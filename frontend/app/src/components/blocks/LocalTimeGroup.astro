---
import { i18n } from '@helpers/i18n'
const { lang, t } = i18n(Astro.url)

interface Props {
    eve_time:   Date;
}

const {
    eve_time,
} = Astro.props

import TextGroup from '@components/blocks/TextGroup.astro';
---

<TextGroup
    title={t('local_time')}
    x-data={`{
        time_class: '',
        time_tooltip: false,
        set_time_class() {
            const date = new Date('${eve_time} UTC')
            const hour = date.getHours()

            if (hour >= 0 && hour < 7) {
                this.time_class = 'text-status-point-2'
                this.time_tooltip = '${t('sleeptime')}'
            } else if (hour >= 7 && hour < 8) {
                this.time_class = 'text-status-point-3'
                this.time_tooltip = '${t('sleeptime')}'
            } else if (hour >= 8 && hour < 9) {
                this.time_class = 'text-status-point-4'
                this.time_tooltip = '${t('daytime')}'
            } else if (hour >= 9 && hour < 19) {
                this.time_class = 'text-status-point-5'
                this.time_tooltip = '${t('daytime')}'
            } else if (hour >= 19 && hour < 20) {
                this.time_class = 'text-status-point-6'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 20 && hour < 21) {
                this.time_class = 'text-status-point-7'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 21 && hour < 22) {
                this.time_class = 'text-status-point-8'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 22 && hour < 23) {
                this.time_class = 'text-status-point-9'
                this.time_tooltip = '${t('nighttime')}'
            } else if (hour >= 23) {
                this.time_class = 'text-status-null'
                this.time_tooltip = '${t('sleeptime')}'
            } else {
                this.time_class = 'text-yellow'
                this.time_tooltip = '${t('daytime')}'
            }
        },
        local_time: new Date('${eve_time}').toLocaleDateString(
            '${lang}',
            ${import.meta.env.DATETIME_FORMAT}
        ),
        tippy_options: {
            delay: [ 100, 200 ],
            arrow: true,
        },
        init() {
            this.set_time_class()
        }
    }`}
>
    <span
        class="[ sentence-cap ]"
        x-bind:class="time_class"
        x-text="local_time"
        x-bind:data-tippy-content="time_tooltip"
        x-init="tippy($el, this.tippy_options)"
    >
        <span class="[ loading ]">{t('calculating')}</span>
    </span>
</TextGroup>