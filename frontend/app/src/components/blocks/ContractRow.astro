---
import { i18n } from '@helpers/i18n'
const { lang, t } = i18n(Astro.url)

import type { ContractUI } from '@dtypes/layout_components'

interface Props {
    contract:       ContractUI;
    is_supplier:    boolean;
}

const {
    contract,
    is_supplier,
} = Astro.props

const low_amount = (contract.current_quantity <= (50 * contract.desired_quantity)/100)
const needed = contract.desired_quantity - contract.current_quantity

import { get_item_icon } from '@helpers/eve_image_server'
import { format_date_shortest } from '@helpers/date'

import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';

import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';
import CorporationPicture from '@components/blocks/CorporationPicture.astro';
import ClipboardButton from '@components/blocks/ClipboardButton.astro';
---

<ComponentBlock padding_block='var(--space-2xs)' padding_inline='var(--space-2xs)'>
    <FlexInline justification='space-between' class="[ !flex-nowrap ]">
        <FixedFluid width='32px' class="[ items-center basis-[350px] ]">
            <picture>
                <img loading="lazy" src={get_item_icon(contract.eve_type_id, 32)} width={32} height={32} />
            </picture>
            <span class="[ title ]">{contract.title}</span>
        </FixedFluid>

        <FlexInline class="[ quantity basis-[150px] ]">
            <span><b class:list={{ 'text-red': low_amount }}>{contract.current_quantity}</b>/{contract.desired_quantity}</span>
            <span>{needed !== 0 && <b class:list={{ 'text-red': needed > 0, 'text-green': needed < 0 }}>{needed > 0 ? '-' : '+'}</b>} {Math.abs(needed)}</span>
        </FlexInline>

        {is_supplier &&
            (contract.responsabilities.length > 0 ?
                <FlexInline gap='var(--space-3xs)' class="basis-[180px]">
                    {contract.responsabilities.map(entity =>
                        <div data-tippy-content={entity.entity_name} x-init="tippy($el, tippy_options)">
                            {entity.entity_type === 'character' ?
                                <CharacterPicture
                                    character_id={entity.entity_id}
                                    character_name={entity.entity_name}
                                    size={24}
                                    icon_quality={32}
                                />
                                :
                                <CorporationPicture
                                    corporation_id={entity.entity_id}
                                    corporation_name={entity.entity_name}
                                    size={24}
                                    icon_quality={32}
                                />
                            }
                        </div>
                    )}
                </FlexInline>
                :
                <FlexInline gap='var(--space-3xs)' class="basis-[180px]">
                    <small>{t('no_seeders')}</small>
                </FlexInline>
            )
        }

        <div class="h-[64px] mb-[-7px]">
            <canvas
                x-data={`{
                    init() {
                        const ctx = $el.getContext('2d')

                        const gradient = ctx.createLinearGradient(0, 0, 0, 42)
                        gradient.addColorStop(0, '${low_amount ? 'rgba(255, 110, 110, 0.5)' : 'rgba(110, 233, 255, 0.5)'}')
                        gradient.addColorStop(1, '${low_amount ? 'rgba(255, 110, 110, 0)' : 'rgba(110, 233, 255, 0)'}')

                        Chart.defaults.font.family = 'Montserrat Variable';
                        Chart.defaults.backgroundColor = 'rgba(0, 0, 0, 0)';

                        const myChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: ${JSON.stringify(contract.trend_x_axis.reverse().map(x => format_date_shortest(lang, x)))},
                                datasets: [{
                                    label: "${t('contracts_sold')}",
                                    data: ${JSON.stringify(contract.trend_y_axis.reverse())},
                                    pointStyle: 'rect',
                                    fill: true,
                                    backgroundColor: gradient,
                                    borderColor: '${low_amount ? '#ff6e6e' : '#6ee9ff'}',
                                    borderWidth: 2,
                                    pointRadius: 1,
                                    tension: 0.4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                layout: {
                                    padding: {
                                        left: -10,
                                        bottom: -10
                                    }
                                },
                                plugins: {
                                    legend: {
                                        display: false
                                    },
                                },
                                scales: {
                                    x: {
                                        title: {
                                            display: false
                                        },
                                        grid: {
                                            display: false
                                        },
                                        ticks: {
                                            display: false
                                        },
                                        border: {
                                            display: false
                                        }
                                    },
                                    y: {
                                        title: {
                                            display: false
                                        },
                                        grid: {
                                            display: false
                                        },
                                        ticks: {
                                            display: false
                                        },
                                        border: {
                                            display: false
                                        },
                                    }
                                }
                            },
                        })
                    }
                }`}
            ></canvas>
        </div>
        <slot name="actions">
            {contract.eft_format &&
                <ClipboardButton
                    class="[ action-button ]"
                    text={t('copy_eft')}
                    narrow={true}
                    id={`${contract.fitting_id.toString()}-row-copy`}
                >
                    {contract.eft_format}
                </ClipboardButton>
            }
        </slot>
    </FlexInline>
</ComponentBlock>

<style lang="scss">
    .quantity {
        font-family: var(--heading-font);
        text-transform: uppercase;
        font-size: var(--step-0);
        font-weight: 400;
        color: var(--highlight);
    }
</style>