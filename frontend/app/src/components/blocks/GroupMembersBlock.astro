---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import type { GroupMembersUI, GroupItemType } from '@dtypes/layout_components'

interface Props {
    group:  GroupMembersUI;
    type:   GroupItemType;
    [propName: string]: any;
}

const {
    group,
    type,
    ...attributes
} = Astro.props

import BlockList from '@components/compositions/BlockList.astro';

import GroupItem from '@components/blocks/GroupItem.astro';
import GroupMemberItem from '@components/blocks/GroupMemberItem.astro';
import ComponentBlockHeader from '@components/blocks/ComponentBlockHeader.astro';
---

<div
    {...attributes}
    x-data={`{
        show_group() {
            return ("${group.id}" in groups_filtered) && groups_filtered[${group.id}].length > 0
        },
        get_members_count() {
            if ("${group.id}" in groups_filtered_members_count)
                return groups_filtered_members_count[${group.id}]

            return 0
        }
    }`}
    x-show="show_group()"
>
    <ComponentBlockHeader
        id={group.id.toString()}
    >
        <GroupItem
            slot="header"
            group={{
                id: group.id,
                name: group.name,
                description: group.description,
                image_url: group.image_url,
            }}
            type={type}
        >
            <small
                x-text={'`${get_members_count()} ${get_members_count() != 1 ? `'+t('members').toLowerCase()+'` : `'+t('member').toLowerCase()+'`}`'}
            >
                {group.members.length} {group.members.length != 1 ? t('members').toLowerCase() : t('member').toLowerCase()}
            </small>
        </GroupItem>

        <BlockList
            gap='var(--space-3xs)'
            class="[ min-h-[64px] justify-center ]"
            x-show="expanded"
            x-collapse.duration.100ms
        >
            {group.members.map( (member) => 
                <GroupMemberItem
                    member={member}
                    group={{
                        id: group.id,
                        name: group.name,
                        description: group.description,
                        image_url: group.image_url,
                    }}
                    is_officer={group.officers.includes(member.user_id as number)}
                    group_type={type}
                    x-data={`{
                        show_item() {
                            return ("${group.id}" in groups_filtered) && groups_filtered[${group.id}].includes(${member.character_id})
                        }
                    }`}
                    x-show="show_item()"
                />
            )}
        </BlockList>
    </ComponentBlockHeader>
</div>