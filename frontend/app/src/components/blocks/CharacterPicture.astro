---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { EvEImageServiceSize, ImageSize } from '@dtypes/layout_components'

interface Props {
    character_id:       number;
    character_name?:    string;
    x_character_id?:    string | false;
    x_character_name?:  string | false;
    size?:              ImageSize;
    icon_quality?:      EvEImageServiceSize;
    tooltip?:           string;
    mask?:              boolean;
    inert?:             boolean;
}

const {
    character_id,
    character_name,
    x_character_id = false,
    x_character_name = false,
    size = 64,
    icon_quality = 64,
    tooltip,
    mask = false,
    inert = false,
} = Astro.props

import { get_player_icon } from '@helpers/eve_image_server'
---

<picture
    class={inert ? 'animated' : undefined}
    data-tippy-content={tooltip ? tooltip : undefined}
    x-init={tooltip ? 'tippy($el, tippy_options)' : undefined}
>
    <img
        class:list={{ mask }}
        loading="lazy"
        height={size}
        width={size}
        src={get_player_icon(character_id, icon_quality ?? size)}
        x-bind:src={`${x_character_id} ? get_player_icon(${x_character_id}) : '${get_player_icon(character_id, icon_quality ?? size)}'`}
        alt={`${t('profile_picture_of')} ${character_name ?? t('unknown_character')}`}
        x-bind:alt={`\`${t('profile_picture_of')} \${(${x_character_name} ? ${x_character_name} : "${character_name ?? t('unknown_character')}")}\``}
        x-data={`{
            show_character_modal() {
                if (!${x_character_id} && ${character_id} == 0)
                    return

                show_modal({
                    partial: '${translatePath('/partials/character_modal_component/')}?character_id='+(${x_character_id} ? ${x_character_id} : '${character_id.toString()}'),
                })
            }
        }`}
        x-on:click.stop.prevent={inert ? undefined : 'show_character_modal()'}
    />
</picture>

<style lang="scss">
    img {
        transition: var(--fast-transition);
        filter: brightness(1);
        object-fit: cover;
        width: 100%;
    }

    picture:not(.animated) {
        img {
            cursor: pointer;
            
            &:hover {
                filter: brightness(1.3);
            }
        }
    }

    .mask {
        -webkit-mask-image: linear-gradient(to bottom,rgb(0,0,0) 0%,rgba(0,0,0,.7) 50%,transparent 100%);
        mask-image: linear-gradient(to bottom,rgb(0,0,0) 0%,rgba(0,0,0,.7) 50%,transparent 100%);
    }
</style>