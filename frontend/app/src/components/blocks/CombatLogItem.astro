---
import { i18n } from '@helpers/i18n'
const { t, lang, translatePath } = i18n(Astro.url)

import type { SavedCombatLog, Fitting } from '@dtypes/api.minmatar.org'

interface Props {
    log:        SavedCombatLog;
    fitting?:   Fitting | undefined;
}

const {
    log,
    fitting,
} = Astro.props

const COMBATLOG_LIST_PARTIAL_URL = translatePath('/partials/combatlog_list_component/')

import { format_date_time } from '@helpers/date'

import Flexblock from "@components/compositions/Flexblock.astro";
import FlexInline from "@components/compositions/FlexInline.astro";

import PictureCard from '@components/blocks/PictureCard.astro';
import ClipboardButton from "@components/blocks/ClipboardButton.astro";
import Button from "@components/blocks/Button.astro";

import FleetEvEIcon from '@components/icons/FleetEvEIcon.astro';
import FitsEvEIcon from '@components/icons/FitsEvEIcon.astro';
import MemberEVEIcon from '@components/icons/MemberEVEIcon.astro';
import TrashIcon from '@components/icons/buttons/TrashIcon.astro';
---

<PictureCard src="/images/combatlog-card.jpg">
    {log.fleet_id > 0 ?
        <div class="[ icon ]" slot="header"><FleetEvEIcon /></div> :
        log.fitting_id > 0 ?
        <div class="[ icon ]" slot="header"><FitsEvEIcon /></div> :
        <div class="[ icon ]" slot="header"><MemberEVEIcon /></div>
    }

    <FlexInline slot="actions" gap='var(--space-2xs)'>
        <ClipboardButton
            text={t('share')}
            narrow={true}
            id={log.id.toString()}
        >
            {translatePath(`${Astro.url}/${log.id}`)}
        </ClipboardButton>

        <Button
            size='sm'
            type="button"
            narrow={true}
            x-data={`{
                show_remove_log_dialog() {
                    show_confirm_dialog({
                        title: '${t('remove_log_dialog_title')}',
                        content: '${t('remove_log_dialog_text')}',
                        hx: {
                            method: 'delete',
                            url: '${COMBATLOG_LIST_PARTIAL_URL}?id=${log.id}',
                            target: '#combatlog',
                            swap: 'outerHTML transition:true'
                        }
                    })
                }
            }`}
            x-on:click.stop.prevent="show_remove_log_dialog()"
        >
            <TrashIcon slot="icon" />
        </Button>
    </FlexInline>

    <Flexblock gap='var(--space-3xs)'>
        {log.fleet_id > 0 ?
            <h4>{t('fleet')} {log.fleet_id}</h4> :
        log.fitting_id > 0 ?
            <h4>{fitting?.name ?? t('unknown_fitting_name')}</h4> :
            <h4>{log.character_name}</h4>
        }
        <small>{format_date_time(lang, log.uploaded_at)}</small>
    </Flexblock>
</PictureCard>

<style lang="scss">
    .icon {
        margin-top: -13px;
        margin-left: -15px;
    }

    small {
        color:  var(--fleet-yellow);
    }
</style>