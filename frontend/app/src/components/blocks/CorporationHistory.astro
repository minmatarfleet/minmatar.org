---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { marked } from 'marked';

import { get_corporation_history } from '@helpers/api.eveonline/characters'
import type { CorporationHistoryItem } from '@dtypes/layout_components'
import type { CorporationHistoryEvE } from '@dtypes/api.eveonline'
import { prod_error_messages } from '@helpers/env'
import { from_to_text, from_to_now_text } from '@helpers/date'
import type { NamesAndCategoriesEvE } from '@dtypes/api.eveonline'
import { get_names_and_categories_by_ids } from '@helpers/api.eveonline/universe'
let names_and_categories:NamesAndCategoriesEvE[]

interface Props {
    character_id?:          number;
    corporation_history?:   CorporationHistoryEvE[];
}

const {
    character_id,
    corporation_history,
} = Astro.props

let corporation_history_eve:CorporationHistoryEvE[]
let get_eve_corporation_history_error
let history_items:CorporationHistoryItem[] | null = null
const names_by_id = {}

if (!corporation_history && character_id) {
    try {
        corporation_history_eve = await get_corporation_history(character_id)

        const history:CorporationHistoryEvE[] = corporation_history ?? (corporation_history_eve ?? [])

        const unique_corporation_ids:number[] = []
        history.forEach( (i) => {
            if (!unique_corporation_ids.includes(i.corporation_id))
                unique_corporation_ids.push(i.corporation_id)
        })

        history_items = history.map( (i, index) => {
            const prev = (index > 0 ? history[index - 1] : null)
            
            const membership_time_text = (prev ?
                from_to_text(lang, i.start_date, prev.start_date)
                :
                from_to_now_text(lang, i.start_date)
            )

            return {
                corporation_id: i.corporation_id,
                membership_time_text: membership_time_text
            }
        })

        names_and_categories = await get_names_and_categories_by_ids(unique_corporation_ids);

        names_and_categories.forEach( (i) => names_by_id[i.id] = i.name )
    } catch (error) {
        get_eve_corporation_history_error = (prod_error_messages() ? t('get_eve_corporation_history_error') : error.message)
    }
}

const CORPORATION_HISTORY_PARTIAL_URL = translatePath('/partials/corporation_history_component/')

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import Flexblock from '@components/compositions/Flexblock.astro';
import DebugTag from '@components/blocks/DebugTag.astro';
import CorporationBadge from '@components/blocks/CorporationBadge.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import SectionH4 from '@components/blocks/SectionH4.astro';
---
<SectionH4
    heading_text={t('corporation_history')}
    id="corporation-history"
>
    {!corporation_history && !character_id && 
        <DebugTag set:html={marked.parse(t('corporation_history_params_error'))} />
    }
    {get_eve_corporation_history_error ?
        <ErrorRefetch
            args={{
                partial: `${CORPORATION_HISTORY_PARTIAL_URL}?character_id=${character_id}`,
                message: get_eve_corporation_history_error,
                delay: delay,
                target: '#corporation-history',
            }}
        />
        :
        <Flexblock gap='var(--space-3xs)' class="[ w-full overflow-y-auto max-h-[380px] ]">
            {history_items?.map( (i) => 
                <CorporationBadge
                    corporation={{
                        id: i.corporation_id,
                        name: names_by_id[i.corporation_id] ?? t('unknown_corporation'),
                        size: 'lg',
                        description: i.membership_time_text
                    }}
                />
            )}
        </Flexblock>
    }
</SectionH4>