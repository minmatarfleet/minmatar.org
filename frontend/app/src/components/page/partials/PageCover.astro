---
interface Props {
    image: string;
    image_990: string;
    video?: string;
    video_thumb?: string;
    alt?: string;
    animated?: boolean; // deprecated
    scrollable?: boolean;
    overlay?: boolean;
    [propName: string]: any;
}

const {
    image,
    image_990,
    video,
    video_thumb,
    alt = '',
    animated = true, // deprecated
    scrollable = false,
    overlay = false,
} = Astro.props

const optional_attributes = {
    ...(alt && { "alt": alt }),
}
---

<div
    class:list={['wrapper', { scrollable: scrollable }, { overlay: overlay }, Astro.props.class]}
    class="[ viewport-cover ]"
>
    {!video ?
        <picture
            class="[ !hidden animate-fade-in ]"
            x-data="{ loaded: false }"
            x-init="loaded = $refs.img.complete"
            x-bind:class="{ '!hidden': !loaded }"
        >
            <source srcset={image_990} media="(max-width: 990px)">
            <img
                src={image}
                role={!alt ? 'presentation' : undefined}
                x-ref="img"
                x-on:load="loaded = true"
                {...optional_attributes}
            />
        </picture>
        :
        <video
            class="[ animate-fade-in ]"
            width="1920"
            height="1080"
            poster={video_thumb}
            autoplay
            loop
        >
            <source src={video} type="video/webm">
        </video>
    }
</div>

<style lang="scss" is:global>
    .viewport-cover {
        position: fixed;
        inset: 0;
        overflow: visible;

        &.scrollable {
            position: absolute;
            transform: translateY(0);

            @media only screen and (min-device-width: 1366px) {
                animation: parallax linear;
                animation-timeline: view();
                animation-range: -45% 145%;
            }
        }

        &.overlay:after {
            content: ' ';
            inset: 0;
            height: 101vh;
            position: absolute;
            background-image: linear-gradient(
                to bottom,
                hsla(0, 0%, 7%, 0) 0%,
                hsla(0, 0%, 7%, 0.187) 9.8%,
                hsla(0, 0%, 7%, 0.349) 19.6%,
                hsla(0, 0%, 7%, 0.488) 29.2%,
                hsla(0, 0%, 7%, 0.606) 38.6%,
                hsla(0, 0%, 7%, 0.704) 47.7%,
                hsla(0, 0%, 7%, 0.784) 56.4%,
                hsla(0, 0%, 7%, 0.848) 64.5%,
                hsla(0, 0%, 7%, 0.898) 72.1%,
                hsla(0, 0%, 7%, 0.936) 78.9%,
                hsla(0, 0%, 7%, 0.963) 85%,
                hsla(0, 0%, 7%, 0.981) 90.1%,
                hsla(0, 0%, 7%, 0.992) 94.3%,
                hsla(0, 0%, 7%, 0.998) 97.4%,
                hsl(0, 0%, 7%) 99.3%,
                hsl(0, 0%, 7%) 100%
            );
        }

        video,
        img {
            position: absolute;
            top: 0;
            right: 0;
            display: block;
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: top left;
            image-rendering: pixelated;
        }
    }
    
    @keyframes parallax {
        from { transform: translateY(-1000px) }
        to { transform: translateY(1000px) }
    }
</style>