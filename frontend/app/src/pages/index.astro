---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)


import type { StagingType } from '@dtypes/layout_components'
import type { PostListUI } from '@dtypes/layout_components'
import { fetch_posts } from '@helpers/fetching/posts'
import { get_market_locations } from '@helpers/api.minmatar.org/market'

let contracts_service_staging:string[] = []
let posts:PostListUI[] = []
const PAGE_LENGTH = 3
let post_fetching_error:string | false = false

try {
    const market_locations = await get_market_locations()
	contracts_service_staging = market_locations.map(contracts_trade_hub => contracts_trade_hub.name)

    const paginated_posts = await fetch_posts({
        page_num: 1,
        page_size: PAGE_LENGTH,
        status: 'published',
    })

    posts = paginated_posts.chunk
} catch (error) {
    post_fetching_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}
import { query_string } from '@helpers/string';

import Viewport from '@layouts/Viewport.astro';

import PageLanding from '@components/page/PageLanding.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FluidFixed from '@components/compositions/FluidFixed.astro';

import StationAssets from '@components/blocks/StationAssets.astro';
import WatermellonInfo from '@components/blocks/WatermellonInfo.astro';
import AugaInfo from '@components/blocks/AugaInfo.astro';
import YishinoonInfo from '@components/blocks/YishinoonInfo.astro';
import NakahInfo from '@components/blocks/NakahInfo.astro';
import VardInfo from '@components/blocks/VardInfo.astro';
import Input from '@components/blocks/Input.astro';
import HomeCorporations from '@components/blocks/HomeCorporations.astro';
import FleetFeed from '@components/blocks/FleetFeed.astro';
import MediaFeed from '@components/blocks/MediaFeed.astro';
import WikiSmall from '@components/blocks/WikiSmall.astro';
import RatBibbleWidget from '@components/blocks/RatBibbleWidget.astro';
import DiscordSmall from '@components/blocks/DiscordSmall.astro';
import RedditSmall from '@components/blocks/RedditSmall.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import StylessButton from '@components/blocks/StylessButton.astro';
import MetaGuideWidget from '@components/blocks/MetaGuideWidget.astro';
import NewsFed from '@components/blocks/NewsFed.astro';

import FleetLogo from '@components/icons/FleetLogo.astro';
import MapEvEIcon from '@components/icons/MapEvEIcon.astro';
import ContractsServiceEvEIcon from '@components/icons/ContractsServiceEvEIcon.astro';

import {
	WatermellonXData,
	WatermellonCameraXData,
	AugaMilitiaHQCameraXData,
	AugaMilitiaHQXData,
	SpaceInvadersCameraXData,
	SpaceInvadersXData,
	BananaCameraXData,
	BananaXData,
	RunForrestCameraXData,
	RunForrestXData,
} from '@components/partials/HomepageRenders.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro'

type StagingTranslation = {
	[key in StagingType]: string;
}

const STAGINGS_STATIONS:StagingTranslation = {
	auga: 'Auga - Minmatar Militia HQ',
	yishinoon: 'Yishinoon - Space Invaders',
	nakah: 'Nakah - Banana',
	vard: 'Vard - DONG OF WAR',
	watermellon: 'Sosala - WATERMELLON',
}

const STAGINGS_SYSTEMS:StagingTranslation = {
	auga: 'Auga',
	yishinoon: 'Yishinoon',
	nakah: 'Nakah',
	vard: 'Vard',
	watermellon: 'Sosala',
}

const RATTINI_TRIBE_ID = 98726134
const BLACK_OMEGA_SECUTIRY_ID = 263585335
const BALLS_DEEP_ID = 98252708

const staging = Astro.cookies.has('staging') ? Astro.cookies.get('staging')?.value as StagingType : 'watermellon'

const page_title = t('index.page_title');
const page_description = t('index.leading_text');
---

<Viewport title={page_title} meta_description={page_description}>
    <PageLanding
        cover={{
            image: staging === 'auga' ? '/images/home-auga-cover.jpg' :
					staging === 'yishinoon' ? '/images/home-yishinoon-cover.jpg' :
					staging === 'nakah' ? '/images/home-nakah-cover.jpg' :
					staging === 'vard' ? '/images/home-vard-cover.jpg' :
					'/images/home-cover.jpg',
            image_990: staging === 'auga' ? '/images/home-auga-cover.jpg' :
					   staging === 'yishinoon' ? '/images/home-yishinoon-cover.jpg' :
					   staging === 'nakah' ? '/images/home-nakah-cover.jpg' :
					   staging === 'vard' ? '/images/home-vard-cover.jpg' :
					   '/images/home-cover.jpg',
            alt: t('index.cover_alt'),
            animated: false,
        }}
        fullscreen={true}
        wide={true}
		x-data={`{
			show_fleet_feeds: true,
            ${staging === 'auga' ? AugaMilitiaHQCameraXData :
				staging === 'yishinoon' ? SpaceInvadersCameraXData :
				staging === 'nakah' ? BananaCameraXData :
				staging === 'vard' ? RunForrestCameraXData :
				WatermellonCameraXData
			}
        }`}
        x-effect="update"
    >
        <canvas
            slot="cover"
            id="mainCanvas"
            width="500"
            height="500"
			x-on:scroll.stop
			x-on:mousewheel.stop
            x-data={`{
				${staging === 'auga' ? AugaMilitiaHQXData :
					staging === 'yishinoon' ? SpaceInvadersXData :
					staging === 'nakah' ? BananaXData :
					staging === 'vard' ? RunForrestXData :
					WatermellonXData
				}
            }`}
			x-on:resize.window.throttle="resizeCanvasToDisplaySize(resize_canvas, ccpwgl_context)"
            x-init="$nextTick(() => init_ccpwgl())"
        />

		<Flexblock 
			class="[ station-info ][ !hidden xl:!block ]"
			gap='0'
		>
			{staging === 'auga' ? <AugaInfo /> :
				staging === 'yishinoon' ? <YishinoonInfo /> :
				staging === 'nakah' ? <NakahInfo /> :
				staging === 'vard' ? <VardInfo /> :
				<WatermellonInfo />
			}
			<FlexInline gap='var(--space-3xs)'>
				{user &&
					<StationAssets
						corporation={
							staging === 'auga' ? {
								id: RATTINI_TRIBE_ID,
								name: 'Rattini Tribe',
							} : staging === 'yishinoon' ? {
								id: RATTINI_TRIBE_ID,
								name: 'Rattini Tribe',
							} : staging === 'nakah' ? {
								id: BALLS_DEEP_ID,
								name: 'Balls Deep Inc.',
							} : staging === 'vard' ? {
								id: BALLS_DEEP_ID,
								name: 'Balls Deep Inc.',
							}: {
								id: BLACK_OMEGA_SECUTIRY_ID,
								name: 'Black Omega Security'
							}
						}
						station={STAGINGS_STATIONS[staging] ?? 'Sosala - WATERMELLON'}
					/>
				}
				{contracts_service_staging.find(contract_staging => contract_staging === STAGINGS_STATIONS[staging]) &&
					<a
						class="[ w-[32px] neocom-button ]"
						data-tippy-content={t('view_station_market_contracts')}
						href={translatePath(`/market/contracts?${query_string({staging: STAGINGS_STATIONS[staging]})}`)}
					>
						<ContractsServiceEvEIcon />
					</a>
				}
				<a
					class="[ w-[32px] neocom-button ]"
					data-tippy-content={t('view_on_dotlan')}
					href={`https://evemaps.dotlan.net/system/${STAGINGS_SYSTEMS[staging] ?? 'Sosala'}`}
					target="_blank"
					rel="nofollow noopener noreferrer"
				>
					<MapEvEIcon />
				</a>
			</FlexInline>
		</Flexblock>

		<VerticalCenter
			class="[ content-section ][ min-h-[100vh] max-w-[48rem] ]"
		>
			<Wrapper
				max_width='48rem'
				padding_inline='0'
				padding_block="var(--space-l)"
			>
				<Flexblock
					gap='var(--space-m)'
					class="[ text-center ]"
				>
					<h1 class="[ flex justify-center ]"><FleetLogo width='256' height='256' /></h1>
					
					<h2 class="[ welcome-heading ]">{t('index.title')}</h2>

					<p>{t('index.leading_text')}</p>

					<FlexInline justification='center'>
						<StylessButton href='#widgets' class="[ caret-down ]" />
					</FlexInline>

					{user_is_superadmin &&
						<Flexblock class="[ camera-controls !hidden ]">
							<Flexblock gap='0'>
								<label for="doctrine">{t('rotation_x')}</label>
								<Input type="number" x-model="rotation_x" step="0.01" />
							</Flexblock>
							<Flexblock gap='0'>
								<label for="doctrine">{t('rotation_y')}</label>
								<Input type="number" x-model="rotation_y" step="0.01" />
							</Flexblock>
						</Flexblock>
					}
				</Flexblock>
			</Wrapper>
		</VerticalCenter>

		<Wrapper
			max_width='90rem'
			padding_inline='0'
			padding_block="0"
			class="[ content-section mt-2 ]"
		>

			<Flexblock
				id="widgets"
				gap='var(--space-3xs)'
				class="[ w-full ]"
				x-intersect:enter="show_fleet_feeds = false"
				x-intersect:leave="show_fleet_feeds = true"
			>
				<FluidFixed
					width='656px'
					gap='var(--space-3xs)'
					breakpoint='49%'
				>
					<Wrapper
						padding_block='0'
						padding_inline='0'
						class="[ relative ]"
						max_width='656px'
					>
						<Flexblock gap='var(--space-3xs)'>
							<HomeCorporations />
							<WikiSmall						
								padding_block='0'
								padding_inline='var(--space-s)'
								class="[ basis-[50%] shrink ]"
							/>
						</Flexblock>
					</Wrapper>

					<Wrapper
						padding_block='0'
						padding_inline='0'
						max_width='656px'
						class="[ relative z-10 ]"
					>
						<MediaFeed />
					</Wrapper>
				</FluidFixed>

				<FluidFixed
					width='656px'
					gap='var(--space-3xs)'
					breakpoint='49%'
					class="[ !items-start ]"
				>
					<MetaGuideWidget />
					<Flexblock gap='var(--space-3xs)'>
						{posts?.length > 0 &&
							<ComponentBlock max_width='656px' padding_inline='var(--space-s)'>
								<NewsFed posts={posts} />
							</ComponentBlock>
						}
						<RatBibbleWidget						
							padding_block='0'
							padding_inline='var(--space-s)'
							class="[ basis-[50%] shrink ]"
						/>
					</Flexblock>
				</FluidFixed>
			</Flexblock>

			<Wrapper
				padding_inline="0"
				padding_block="var(--space-3xl)"
				max_width='100%'
				centered={true}
			>
				<Flexblock>
					<FlexInline
						gap='var(--space-l)'
						justification='center'
					>
						<RedditSmall						
							padding_block='0'
							padding_inline='var(--space-s)'
						/>
						<DiscordSmall						
							padding_block='0'
							padding_inline='var(--space-s)'
						/>
					</FlexInline>

					<Wrapper
						padding_inline="0"
						padding_block="0"
						max_width='40rem'
						centered={true}
					>
						<p class="[ ccp-disclaimer ][ text-center ]">{t('ccp_disclaimer')}</p>
					</Wrapper>
				</Flexblock>
			</Wrapper>
		</Wrapper>

		{user &&
			<FleetFeed />
		}
    </PageLanding>
</Viewport>

<script>
	let skew = 1
	let tick = 0

	function randomInRange(min, max) {
		return Math.random() * (max - min) + min
	}

	(function frame() {
		skew = 0.8
		tick += 1

		const DEFAULTS = {
			particleCount: 1,
			startVelocity: 0,
			origin: {
				x: Math.random(),
				y: Math.random() * skew - 0.2,
			},
			colors: ["#ffffff"],
			shapes: ["image"],
			shapeOptions: {
				image: {
					src: "/images/snowflake.svg",
					replaceColor: true,
					width: 21,
					height: 24,
				},
			},
			gravity: randomInRange(0.4, 0.6),
			scalar: randomInRange(0.4, 1),
			drift: randomInRange(-0.4, 0.4),
		}

		tick % 100 === 0 && confetti({
			...DEFAULTS,
			scalar: randomInRange(2, 4),
			ticks: 200,
		})

		tick % 30 === 0 && confetti({
			...DEFAULTS,
			scalar: randomInRange(1, 1.5),
			ticks: 200,
		})

		confetti({
			...DEFAULTS,
			scalar: randomInRange(0.3, 0.6),
			ticks: 200,
		})

		if (document.querySelector('.ccp-disclaimer')) requestAnimationFrame(frame)
	})();
</script>

<style lang="scss">
	.station-info {
		position: fixed;
		top: var(--space-l);
		right: var(--space-xl);
		z-index: 2;
	}

	.ccp-disclaimer {
		font-size: var(--step--2);
	}

	.camera-controls {
		position: fixed;
		top: 60px;
		left: 100px;
		width: 250px;
	}

	.welcome-heading {
		font-size: var(--step-5);
	}

    .left-panel {
        position: absolute;
    }

	.content-section {
		position: relative;
		z-index: 1;
		align-items: center;
	}

	.caret-down {
		transform: rotate(90deg);

		&:before {
			content: 'next';
			color: var(--highlight);
			font-family: swiper-icons;
			font-size: var(--swiper-navigation-size);
			text-transform: none !important;
			letter-spacing: 0;
			font-variant: initial;
			line-height: 1;
		}
	}
</style>

<style is:global>

    #mainCanvas {
        border: none;
        position:fixed;
        width:100%;
        height:100%;
		/*z-index: -1;*/
    }

</style>