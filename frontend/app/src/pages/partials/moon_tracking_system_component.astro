---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!is_superuser && !user_permissions.includes('moons.view_evemoon'))
    return HTTP_404_Not_Found()

let system_name = Astro.params.system_name

import { get_system_moons_data } from '@helpers/pages/system_moons'
import type { SystemMoonsData } from '@helpers/pages/system_moons'

let system_moons_data:SystemMoonsData = {}
let data_fetching_error

try {
    system_moons_data = await get_system_moons_data(auth_token as string, system_name, lang)
} catch (error) {
    data_fetching_error = error
}

const {
    sun_type_id,
    total_scanned = 0,
    moons = [],
    planet_moons = [],
} = system_moons_data

const MOON_TRACKING_SYSTEM_PARTIAL_URL = `${translatePath('/partials/moon_tracking_system_component')}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import { get_item_icon } from '@helpers/eve_image_server'

import Flexblock from '@components/compositions/Flexblock.astro';
import Grid from '@components/compositions/Grid.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import Square from '@components/blocks/Square.astro';
import Badge from '@components/blocks/Badge.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{data_fetching_error ?
    <ErrorRefetch
        args={{
            partial: MOON_TRACKING_SYSTEM_PARTIAL_URL,
            message: data_fetching_error,
            delay: delay,
        }}
    />
    :
    <div x-init={`total_scanned = ${total_scanned}; $el.remove()`} />
    <Flexblock gap='var(--space-2xl)'>
        {planet_moons.map(planet => {
            const progress = planet?.moons ? planet.scanned / planet.moons.length * 100 : 0
            return (
                planet?.moons.length > 0 &&
                <Flexblock gap='var(--space-l)'>
                    <Flexblock gap='0'>
                        <Badge
                            title={planet.name}
                            image={get_item_icon(planet.type_id)}
                            subtitle={`${progress.toFixed(0)}% ${t('completed').toLowerCase()}`}
                            title_el='h2'
                        />
                    </Flexblock>

                    <Grid class="[ w-full grid-fill ]" row_gap="var(--space-3xs)" column_gap="var(--space-3xs)" min_item_width="250px">
                        {planet.moons.map(moon =>
                            <ComponentBlock padding_block='var(--space-s)' padding_inline='var(--space-m)'>
                                <Flexblock gap='0' class="[ w-full ]">
                                    <span class="[ text-[var(--highlight)] ]">{moon.name}</span>
                                    {moon.scanned ?
                                        moon.monthly_revenue >= 0 ?
                                            <small data-tippy-content={number_name(moon.monthly_revenue, lang)}>
                                                <FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'><Square color='green' /> {moon.monthly_revenue.toLocaleString()} ISK</FlexInline>
                                            </small> :
                                            <small><FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'><Square color='green' /> {t('scanned')}</FlexInline></small>
                                        :
                                        <small><FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'><Square color='fleet-red' /> {t('no_data')}</FlexInline></small>
                                    }
                                </Flexblock>
                            </ComponentBlock>
                        )}
                    </Grid>
                </Flexblock>
            )
        })}
    </Flexblock>
}