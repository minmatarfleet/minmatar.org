---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

import { prod_error_messages } from '@helpers/env'
import { b64_to_Uint8Array } from '@helpers/string'

import { fetch_combatlog_analysis } from '@helpers/fetching/combatlog'
import type { CombatLogAnalysis } from '@dtypes/layout_components'

let combat_log_analysis:CombatLogAnalysis  | null = null
let combatlog_analysis_error:string  | null = null

if (Astro.request.method === "POST") {
    try {
        const form_data = await Astro.request.formData()
        const fleet_id = parseInt(form_data.get("fleet")?.valueOf() as string ?? '-1')
        const fitting_id = parseInt(form_data.get("fitting")?.valueOf() as string ?? '-1')
        const store = (form_data.get('store')?.valueOf() === 'on')
        const base64_gziped_combatlog = form_data.get("gziped_combatlog")?.valueOf()
        const gziped_combatlog = b64_to_Uint8Array(base64_gziped_combatlog as string)

        combat_log_analysis = auth_token && store ?
            await fetch_combatlog_analysis(gziped_combatlog, true, {
                access_token: auth_token,
                fitting_id: fitting_id,
                fleet_id: fleet_id
            }) :
            await fetch_combatlog_analysis(gziped_combatlog, true)
    } catch (error) {
        combatlog_analysis_error = prod_error_messages() ? t('combatlog_analysis_error') : error.message
    }
}

import CombatLogAnalysisComponent from '@components/blocks/CombatLogAnalysisComponent.astro'
---

{combatlog_analysis_error ?
    <p set:html={combatlog_analysis_error} />
    :
    <CombatLogAnalysisComponent combat_log_analysis={combat_log_analysis as CombatLogAnalysis} />
}