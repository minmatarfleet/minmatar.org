---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

if (!user)
    return HTTP_403_Forbidden()

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

import { fetch_fleet_srps } from '@helpers/fetching/srp'
import { create_fleet_srp, update_fleet_srp } from '@helpers/api.minmatar.org/srp'
import type { SRPStatus, EveCharacterProfile } from '@dtypes/api.minmatar.org'
import { srp_status } from '@dtypes/api.minmatar.org'
import type { SRPUI, Alert, FleetUI } from '@dtypes/layout_components'
import { fetch_fleet_by_id } from '@helpers/fetching/fleets'
import { get_user_character } from '@helpers/fetching/characters'
import { is_valid_http_url } from '@helpers/string';

const fleet_id = parseInt(Astro.url.searchParams.get('fleet_id') ?? '0')
const remove_table = JSON.parse(Astro.url.searchParams.get('remove_table') ?? 'false')

let data_fetching_error:string | false = false
let update_fleet_srp_error:string | false = false
let fleet_srps:SRPUI[] | null = []
let alert:Alert | false = false
let user_character:EveCharacterProfile | null = null
let fleet:FleetUI | false = false

if (Astro.request.method === "POST") {
    let submit_srp_error:string | false = false

    try {
        const data = await Astro.request.formData()
        const external_killmail_link = data.get('external_killmail_link' as string) as string
        const is_corp_ship = data.get('is_corp_ship' as string) === 'on'

        if (!is_valid_http_url(external_killmail_link))
            throw new Error(t('invalid_srp_url'))

        await create_fleet_srp(auth_token as string, fleet_id, external_killmail_link, is_corp_ship)
    } catch (error) {
        submit_srp_error = (prod_error_messages() ? t('submit_srp_error') : error.message)

        alert = {
            title: t('srp_submit_dialog_title'),
            content: submit_srp_error as string,
        }
    }
}

if (Astro.request.method === "PATCH") {
    const reimbursement_id = parseInt(Astro.url.searchParams.get('reimbursement_id') ?? '0')
    const status = Astro.url.searchParams.get('status') as SRPStatus

    try {
        if (!(reimbursement_id > 0))
            throw new Error(t('invalid_reimbursement_id'))

        if (!srp_status.includes(status))
            throw new Error(t('invalid_reimbursement_status'))

        await update_fleet_srp(auth_token as string, status, reimbursement_id)
    } catch (error) {
        const TRANSLATE_ACTION = {
            'approved': t('approving'),
            'rejected': t('rejecting'),
        }

        update_fleet_srp_error = prod_error_messages() ? t('update_fleet_srp_error').replace('ACTION', TRANSLATE_ACTION[status]) : error.message

        alert = {
            title: t('process_srp_dialog_title'),
            content: update_fleet_srp_error as string,
        }
    }
}

let is_fleet_commander:boolean = false

try {
    if (!(fleet_id > 0))
        throw new Error(t('invalid_fleet_id'))

    fleet_srps = await fetch_fleet_srps(auth_token as string, fleet_id)
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
    user_character = await get_user_character(user.user_id)
    is_fleet_commander = (user_character?.character_id === fleet.fleet_commander_id)
} catch (error) {
    data_fetching_error = error.message
}

const can_remove_fleet = is_superuser ||
                        user_permissions.includes('fleets.delete_evefleet') ||
                        is_fleet_commander

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

const SRP_TABLE_PARTIAL_URL = `${translatePath('/partials/srp_table_component')}?fleet_id=${fleet_id}&remove_table=${JSON.stringify(remove_table)}`

import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import SRPTable from '@components/blocks/SRPTable.astro';
import ShowAlert from '@components/blocks/ShowAlert.astro';
---

{alert && <ShowAlert alert={alert} /> }
<div x-init="typeof update_srp_count === 'function' && update_srp_count(); $el.remove()" class="[ hidden ]" />

{data_fetching_error ?
    <ErrorRefetch
        args={{
            partial: SRP_TABLE_PARTIAL_URL,
            message: data_fetching_error,
            delay: delay,
        }}
    />
    :
    fleet_srps.length > 0 ?
        <SRPTable fleet_id={fleet_id} fleet_srps={fleet_srps as SRPUI[]} readonly={!can_remove_fleet} /> :
        !remove_table &&
        <SRPTable fleet_id={fleet_id} fleet_srps={fleet_srps as SRPUI[]} readonly={!can_remove_fleet} />
}