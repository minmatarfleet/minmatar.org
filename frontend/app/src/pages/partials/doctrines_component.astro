---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { prod_error_messages } from '@helpers/env'

import type { DoctrineType } from '@dtypes/layout_components'
import { fetch_doctrines } from '@helpers/fetching/doctrines'

let doctrines:DoctrineType[] = []
let fetch_doctrines_error:string | false = false

try {
    doctrines = await fetch_doctrines()
} catch (error) {
    fetch_doctrines_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}

const DOCTRINES_PARTIAL_URL = translatePath(`/partials/doctrines_component`)

const delay = parseInt(Astro.url.searchParams.get('delay'))

import Flexblock from '@components/compositions/Flexblock.astro';

import DoctrineItem from '@components/blocks/DoctrineItem.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{fetch_doctrines_error ?
    <ErrorRefetch
        args={{
            partial: DOCTRINES_PARTIAL_URL,
            message: fetch_doctrines_error,
            delay: delay,
        }}
    />
    :
    <Flexblock
        role="list"
        gap='var(--space-3xs)'
        x-data={`{
            init() {
                show_all = true
                doctrines_count = ${doctrines.length}
            }
        }`}
    >
        {doctrines.map((doctrine) =>
            <ComponentBlock x-show={`(${doctrine.sigs.length > 0}) ? show_all : true`}>
                <DoctrineItem role="listitem" doctrine={doctrine} />
            </ComponentBlock>
        )}
    </Flexblock>
}