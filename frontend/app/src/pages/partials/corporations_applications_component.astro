---
import { i18n } from '@helpers/i18n'
const { lang, translatePath } = i18n(Astro.url)

import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : null
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('applications.change_evecorporationapplication')

if (!can_view_page)
    return HTTP_404_Not_Found()

import { get_applications_data } from '@helpers/pages/applications'
import type { ApplicationsData } from '@helpers/pages/applications'

let applications_data:ApplicationsData = {}
let data_fetching_error
const records = JSON.parse(Astro.url.searchParams.get('records') ?? 'false') as boolean

try {
    applications_data = await get_applications_data(auth_token as string, lang, records)
} catch (error) {
    data_fetching_error = error.message
}

const {
    corporations_applications = [],
    corporations_unfiltered = [],
    corporations_applications_count = [],
    total_applications = 0,
    corporations_options = [],
} = applications_data

const CORPORATIONS_APPLICATIONS_PARTIAL_URL = `${translatePath('/partials/corporations_applications_component')}?records=${JSON.stringify(records)}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import CorporationApplicationsList from '@components/blocks/CorporationApplicationsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{data_fetching_error ?
    <ErrorRefetch
        args={{
            partial: CORPORATIONS_APPLICATIONS_PARTIAL_URL,
            message: data_fetching_error,
            delay: delay,
        }}
    />
    :
    <CorporationApplicationsList
        corporations={corporations_applications}
        x-data={`{
            init() {
                corporations_applications = ${JSON.stringify(corporations_applications)}
                corporations_unfiltered = ${JSON.stringify(corporations_unfiltered)}
                corporations_filtered = ${JSON.stringify(corporations_unfiltered)}
                corporations_filtered_applications_count = ${JSON.stringify(corporations_applications_count)}
                total_applications_filtered = ${total_applications}
                total_applications_unfiltered = ${total_applications}
                corporations_options = ${JSON.stringify(corporations_options)}
            }
        }`}
    />
}