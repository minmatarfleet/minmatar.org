---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const user_id = !user ? false : user.user_id

import type { GroupItemUI, GroupItemType } from '@dtypes/layout_components'
import { get_groups_auth, get_groups } from '@helpers/fetching/groups'

const groups_type = Astro.url.searchParams.get('groups_type') as GroupItemType

let groups:GroupItemUI[] = []
let get_groups_error:string
try {
    if (auth_token && user_id)
        groups = await get_groups_auth(auth_token, user_id, groups_type)
    else
        groups = await get_groups(groups_type)
} catch (error) {
    get_groups_error = prod_error_messages() ? t('get_groups_error') : error.message
}

const GROUPS_LIST_PARTIAL_URL = translatePath('/partials/groups_list_component/')

const delay = parseInt(Astro.url.searchParams.get('delay'))

import GroupsList from '@components/blocks/GroupsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_groups_error ?
    <ErrorRefetch
        args={{
            partial: `${GROUPS_LIST_PARTIAL_URL}?groups_type=${groups_type}`,
            message: get_groups_error,
            delay: delay,
        }}
    />
    :
    <GroupsList
        groups={groups} 
        groups_type={groups_type}
    />
}