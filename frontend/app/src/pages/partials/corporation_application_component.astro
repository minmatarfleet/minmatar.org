---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('applications.change_evecorporationapplication')

import type { CharacterBasic, CorporationBasic } from '@dtypes/layout_components'
const corporation = JSON.parse(Astro.url.searchParams.get('corporation')) as CorporationBasic

const corporation_id = corporation?.id ?? 0
const application_id = parseInt(Astro.url.searchParams.get('application_id') ?? '0')

const valid_request = (corporation_id > 0 && application_id > 0)

if (!can_view_page || !valid_request)
    return HTTP_404_Not_Found()

import type { ApplicationDetail, Alert } from '@dtypes/layout_components'
import { get_application_by_id } from '@helpers/fetching/applications'
import { accept_corporation_applications, reject_corporation_applications } from '@helpers/api.minmatar.org/applications'

let application:ApplicationDetail
let get_corporation_application_error:string | false = false

try {
    application = await get_application_by_id(auth_token as string, corporation_id, application_id)
} catch (error) {
    get_corporation_application_error = prod_error_messages() ? t('get_corporation_application_error') : error.message
}

let application_action_error
let action
let alert:Alert

if (Astro.request.method === "POST") {
    action = Astro.url.searchParams.get('action')

    try {
        if (action == 'accept') {
            await accept_corporation_applications(auth_token as string, corporation_id, application_id)
        } else {
            await reject_corporation_applications(auth_token as string, corporation_id, application_id)
        }
    } catch (error) {
        application_action_error = prod_error_messages() ? (action == 'accept' ? t('approve_application_error') : t('deny_application_error')) : error.message

        alert = {
            title: (action === 'accept' ? t('accept_application_dialog_title') : t('deny_application_dialog_title')),
            content: application_action_error,
        }

        const character:CharacterBasic = {
            character_id: application?.character_id ?? 0,
            character_name: application?.character_name ?? t('unknown_character'),
        }

        const params = {
            character: JSON.stringify(character),
            corporation: JSON.stringify(corporation),
            application_id: application.id.toString(),
            type: action,
            message: application_action_error,
        }

        alert.partial = `${translatePath('/partials/dialog_with_application/')}?${query_string(params)}`
    }
}

import { query_string } from '@helpers/string';

const CORPORATION_APPLICATION_PARTIAL_URL = `${translatePath('/partials/corporation_application_component')}?${query_string({
    corporation_id: corporation_id,
    application_id: application_id,
})}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import CorporationApplication from '@components/blocks/CorporationApplication.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_corporation_application_error ?
    <ErrorRefetch
        args={{
            partial: translatePath(CORPORATION_APPLICATION_PARTIAL_URL),
            message: get_corporation_application_error,
            delay: delay,
        }}
    />
    :
    <CorporationApplication
        application={application}
        corporation_id={corporation_id}
        corporation_name={corporation.name}
        alert={alert}
    />
}