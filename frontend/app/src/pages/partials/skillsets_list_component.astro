---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = await get_user_permissions(user?.username)

if (!user.is_superuser && !user_permissions.includes('eveonline.view_evecharacter'))
    return HTTP_404_Not_Found()

const character_id = parseInt(Astro.url.searchParams.get('character_id') as string)
if (isNaN(character_id))
    return HTTP_404_Not_Found()

import type { SkillsetsUI } from '@dtypes/layout_components'
import { get_skillsets } from '@helpers/fetching/characters'

let character_skillsets:SkillsetsUI | null = null
let get_character_skillsets_error:string | false = false
try {
    character_skillsets = await get_skillsets(auth_token, character_id)
} catch (error) {
    get_character_skillsets_error = prod_error_messages() ? t('get_character_skillsets_error') : error.message
}

const SKILLSETS_LIST_PARTIAL_URL = translatePath('/partials/skillsets_list_component')

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

const skillsets_count = character_skillsets?.skillsets.length ?? 0

import SkillsetsList from '@components/blocks/SkillsetsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_character_skillsets_error ?
    <ErrorRefetch
        args={{
            partial: `${SKILLSETS_LIST_PARTIAL_URL}?character_id=${character_id}`,
            message: get_character_skillsets_error,
            delay: delay,
        }}
    />
    :
    <SkillsetsList
        skillsets={character_skillsets?.skillsets ?? []}
        character={{
            character_id: character_skillsets?.character_id as number,
            character_name: character_skillsets?.character_name as string,
        }}
        x-data={`{
            init() {
                character_id = ${character_skillsets?.character_id as number}
                character_name = '${character_skillsets?.character_name as string}'
                skillsets_count = ${skillsets_count}
            }
        }`}
    />
}