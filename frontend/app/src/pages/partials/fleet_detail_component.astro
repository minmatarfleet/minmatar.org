---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!user)
    return HTTP_404_Not_Found()

const fleet_id = parseInt(Astro.url.searchParams.get('fleet_id') as string)

if (isNaN(fleet_id))
    return HTTP_404_Not_Found()

import type { FleetUI, FleetCompositionUI, FleetRadarUI, SRPUI, FleetCombatLog } from '@dtypes/layout_components'
import type { EveCharacterProfile } from '@dtypes/api.minmatar.org'
import { fetch_fleet_by_id, group_members_by_ship, group_members_by_location } from '@helpers/fetching/fleets'
import { get_fleet_members } from '@helpers/api.minmatar.org/fleets'
import { get_user_character } from '@helpers/fetching/characters'
import { fetch_fleet_srps } from '@helpers/fetching/srp'
import { get_system_id } from '@helpers/sde/map'
import { get_fleet_combatlogs } from '@helpers/fetching/combatlog'

let fetch_fleets_error:string | false = false
let fleet:FleetUI | null = null
let user_character:EveCharacterProfile | null = null
let fleet_composition:FleetCompositionUI[] = []
let fleet_radar:FleetRadarUI[] = []
let fleet_srps:SRPUI[] | null = []
let is_fleet_commander = false
let saved_logs:FleetCombatLog[] = []

const upcoming = JSON.parse(Astro.url.searchParams.get('upcoming') as string)

try {
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
    user_character = await get_user_character(user.user_id)
    fleet_srps = await fetch_fleet_srps(auth_token as string, fleet_id)
    is_fleet_commander = (user_character?.character_id === fleet.fleet_commander_id)

    if (is_fleet_commander && upcoming) {
        const staging_solar_system = fleet.location.split(' - ')[0]
        const staging_solar_system_id = await get_system_id(staging_solar_system)

        if (!staging_solar_system_id)
            throw new Error(t('invalid_staging_solar_system'))

        const members = await get_fleet_members(auth_token as string, fleet_id)
        fleet_composition = await group_members_by_ship(members)
        fleet_radar = await group_members_by_location(members, staging_solar_system_id)
    }
} catch (error) {
    if (error.message === 'Error fetching fleet: HTTP error! Status: 403')
        return HTTP_404_Not_Found()
    
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

try {
    saved_logs = user && !fetch_fleets_error ? await get_fleet_combatlogs(auth_token as string, fleet_id) : []
} catch (error) {
    console.log(error)
}

const FLEET_DETAIL_PARTIAL_URL = translatePath(`/partials/fleet_detail_component?fleet_id=${fleet_id}&upcoming=${JSON.stringify(upcoming)}`)

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

const can_remove_fleet = is_superuser ||
                         user_permissions.includes('fleets.delete_evefleet') ||
                         user_character?.character_id === fleet?.fleet_commander_id

import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import FleetDetails from '@components/blocks/FleetDetails.astro';
---

{fetch_fleets_error ?
    <ErrorRefetch
        args={{
            partial: FLEET_DETAIL_PARTIAL_URL,
            message: fetch_fleets_error,
            delay: delay,
        }}
    />
    :
    <FleetDetails
        fleet={fleet as FleetUI }
        can_remove_fleet={can_remove_fleet}
        is_fleet_commander={is_fleet_commander}
        fleet_composition={fleet_composition}
        fleet_radar={fleet_radar}
        history={!upcoming}
        fleet_srps={fleet_srps}
        saved_logs={saved_logs}
    />
}