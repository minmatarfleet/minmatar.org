---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { get_auth_url } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import { set_primary_characters } from '@helpers/api.minmatar.org/characters'
import type { Character } from '@dtypes/api.minmatar.org'
import { get_characters } from '@helpers/api.minmatar.org/characters'

const character_id = parseInt(Astro.url.searchParams.get('id'))
const character_name = Astro.url.searchParams.get('character_name')
let set_main_character_error
let pilots:Character[] = []
let get_characters_error:string | false = false
let readonly = false

try {
    await set_primary_characters(auth_token, character_id)
} catch (error) {
    set_main_character_error = (prod_error_messages() ? t('set_main_character_error') : error.message)
}

import type { Alert } from '@dtypes/layout_components'

let alert:Alert
import { query_string } from '@helpers/string';

const PILOTS_LIST_PARTIAL_URL = translatePath('/partials/pilots_list_component/')
let redirect

if (set_main_character_error) {
    const params = query_string({
        id: character_id.toString(),
        character_name: character_name,
        message: set_main_character_error,
    })

    alert = {
        title: t('set_main_character_dialog_title'),
        content: set_main_character_error,
        partial: `${translatePath('/partials/dialog_with_character/')}?${params}`,
    }

    try {
        pilots = await get_characters(auth_token);
    } catch (error) {
        get_characters_error = (prod_error_messages() ? t('get_characters_error') : error.message)
        readonly = true
    }
} else {
    redirect = translatePath('/redirects/add_primary_character')
}

import PilotsList from '@components/blocks/PilotsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import RifterIcon from '@components/icons/RifterIcon.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
---

{!set_main_character_error &&
    <Wrapper
        padding_inline='0'
        padding_block='var(--space-l)'
    >
        <FlexInline class="[ items-center ]">
            <RifterIcon/>
            <p class="[ loading ]">{t('updating')}</p>
        </FlexInline>
    </Wrapper>
    
    <script define:vars={{ redirect }}>
        window.location.href = redirect
    </script>
}

{get_characters_error &&
    <PilotsList
        pilots={pilots}
        readonly={readonly}
        alert={alert}
    >
        <ErrorRefetch
            args={{
                partial: PILOTS_LIST_PARTIAL_URL,
                message: get_characters_error,
                delay: 0,
                target: '#pilots-list',
            }}
        />
    </PilotsList>
}

{set_main_character_error &&
    <PilotsList
        pilots={pilots}
        readonly={readonly}
        alert={alert}
    />
}