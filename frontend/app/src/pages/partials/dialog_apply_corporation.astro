---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import type { CorporationObject, CorporationType, GroupStatus } from '@dtypes/layout_components'

const corporation_id = parseInt(Astro.url.searchParams.get('corporation_id') as string)
const corporation_name = Astro.url.searchParams.get('corporation_name') as string
const alliance_id = parseInt(Astro.url.searchParams.get('alliance_id') as string)
const alliance_name = Astro.url.searchParams.get('alliance_name') as string
const corporation_type = Astro.url.searchParams.get('corporation_type') as CorporationType
const status = Astro.url.searchParams.get('status') as GroupStatus
const active = JSON.parse(Astro.url.searchParams.get('active') as string)
const message = Astro.url.searchParams.get('message')

const corporation:CorporationObject = {
    corporation_id: corporation_id,
    corporation_name: corporation_name,
    alliance_id: alliance_id,
    alliance_name: alliance_name,
    corporation_type: corporation_type,
    active: active,
}

import Flexblock from '@components/compositions/Flexblock.astro';
import CorporationItem from '@components/blocks/CorporationItem.astro';
import Textarea from '@components/blocks/Textarea.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Markdown from '@components/icons/buttons/Markdown.astro';

const MAX_APPLICATION_TEXT_LENGTH = 2000
---

<Flexblock
    x-data={`{
        application_text: '',
        error: true,
        update_status() {
            confirm_dialog_hx.vals = JSON.stringify(this.application_text)
            this.error = !this.application_text || this.application_text.length > ${MAX_APPLICATION_TEXT_LENGTH}
            confirm_dialog_set_accept_disable(this.error)
        }
    }`}
    x-init="update_status"
    x-effect="update_status"
>
    <p set:html={message} />
    <CorporationItem corporation={corporation} />
    <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
        <label for="description">{t('application_text')}</label>
        <div class="[ remain-wrapper ]" x-data={`{ limit: $el.dataset.limit }`} data-limit={MAX_APPLICATION_TEXT_LENGTH}>
            <Textarea x-ref="content" id="description" x-model="application_text" rows="5" />
            <small
                x-show={`application_text.length > ${MAX_APPLICATION_TEXT_LENGTH - 200}`}
                x-ref="remaining"
                x-text="limit - application_text.length"
                x-bind:class="(error ? 'text-red animate-fade-in-up' : '')"
            >
                {MAX_APPLICATION_TEXT_LENGTH}
            </small>
        </div>
        <a href="https://www.markdownguide.org/" class="[ w-fit ]" target="_blank" rel="noreferrer noopener nofollow">
            <FlexInline gap='var(--space-3xs)'>
                <Markdown />
                <small>{t('markdown_support')}</small>
            </FlexInline>
        </a>
    </Flexblock>
</Flexblock>

<style lang="scss">
    .remain-wrapper {
        position: relative;

        small {
            position: absolute;
            right: var(--space-2xs);
            bottom: var(--space-3xs);

            &.text-red {
                font-weight: 600;
            }
        }
    }
</style>