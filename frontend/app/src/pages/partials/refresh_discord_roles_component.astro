---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { HTTP_404_Not_Found } from '@helpers/http_responses'
import { prod_error_messages } from '@helpers/env'

const is_friend = JSON.parse(Astro.url.searchParams.get('is_friend') ?? 'false') as boolean

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const token_name = is_friend ? 'guest_auth_token' : 'auth_token'
const auth_token = Astro.cookies.has(token_name) ? Astro.cookies.get(token_name).value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!user)
    return HTTP_404_Not_Found()

import { sync_user_with_discord } from '@helpers/api.minmatar.org/authentication'

let sync_user_with_discord_error
let updated = false

if (Astro.request.method === "POST") {
    try {
        await sync_user_with_discord(auth_token as string, user.user_id)
        updated = true
    } catch (error) {
        sync_user_with_discord_error = (prod_error_messages() ? t('sync_user_with_discord_error') : error.message)
    }
}

import type { Alert } from '@dtypes/layout_components'

let alert:Alert | false = false
if (sync_user_with_discord_error) {
    alert = {
        title: t('sync_user_with_discord'),
        content: sync_user_with_discord_error,
    }
}

const REFRESH_DISCORD_ROLES_PARTIAL_URL = `${translatePath('/partials/refresh_discord_roles_component/')}?is_friend=${is_friend}`

const ROLES_UPDATED_LABEL_TIME_MS = 2000

import Button from '@components/blocks/Button.astro';
---

<Button
    size='sm'
    type="button"
    hx-post={REFRESH_DISCORD_ROLES_PARTIAL_URL}
    hx-swap="outerHTML transition:true"
    hx-on::before-request="this.setAttribute('disabled','');"
    hx-on::after-request="this.removeAttribute('disabled')"
    x-data={`{
        button_label: '${updated ? t('discord_roles_updated') : t('refresh_discord_roles')}',
        init() {
            ${updated} && setTimeout(() => this.button_label = '${t('refresh_discord_roles')}', ${ROLES_UPDATED_LABEL_TIME_MS})
            ${alert !== false ? `show_alert_dialog(${JSON.stringify(alert)})` : ''}
        }
    }`}
>
    <span x-text="button_label">{updated ? t('discord_roles_updated') : t('refresh_discord_roles')}</span>
</Button>