---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { get_auth_url } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import type { Alert } from '@dtypes/layout_components'
import type { Character } from '@dtypes/api.minmatar.org'
import { get_characters, delete_characters } from '@helpers/api.minmatar.org/characters'
import { query_string } from '@helpers/string';

let redirect:string | false = false
let status = true
let removed_character_id:number | false = false
let removed_character_name:string | false = false
let alert:Alert | false = false

if (Astro.request.method === "DELETE") {
    removed_character_id = parseInt(Astro.url.searchParams.get('id'))
    removed_character_name = Astro.url.searchParams.get('character_name')
    let delete_character_error:string | false = false

    try {
        status = await delete_characters(auth_token, removed_character_id)
    } catch (error) {
        delete_character_error = (prod_error_messages() ? t('delete_character_error') : error.message)
    }

    if (status) {
        const primary_character = Astro.cookies.has('primary_pilot') ? JSON.parse(Astro.cookies.get('primary_pilot').value) : null
        const primary_character_id = primary_character ? parseInt(primary_character.character_id) : null

        if (removed_character_id == primary_character_id) {
            Astro.cookies.delete('primary_pilot', { path: '/' })

            redirect = translatePath('/account')
        }
    } else {
        const error_msg = (prod_error_messages() || !delete_character_error) ? t('delete_character_error') : delete_character_error

        const params = query_string({
            id: removed_character_id.toString(),
            character_name: removed_character_name,
            message: error_msg,
        })

        alert = {
            title: t('remove_pilot_dialog_title'),
            content: error_msg,
            partial: `${translatePath('/partials/dialog_with_character/')}?${params}`,
        }
    }
}

let pilots:Character[] = []
let get_characters_error:string | false = false
let readonly = false
try {
    pilots = await get_characters(auth_token);
} catch (error) {
    get_characters_error = (prod_error_messages() ? t('get_characters_error') : error.message)
    readonly = true
}

const PILOTS_LIST_PARTIAL_URL = translatePath('/partials/pilots_list_component/')

const delay = parseInt(Astro.url.searchParams.get('delay'))

import PilotsList from '@components/blocks/PilotsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_characters_error ?
    <PilotsList
        pilots={pilots}
        readonly={readonly}
        empty_text={get_characters_error ? get_characters_error : t('empty_pilots_text')}
        removed_character={removed_character_id}
        alert={alert}
    >
        <ErrorRefetch
            args={{
                partial: PILOTS_LIST_PARTIAL_URL,
                message: get_characters_error,
                delay: delay,
                target: '#pilots-list',
            }}
        />
    </PilotsList>
    :
    <PilotsList
        pilots={pilots}
        readonly={readonly}
        empty_text={get_characters_error ? get_characters_error : t('empty_pilots_text')}
        removed_character={removed_character_id}
        alert={alert}
    />
}

{redirect &&
    <script define:vars={{ redirect }} is:inline>
        if (redirect) navigate(redirect)
    </script>
}