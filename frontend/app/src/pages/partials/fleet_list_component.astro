---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!user)
    return HTTP_403_Forbidden()

import type { FleetItem } from '@dtypes/layout_components'
import { fetch_fleets_auth, fetch_fleets } from '@helpers/fetching/fleets'

let fetch_fleets_error:string | false = false
let fleets:FleetItem[] | null = null

const upcoming = JSON.parse(Astro.url.searchParams.get('upcoming') as string)

try {
    fleets = auth_token ? await fetch_fleets_auth(auth_token as string, upcoming) : await fetch_fleets(upcoming)
    fleets.sort(function(a, b) {
        return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();
    });
} catch (error) {
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const FLEET_LIST_PARTIAL_URL = translatePath(`/partials/fleet_list_component?upcoming=${JSON.stringify(upcoming)}`)
const TIMEAGO_UPDATE_RATE_MS = 10000

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import FleetList from '@components/blocks/FleetList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{fetch_fleets_error ?
    <ErrorRefetch
        args={{
            partial: FLEET_LIST_PARTIAL_URL,
            message: fetch_fleets_error,
            delay: delay,
        }}
    />
    :
    <div
        class="[ fleet-list-container ]"
        x-data={`{
            last_update: ${new Date().getTime()},
            updated_time_ago: '',
            update_time_ago() {
                const now = new Date()

                const seconds_past = Math.floor((now.getTime() - this.last_update) / 1000);

                if (seconds_past < 60)
                    this.updated_time_ago = '${t('just_now')}';
                else if (seconds_past < 120)
                    this.updated_time_ago = '${t('minute_ago')}';
                else {
                    const minutes = Math.floor(seconds_past / 60)
                    this.updated_time_ago = '${t('minutes_ago')}'.replace('MINUTES', minutes)
                }

                if ($refs.timeago_span !== undefined)
                    setTimeout(() => this.update_time_ago(), ${TIMEAGO_UPDATE_RATE_MS})
            },
            init() {
                fleets_count = ${fleets?.length}
            
                if (fleets_count > 0)
                    tippy($el, tippy_options)
                    
                this.update_time_ago()
                setTimeout(() => this.update_time_ago(), ${TIMEAGO_UPDATE_RATE_MS})
            }
        }`}
    >
        {(fleets?.length ?? 0) > 0 &&
            <small class="[ absolute right-0 mt-[-30px] animate-fade-in-up ]" x-text="updated_time_ago" x-ref="timeago_span" />
        }

        <FleetList
            fleets={fleets as FleetItem[]}
            history={!upcoming}
        />

        {(fleets?.length ?? 0) === 0 &&
            <small class="[ block text-center animate-fade-in-up ]" x-text="updated_time_ago" x-ref="timeago_span" />
        }
    </div>
}