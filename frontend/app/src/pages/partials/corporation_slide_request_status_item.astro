---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { get_auth_url } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import type { CorporationObject, Alert, CorporationStatusType } from '@dtypes/layout_components'
import { create_corporation_application } from '@helpers/api.minmatar.org/applications'
import type { CorporationApplication } from '@dtypes/api.minmatar.org'
import { get_corporation_list_by_id_auth } from '@helpers/fetching/corporations'

let corporation:CorporationObject | null = null
let create_corporation_application_error:string | false = false
let application:CorporationApplication 

if (Astro.request.method === "POST") {
    try {
        const corporation_id = parseInt(Astro.url.searchParams.get('corporation_id') as string)
        corporation = await get_corporation_list_by_id_auth(auth_token, corporation_id, user.user_id)
        console.log(corporation)
        const data = await Astro.request.formData()
        const description = data.get('application_text') as string
        console.log(description)

        if (!description)
            throw new Error(t('invalid_description'));

        application = await create_corporation_application(auth_token, corporation.corporation_id, description)
        corporation.status = application.status as CorporationStatusType
    } catch (error) {
        create_corporation_application_error = prod_error_messages() ? t('create_corporation_application_error') : error.message
    }
}

import { query_string } from '@helpers/string';
let alert:Alert | false = false
if (create_corporation_application_error) {
    alert = {
        title: t('corporation_join_request_dialog_title'),
        content: create_corporation_application_error,
    }

    if (corporation) {
        interface Message {
            message: string
        }

        type Params = CorporationObject & Message

        const params:Params = {
            alliance_id: corporation.alliance_id,
            corporation_id: corporation.corporation_id,
            alliance_name: corporation.alliance_name,
            corporation_name: corporation.corporation_name,
            corporation_type: corporation.corporation_type,
            active: corporation.active,
            biography: corporation.biography,
            introduction: corporation.introduction,
            requirements: corporation.requirements,
            timezones: corporation.timezones,
            message: create_corporation_application_error,
        }

        alert.partial = `${translatePath('/partials/dialog_with_corporation/')}?${query_string(params)}`
    }
}

import CorporationSlideStatus from '@components/blocks/CorporationSlideStatus.astro';
---

<CorporationSlideStatus
    corporation={corporation as CorporationObject }
    is_user_corporation={false}
    alert={alert}
/>