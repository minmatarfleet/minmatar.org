---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!is_superuser && !user_permissions.includes('moons.view_evemoon'))
    return HTTP_404_Not_Found()

import { get_region_systems } from '@helpers/eve'
import { get_moon_summary } from '@helpers/api.minmatar.org/moons'
import { find_system_moons } from '@helpers/sde/map'
import type { SystemCardInfo } from '@dtypes/layout_components'

let systems:SystemCardInfo[] = []
let filtered_systems:SystemCardInfo[]
let fetch_moon_system_data_error:string | false = false

const home_system = Astro.cookies.has('moon_tracking_home_system_name') ? Astro.cookies.get('moon_tracking_home_system_name').value : 'Sosala'

try {
    systems = await get_region_systems(home_system)
    const moon_summary_systems = await get_moon_summary()
    console.log('moon_summary_systems')
    console.log(moon_summary_systems)
    
    filtered_systems = systems.filter((system) => (system.security.toFixed(1) > '0.1' && system.security.toFixed(1) < '0.5'))
    filtered_systems = await Promise.all(filtered_systems.map(async (system) => {
        const moons_in_system = await find_system_moons(system.system_name)
        system.moons_count = moons_in_system.length
        return system
    }))

    filtered_systems = filtered_systems.filter((system) => system.moons_count > 0)

    filtered_systems = filtered_systems.map(system => {
        const moons = moon_summary_systems.find(summary_system => summary_system.system === system.system_name)
        system.progress = system?.moons_count > 0 ? ((moons?.scanned_moons ?? 0) / system.moons_count) * 100 : 0
        return system
    })
} catch (error) {
    fetch_moon_system_data_error = prod_error_messages() ? t('fetch_moon_system_data_error') : error.message
}

const MOON_TRACKING_SYSTEMS_PARTIAL_URL = `${translatePath('/partials/moon_tracking_systems_component')}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import Grid from '@components/compositions/Grid.astro';
import BlockList from '@components/compositions/BlockList.astro';

import SystemCard from '@components/blocks/SystemCard.astro'
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{fetch_moon_system_data_error ?
    <ErrorRefetch
        args={{
            partial: MOON_TRACKING_SYSTEMS_PARTIAL_URL,
            message: fetch_moon_system_data_error,
            delay: delay,
        }}
    />
    :
    <BlockList gap='var(--space-l)'>
        <Grid
            role="list"
            class="[ w-full grid-fill ]"
            min_item_width='240px'
            row_gap='var(--space-3xs)'
            column_gap='var(--space-3xs)'
            x-init={`filtered_systems_count = ${filtered_systems?.length ?? 0}`}
        >
            {filtered_systems.map((system) =>
                <a
                    class="[ fitting-card-container ]"
                    href={translatePath(`/intel/moons/${system.system_name}`)}
                >
                    <SystemCard system={system} role="listitem" />
                </a>
            )}
        </Grid>
    </BlockList>
}