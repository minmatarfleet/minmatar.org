---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const user_id = !user ? false : user.user_id

import type { CorporationObject, CorporationType } from '@dtypes/layout_components'
import { get_corporations_list, get_corporations_list_auth, get_user_corporation_id } from '@helpers/fetching/corporations'

const corporation_type = Astro.url.searchParams.get('corporation_type') as CorporationType

let corporations:CorporationObject[] = []
let get_all_corporations_error:string | false = false
let user_corporation_id:number

try {
    user_corporation_id = (user_id ? await get_user_corporation_id(user_id) : null)

    if (auth_token && user_id)
        corporations = await get_corporations_list_auth(auth_token, user_id, corporation_type)
    else
        corporations = await get_corporations_list(corporation_type)
} catch (error) {
    get_all_corporations_error = prod_error_messages() ? t('get_all_corporations_error') : error.message
}

const CORPORATIONS_LIST_PARTIAL_URL = `${translatePath('/partials/corporations_list_component')}?corporation_type=${corporation_type}`

const delay = parseInt(Astro.url.searchParams.get('delay'))

import CorporationsList from '@components/blocks/CorporationsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_all_corporations_error ?
    <ErrorRefetch
        args={{
            partial: CORPORATIONS_LIST_PARTIAL_URL,
            message: get_all_corporations_error,
            delay: delay,
        }}
    />
    :
    <CorporationsList
        corporations={corporations}
        user_corporation_id={user_corporation_id}
        disable_applications={corporation_type === 'associate'}
        x-data={`{
            init() {
                corporations_count = ${corporations.length}
            }
        }`}
    />
}