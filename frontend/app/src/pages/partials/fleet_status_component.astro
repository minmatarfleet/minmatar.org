---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!user)
    return HTTP_404_Not_Found()

const fleet_id = parseInt(Astro.url.searchParams.get('id') as string)

if (isNaN(fleet_id))
    return HTTP_404_Not_Found()

import type { FleetUI, Alert } from '@dtypes/layout_components'
import type { EveCharacterProfile } from '@dtypes/api.minmatar.org'
import { fetch_fleet_by_id } from '@helpers/fetching/fleets'
import { get_user_character } from '@helpers/fetching/characters'
import { start_fleet } from '@helpers/api.minmatar.org/fleets'
import { send_active_fleet_notification } from '@helpers/notifications'

let fetch_fleets_error:string | false = false
let start_fleet_error:string | false = false
let fleet:FleetUI | null = null
let user_character:EveCharacterProfile | null = null
let alert:Alert | false = false
let start_tracking = false

if (Astro.request.method === "POST") {
    try {
        start_tracking = await start_fleet(auth_token as string, fleet_id)
        if (start_tracking) send_active_fleet_notification(auth_token as string, fleet_id)
    } catch (error) {
        start_fleet_error = prod_error_messages() ? t('start_fleet_error') : error.message

        alert = {
            title: t('start_tracking'),
            content: start_fleet_error as string,
        }
    }
}

try {
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
    user_character = await get_user_character(user.user_id)
} catch (error) {
    if (error.message === 'Error fetching fleet: HTTP error! Status: 403')
        return HTTP_404_Not_Found()
    
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const is_fleet_commander = (user_character?.character_id === fleet?.fleet_commander_id)

const FLEET_STATUS_PARTIAL_URL = `${translatePath('/partials/fleet_status_component')}?id=${fleet_id}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import FleetStatus from '@components/blocks/FleetStatus.astro'
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{fetch_fleets_error ?
    <ErrorRefetch
        args={{
            partial: FLEET_STATUS_PARTIAL_URL,
            message: fetch_fleets_error,
            delay: delay,
        }}
    />
    :
    <FleetStatus
        fleet={fleet as FleetUI }
        is_fleet_commander={is_fleet_commander}
        alert={alert}
        start_tracking={start_tracking === true}
    />
}