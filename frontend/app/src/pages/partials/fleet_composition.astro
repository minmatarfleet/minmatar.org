---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!user)
    return HTTP_404_Not_Found()

const fleet_id = parseInt(Astro.url.searchParams.get('id'))

if (isNaN(fleet_id))
    return HTTP_404_Not_Found()

import type { FleetUI, FleetCompositionUI, FleetRadarUI } from '@dtypes/layout_components'
import type { EveCharacterProfile } from '@dtypes/api.minmatar.org'
import { fetch_fleet_by_id, group_members_by_ship, group_members_by_location } from '@helpers/fetching/fleets'
import { get_fleet_members } from '@helpers/api.minmatar.org/fleets'
import { get_user_character } from '@helpers/fetching/characters'
import { get_system_id } from '@helpers/sde/map'

let fetch_fleets_error:string | false = false
let fleet:FleetUI
let user_character:EveCharacterProfile
let fleet_composition:FleetCompositionUI[]
let fleet_radar:FleetRadarUI[]

try {
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
    user_character = await get_user_character(user.user_id)

    const staggering_solar_system = fleet.location.split(' - ')[0]
    const staggering_solar_system_id = await get_system_id(staggering_solar_system)

    const members = await get_fleet_members(auth_token as string, fleet_id)
    fleet_composition = await group_members_by_ship(members)
    fleet_radar = await group_members_by_location(members, staggering_solar_system_id)
} catch (error) {
    if (error.message === 'Error fetching fleet: HTTP error! Status: 403')
        return HTTP_404_Not_Found()
    
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const is_fleet_commander = (user_character.character_id === fleet.fleet_commander_id)

if (!is_fleet_commander)
    return HTTP_404_Not_Found()

const delay = parseInt(Astro.url.searchParams.get('delay'))

const FLEET_COMPOSITION_PARTIAL_URL = `${translatePath('/partials/fleet_composition')}?id=${fleet_id}`

import FleetCompositionBlock from '@components/blocks/FleetCompositionBlock.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{fetch_fleets_error ?
    <ErrorRefetch
        args={{
            partial: FLEET_COMPOSITION_PARTIAL_URL,
            message: fetch_fleets_error,
            delay: delay,
        }}
    />
    :
    <FleetCompositionBlock
        composition={fleet_composition}
        fleet_radar={fleet_radar}
        fleet_id={fleet.id}
    />
}