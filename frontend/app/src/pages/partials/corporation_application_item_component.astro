---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found, HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : null
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('applications.change_evecorporationapplication')

import type { CharacterBasic, CorporationBasic } from '@dtypes/layout_components'
const corporation = JSON.parse(Astro.url.searchParams.get('corporation') as string) as CorporationBasic

const corporation_id = corporation?.id ?? 0
const application_id = parseInt(Astro.url.searchParams.get('application_id') ?? '0')

const valid_request = (corporation_id > 0 && application_id > 0)

if (!can_view_page)
    return HTTP_403_Forbidden()

if (!valid_request)
    return HTTP_404_Not_Found()

import { get_applications_data } from '@helpers/pages/applications'
import type { ApplicationsData } from '@helpers/pages/applications'

let applications_data:ApplicationsData = {}
let data_fetching_error

try {
    applications_data = await get_applications_data(auth_token as string, lang)
} catch (error) {
    data_fetching_error = error.message
}

const {
    corporations_applications = [],
    corporations_unfiltered = [],
    corporations_applications_count = [],
    total_applications = 0,
    corporations_options = [],
} = applications_data

import type { Alert } from '@dtypes/layout_components'
import { accept_corporation_applications, reject_corporation_applications } from '@helpers/api.minmatar.org/applications'

let alert:Alert | null = null

if (Astro.request.method === "POST") {
    const action = Astro.url.searchParams.get('action')

    try {
        if (action == 'accept') {
            await accept_corporation_applications(auth_token as string, corporation_id, application_id)
        } else {
            await reject_corporation_applications(auth_token as string, corporation_id, application_id)
        }
    } catch (error) {
        const application_action_error = prod_error_messages() ? (action == 'accept' ? t('approve_application_error') : t('deny_application_error')) : error.message

        const application = corporations_applications
            .find((corporations_application) => corporations_application.corporation_id === corporation_id)
            ?.applications
            ?.find((application) => application.id === application_id)

        if (application_action_error) {
            alert = {
                title: (action === 'accept' ? t('accept_application_dialog_title') : t('deny_application_dialog_title')),
                content: application_action_error,
            }

            const character:CharacterBasic = {
                character_id: application?.character_id ?? 0,
                character_name: application?.character_name ?? t('unknown_character'),
            }

            const params = {
                character: JSON.stringify(character),
                corporation: JSON.stringify(corporation),
                application_id: application_id.toString(),
                type: action,
                message: application_action_error,
            }

            alert.partial = `${translatePath('/partials/dialog_with_application/')}?${query_string(params)}`
        }
    }
}

import { query_string } from '@helpers/string';
const CORPORATION_APPLICATION_ITEM_PARTIAL_URL = `${translatePath('/partials/corporation_application_item_component')}?${query_string({
    corporation_id: corporation_id,
    application_id: application_id,
})}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{data_fetching_error ?
    <ErrorRefetch
        args={{
            partial: CORPORATION_APPLICATION_ITEM_PARTIAL_URL,
            message: data_fetching_error,
            delay: delay,
        }}
    />
    :
    <div
        class="[ hidden ]"
        x-data={`{
            init() {
                corporations_applications = ${JSON.stringify(corporations_applications)}
                corporations_unfiltered = ${JSON.stringify(corporations_unfiltered)}
                corporations_filtered = ${JSON.stringify(corporations_unfiltered)}
                corporations_filtered_applications_count = ${JSON.stringify(corporations_applications_count)}
                total_applications_filtered = ${total_applications}
                total_applications_unfiltered = ${total_applications}
                corporations_options = ${JSON.stringify(corporations_options)}
                ${alert && `show_alert_dialog(${JSON.stringify(alert)})`}
            }
        }`}
    />
}