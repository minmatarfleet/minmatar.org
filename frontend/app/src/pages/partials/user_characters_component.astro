---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { is_officer, is_director } from '@helpers/fetching/groups'
const user_is_officer = (auth_token && user ? await is_officer(auth_token, user.user_id) : false)
const user_is_director = (auth_token && user ? await is_director(auth_token, user.user_id) : false)

const can_view_page = is_superuser || user_is_officer || user_is_director

if (!can_view_page)
    return HTTP_404_Not_Found()

import type { Character } from '@dtypes/api.minmatar.org'
import { get_characters } from '@helpers/api.minmatar.org/characters'

let get_all_mains_alts_error:string | false = false
let characters:Character[] = []

const character_id = parseInt(Astro.url.searchParams.get('character_id'))
const character_name = Astro.url.searchParams.get('character_name')

try {
    characters = await get_characters(auth_token as string, character_id)
} catch (error) {
    get_all_mains_alts_error = prod_error_messages() ? t('get_all_mains_alts_error') : error.message
}

import { query_string } from '@helpers/string';
const params = query_string({
    character_id: character_id,
    character_name: character_name,
} as Character)
const USER_CHARACTERS_PARTIAL_URL = `${translatePath('/partials/user_characters_component')}?${params}`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import UserCharacters from '@components/blocks/UserCharacters.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_all_mains_alts_error ?
    <ErrorRefetch
        args={{
            partial: `${USER_CHARACTERS_PARTIAL_URL}?character_id=${character_id}`,
            message: get_all_mains_alts_error,
            delay: delay,
        }}
    />
    :
    <UserCharacters
        user={user as User}
        character_name={character_name}
        characters={characters}
    />
}