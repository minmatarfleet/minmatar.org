---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang)

import { prod_error_messages } from '@helpers/env'
import { get_auth_url } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import type { GroupRequestListUI, GroupItemType } from '@dtypes/layout_components'
import { get_all_groups_requests } from '@helpers/fetching/group_requests'

const groups_type = Astro.url.searchParams.get('groups_type') as GroupItemType

let groups_requests:GroupRequestListUI[] = []
let get_all_corporations_error:string | false = false
try {
    groups_requests = await get_all_groups_requests(auth_token, groups_type, user.user_id, is_superuser)
    groups_requests.sort( (a, b) => {
        return b.requests.length - a.requests.length
    })
} catch (error) {
    get_all_corporations_error = prod_error_messages() ? t('get_all_corporations_error') : error.message
}

const GROUP_REQUESTS_LIST_PARTIAL_URL = translatePath('/partials/group_requests_list_component/')

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import GroupRequestsList from '@components/blocks/GroupRequestsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_all_corporations_error ?
    <ErrorRefetch
        args={{
            partial: `${GROUP_REQUESTS_LIST_PARTIAL_URL}?groups_type=${groups_type}`,
            message: get_all_corporations_error,
            delay: delay,
        }}
    />
    :
    <GroupRequestsList
        groups_requests={groups_requests}
        groups_type={groups_type}
    />
}