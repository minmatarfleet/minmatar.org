---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_add_fleets = is_superuser || user_permissions.includes('fleets.add_evefleet')
const can_view_srp = (user !== false)

import type { FleetItem, Alert } from '@dtypes/layout_components'
import { fetch_fleets_auth, fetch_fleets } from '@helpers/fetching/fleets'

let fetch_fleets_error:string | false = false
let fleets:FleetItem[] = []

try {
    fleets = auth_token ? await fetch_fleets_auth(auth_token as string) : await fetch_fleets()
    fleets.sort(function(a, b) {
        return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();
    });
} catch (error) {
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const flash_form_error = Astro.cookies.has('flash_form_error') ? Astro.cookies.get('flash_form_error')?.value : false
if (Astro.cookies.has('flash_form_error')) Astro.cookies.delete('flash_form_error', { path: '/' })

const alert = !flash_form_error ? false : {
    title: t('flash_form'),
    content: flash_form_error
} as Alert

import { get_locations } from '@helpers/api.minmatar.org/fleets'
import type { Location } from '@dtypes/api.minmatar.org'
let locations:Location[] = []
let fetch_doctrines_error:string | null = null

try {
    locations = await get_locations(auth_token as string)
} catch (error) {
    fetch_doctrines_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}

const FLEET_LIST_PARTIAL_URL = translatePath(`/partials/fleet_list_component?upcoming=${JSON.stringify(true)}`)

const AUTH_REDIRECT_URL = `${translatePath('/redirects/auth_init')}?redirect_url=${Astro.url}`

import { marked } from 'marked';
const AUTH_FLEET_SUBHINT = (marked.parseInline(t('authenticate_fleet_subhint')) as string)
    .replace(
        'AUTH_LINK', AUTH_REDIRECT_URL
    )

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import FleetList from '@components/blocks/FleetList.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import ShowAlert from '@components/blocks/ShowAlert.astro';
import FlashFormButton from '@components/blocks/FlashFormButton.astro'

import AddIcon from '@components/icons/buttons/AddIcon.astro';
import FlashIcon from '@components/icons/buttons/FlashIcon.astro';

const page_title = t('fleets.upcoming.page_title');
---

{alert && <ShowAlert alert={alert} /> }

<Viewport
    title={page_title}
    meta_description={t('page_finder.fleets.upcoming.meta_description')}
    components={{
        alert_dialog: true,
        confirm_dialog: true
    }}
>
    <PageWide
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover.jpg",
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            fleets_count: ${fleets.length}
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={`\`\${fleets_count} \${fleets_count != 1 ? '${t('fleets').toLowerCase()}' : '${t('fleet').toLowerCase()}'} ${t('on_schedule').toLowerCase()}\``}>
                        {`${fleets.length} ${fleets.length != 1 ? t('fleets').toLowerCase() : t('fleet').toLowerCase()} ${t('on_schedule').toLowerCase()}`}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                {can_add_fleets &&
                    <Button color={'green'} href={translatePath('/fleets/add/')}>
                        <AddIcon slot="icon" />
                        {t('schedule_fleet')}
                    </Button>
                    <Button x-on:click="document.getElementById('flash-form-button').click()">
                        <FlashIcon slot="icon" />
                        {t('flash_form')}
                    </Button>
                }
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                href={translatePath('/fleets/history/')}
                size='sm'
            >
                {t('fleet_history')}
            </Button>

            {can_view_srp &&
                <Button
                    href={translatePath('/fleets/srp/')}
                    size='sm'
                >
                    {t('ship_replacement_program')}
                </Button>
            }
        </FlexInline>

        <FlashFormButton locations={locations} hidden={true} />
        
        {fetch_fleets_error ?
            <ErrorRefetch
                args={{
                    partial: FLEET_LIST_PARTIAL_URL,
                    message: fetch_fleets_error,
                    delay: 0,
                }}
            />
            :
            <Flexblock gap='var(--space-xl)'>
                {!user &&
                    <FlexInline justification='space-between'>
                        <Flexblock gap='var(--space-3xs)'>
                            <p>{t('authenticate_fleet_hint')}</p>
                            <small set:html={AUTH_FLEET_SUBHINT} />
                        </Flexblock>
                    </FlexInline>
                }

                <div class="[ fleet-list-container relative ]">
                    <FleetList fleets={fleets} />
                </div>
            </Flexblock>
        }
	</PageWide>
</Viewport>