---

import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

if (Astro.request.method === "POST") {
    // TODO: Call to add fleet endpoint here with data from "await Astro.request.formData()"
    console.log(`TODO: Call to add fleet endpoint here with data from "await Astro.request.formData()"`)

    return Astro.redirect(translatePath('/fleets/upcoming'))
}

import doctrines_metadata from '@json/hosted/doctrines.json';
import audiences from '@json/hosted/audience.select.options.json';
import fleet_types from '@json/hosted/fleet_type.select.options.json';
import doctrines from '@json/hosted/doctrines.select.options.json';

const doctrines_select_options = Array.from(Object.entries(doctrines), ([key, value]) => { return {"id": key, "name": value} })
const fleet_types_select_options = Array.from(Object.entries(fleet_types), ([key, value]) => { return {"id": key, "name": value} })
const audiences_select_options = Array.from(Object.entries(audiences), ([key, value]) => { return {"id": key, "name": value} })

import Flexblock from '@components/compositions/Flexblock.astro';
import Viewport from '@layouts/Viewport.astro';
import Button from '@components/blocks/Button.astro';
import HistoryIcon from '@components/icons/buttons/HistoryIcon.astro';

import PageCover from '@components/page/PageCover.astro';
import PageHeader from '@components/page/PageHeader.astro';
import PageTitle from '@components/page/PageTitle.astro';
import PageBody from '@components/page/PageBody.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import ThumbCard from '@components/blocks/ThumbCard.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import TextGroup from '@components/blocks/TextGroup.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import Textarea from '@components/blocks/Textarea.astro';
import Wrapper from '@components/compositions/Wrapper.astro';
import FleetIcon from '@components/icons/buttons/FleetIcon.astro';

const page_title = t('fleets.add.page_title');
const today = new Date().toISOString().split("T")[0]
---

<Viewport title={page_title}>
    <PageCover
        image="/images/fleets-cover.jpg"
        image_990="/images/fleets-cover-990.jpg"
        alt={t('fleets.cover_alt')}
        animated={false}
        scrollable={true}
        overlay={true}
    />

	<main
        id="content"
        x-data={`{
            fleet_type: 'fun_fleet',
            audience: 'alliance',
            doctrine: 9,
            eve_date: '${today}',
            eve_time: '00:00:00',
            local_datetime: '',
            audiences: ${JSON.stringify(audiences)},
            fleet_types: ${JSON.stringify(fleet_types)},
            doctrines: ${JSON.stringify(doctrines)},
            doctrines_metadata: ${JSON.stringify(doctrines_metadata)},
            get_images() {
                let images = [];

                document.querySelectorAll('.confetti-image').forEach((img) => {
                    images.push({
                        src: img.getAttribute('src'),
                        width: 64,
                        height: 64,
                    })
                })
                
                return images
            },
            fleet_datetime(utc) {
                const date_time = this.eve_date+' '+this.eve_time
                const date_string = new Date(date_time+(utc ? ' UTC' : '')).toLocaleDateString(
                    '${lang}',
                    ${import.meta.env.DATETIME_FORMAT}
                )

                return (date_string != 'Invalid Date' ? date_string : '${t('waiting_fleet_time')}')
            },
        }`}
    >
        <PageHeader max_width="var(--max-content-width)">
            <FlexInline justification='space-between'>
                <FlexInline>
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                </FlexInline>
                <FlexInline>
                    <Button class="[ !hidden md:!flex ]" href={translatePath('/fleets/upcoming')}>
                        <FleetIcon slot="icon" />
                        {t('upcoming_fleets')}
                    </Button>
                    <Button class="[ !hidden lg:!flex ]" href={translatePath('/fleets/history')}>
                        <HistoryIcon slot="icon" />
                        {t('fleet_history')}
                    </Button>
                </FlexInline>
            </FlexInline>
        </PageHeader>

        <PageBody max_width="var(--max-content-width)">
            <form
                method="POST"
                x-data={`{
                    'submitted': false
                }`}
                x-on:submit.prevent="launch_confetti(get_images()); submitted = true;"
            >
                <Flexblock gap="var(--space-3xs)">
                    <FixedFluid width="var(--max-text-width)" breakpoint="38%" gap="var(--space-3xs)">
                        <Wrapper max_width="var(--max-text-width)" padding_inline="0" padding_block="0">
                            <ComponentBlock>
                                <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                                    <h2>{t('fleet_information')} (1/3)</h2>

                                    <p>{t('fleets.add.form_info')}</p>

                                    <Flexblock>
                                        <VerticalCenter>
                                            <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                                <label for="doctrine">{t('doctrine')}</label>
                                                <Select id="doctrine" x-model="doctrine">
                                                    {doctrines_select_options.map((option) => 
                                                        <option value={option.id}>{option.name}</option>
                                                    )}
                                                </Select>
                                            </FixedFluid>
                                        </VerticalCenter>

                                        <VerticalCenter>
                                            <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                                <label for="fleet_date">{t('fleet_date')}</label>
                                                <Input id="fleet_date" type="date" x-model="eve_date" required min={today} value={today} />
                                            </FixedFluid>
                                        </VerticalCenter>

                                        <VerticalCenter>
                                            <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                                <label for="fleet_time">{t('fleet_time')}</label>
                                                <Input id="fleet_time" type="time" step="2" value="00:00:00" x-model="eve_time" required />
                                            </FixedFluid>
                                        </VerticalCenter>

                                        <VerticalCenter>
                                            <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                                <label for="type">{t('type')}</label>
                                                <Select id="type" x-model="fleet_type">
                                                    {fleet_types_select_options.map((option) => 
                                                        <option value={option.id}>{option.name}</option>
                                                    )}
                                                </Select>
                                            </FixedFluid>
                                        </VerticalCenter>

                                        <VerticalCenter>
                                            <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                                <label for="audience">{t('audience')}</label>
                                                <Select id="audience" x-model="audience">
                                                    {audiences_select_options.map((option) => 
                                                        <option value={option.id}>{option.name}</option>
                                                    )}
                                                </Select>
                                            </FixedFluid>
                                        </VerticalCenter>

                                        <VerticalCenter>
                                            <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
                                                <label for="description">{t('description')}</label>
                                                <Textarea id="description" name="fitting" rows="5" />
                                            </Flexblock>
                                        </VerticalCenter>
                                    </Flexblock>
                                </Flexblock>
                            </ComponentBlock>
                        </Wrapper>

                        <Wrapper max_width="var(--max-text-width)" padding_inline="0" padding_block="0">
                            <Flexblock gap='2px' class="[ w-full sticky top-[var(--sticky-top)] ]">
                                <ComponentBlock>
                                    <h2>{t('confirm')} (2/3)</h2>
                                </ComponentBlock>

                                <ComponentBlock>
                                    <Flexblock gap="var(--space-m)">
                                        <h4 x-text={`doctrines_metadata[doctrine].name+' ${t('doctrine')}'`}></h4>
                                        <FlexInline>
                                            <template x-for="fitting in doctrines_metadata[doctrine].fittings">
                                                <img class="confetti-image" height="64" width="64" x-bind:src="fitting.image" x-bind:alt="fitting.alt">
                                            </template>
                                        </FlexInline>
                                    </Flexblock>
                                </ComponentBlock>

                                <ThumbCard
                                    thumb_name="Beautiful Mim"
                                    thumb_image="https://images.evetech.net/characters/2121103796/portrait?size=512"
                                    thumb_image_small="https://images.evetech.net/characters/2121103796/portrait?size=512"
                                    thumb_image_alt="Beautiful Mim profile picture"
                                    thumb_title={t('fleet_commander')}
                                >
                                    <VerticalCenter>
                                        <Flexblock gap="var(--space-s-m)">
                                            <TextGroup title={t('type')} text="Fun fleet" x-text="fleet_types[fleet_type]" />
                                            <TextGroup title={t('audience')} text="Alliance" x-text="audiences[audience]" />
                                        </Flexblock>
                                    </VerticalCenter>
                                    
                                    <VerticalCenter>
                                        <Flexblock gap="var(--space-s-m)">
                                            <TextGroup
                                                title={t('eve_time')}
                                                text="Waiting for fleet time"
                                                class="[ sentence-cap ]"
                                                x-text="fleet_datetime()"
                                            />
                                            <TextGroup
                                                title={t('local_time')}
                                                text={t('waiting_fleet_time')}
                                                class="[ sentence-cap ]"
                                                x-text="fleet_datetime(true)"
                                            />
                                        </Flexblock>
                                    </VerticalCenter>
                                </ThumbCard>
                            </Flexblock>
                        </Wrapper>
                    </FixedFluid>

                    <Wrapper max_width="var(--max-text-width)" padding_inline="0" padding_block="0">
                        <ComponentBlock>
                            <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                                <h2>{t('fleet_submit')} (3/3)</h2>

                                <Button x-bind:disabled="submitted" type="submit" color={'green'} class="[ w-full ]">{t('push_button')}</Button>
                            </Flexblock>
                        </ComponentBlock>
                    </Wrapper>
                </Flexblock>
            </form>
        </PageBody>
	</main>
</Viewport>