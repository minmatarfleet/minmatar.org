---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token')?.value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

if (!user) return Astro.redirect(`${translatePath('/redirects/auth_init')}?redirect_url=${Astro.url}`)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('fleets.add_evefleet')

if (!can_view_page)
    return HTTP_403_Forbidden()

import { create_fleet, get_locations, get_audiences, start_fleet } from '@helpers/api.minmatar.org/fleets'
import type { FleetRequest, FleetTypes, Audience } from '@dtypes/api.minmatar.org'
import type { Location } from '@dtypes/api.minmatar.org'
import type { DoctrineType, CharacterBasic, Alert } from '@dtypes/layout_components'
import { send_active_fleet_notification } from '@helpers/notifications'

let create_fleet_error
let alert:Alert | false = false

if (Astro.request.method === "POST") {
    const data = await Astro.request.formData()
    const is_flash_form = data.get('flash_form')
    
    try {
        const doctrine = data.get('doctrine_id') as string
        const doctrine_id = doctrine !== '-1' ? parseInt(doctrine) : null
        const start_time = is_flash_form ?
            new Date(new Date().getTime()) :
            new Date(`${data.get('eve_date')} ${data.get('eve_time')}`)

        const fleet_data = {
            doctrine_id: doctrine_id,
            description: data.get('description') as string,
            location_id: parseInt(data.get('location') as string),
            start_time: start_time,
            type: data.get('fleet_type') as FleetTypes,
            audience_id: parseInt(data.get('audience_id') as string),
            disable_motd: (data.get('disable_motd' as string) === 'on'),
        } as FleetRequest
        
        const new_fleet = await create_fleet(auth_token as string, fleet_data)

        if (!new_fleet?.id) {
            if (is_flash_form) {
                Astro.cookies.set('flash_form_error', t('flash_form_error'), { path: '/' })
                return Astro.redirect(translatePath('/fleets/upcoming'))
            }

            create_fleet_error = t('create_fleet_error')
        } else {
            try {
                let tracking_started = false
                
                if (data.get('start_tracking' as string) === 'on')
                    tracking_started = await start_fleet(auth_token as string, new_fleet?.id)

                if (tracking_started) send_active_fleet_notification(auth_token as string, new_fleet?.id)
            } catch (error) {
                const start_fleet_error = prod_error_messages() ? t('start_fleet_error') : error.message
                Astro.cookies.set('fleet_tracking_error', start_fleet_error, { path: '/' })
            }

            return Astro.redirect(translatePath(`/fleets/upcoming/${new_fleet?.id}`))
        }
    } catch (error) {
        if (is_flash_form) {
            Astro.cookies.set('flash_form_error', t('flash_form_error'), { path: '/' })
            return Astro.redirect(translatePath('/fleets/upcoming'))
        }

        create_fleet_error = prod_error_messages() ? t('create_fleet_error') : error.message
    }

    alert = {
        title: t('create_fleet_dialog_title'),
        content: create_fleet_error,
    }
}

import { get_user_character } from '@helpers/fetching/characters'
import { fetch_doctrines } from '@helpers/fetching/doctrines'

let doctrines:DoctrineType[] = []
let fleet_commander:CharacterBasic | null = null
let fetch_doctrines_error:string | null = null
let locations:Location[] = []
let audiences:Audience[] = []

try {
    const user_profile = await get_user_character((user as User).user_id)

    if (!user_profile)
        throw new Error(t('not_valid_character'))

    fleet_commander = {
        character_id: user_profile.character_id,
        character_name: user_profile.character_name,
    }

    doctrines = await fetch_doctrines()
    locations = await get_locations(auth_token as string)
    audiences = await get_audiences(auth_token as string)
} catch (error) {
    fetch_doctrines_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}

const FLEET_FORM_PARTIAL_URL = translatePath('/partials/fleet_form_component')

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import HistoryIcon from '@components/icons/buttons/HistoryIcon.astro';
import FleetIcon from '@components/icons/buttons/FleetIcon.astro';
import FleetForm from '@components/blocks/FleetForm.astro'

const page_title = t('fleets.add.page_title');

const timer = Astro.url.searchParams.get('timer')
const eve_datetime = timer ? new Date(timer) : new Date()
let eve_date = `${eve_datetime.getFullYear()}-${(eve_datetime.getMonth() + 1).toString().padStart(2, '0')}-${eve_datetime.getDate().toString().padStart(2, '0')}`
let eve_time = `${eve_datetime.getHours().toString().padStart(2, '0')}:${(timer ? eve_datetime.getMinutes() : eve_datetime.getMinutes() + 15).toString().padStart(2, '0')}`
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true
    }}
>
    <PageDefault
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            init() {
                ${alert !== false ? `show_alert_dialog(${JSON.stringify(alert)})` : ''}
            }
        }`}
    >

        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <PageTitle>
                    {page_title}
                </PageTitle>
            </FlexInline>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/fleets/upcoming/')}>
                    <FleetIcon slot="icon" />
                    {t('upcoming_fleets')}
                </Button>
                <Button class="[ !hidden lg:!flex ]" href={translatePath('/fleets/history/')}>
                    <HistoryIcon slot="icon" />
                    {t('fleet_history')}
                </Button>
            </FlexInline>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox><p>{t('fleets.add.page_leading_text')}</p></TextBox>

            {fetch_doctrines_error ?
                <ErrorRefetch
                    args={{
                        partial: `${FLEET_FORM_PARTIAL_URL}`,
                        message: fetch_doctrines_error,
                        delay: 0,
                    }}
                />
                :
                <FleetForm
                    audiences={audiences}
                    doctrines={doctrines}
                    locations={locations}
                    fleet_commander={fleet_commander as CharacterBasic}
                    eve_date={eve_date}
                    eve_time={eve_time}
                    disable_motd={false}
                    lang={lang}
                />
            }
        </Flexblock>
	</PageDefault>
</Viewport>