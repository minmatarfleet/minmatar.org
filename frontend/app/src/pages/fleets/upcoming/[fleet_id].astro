---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found, HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const user_agent = Astro.request.headers.get('user-agent')

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!user) return Astro.redirect(`${translatePath('/redirects/auth_init')}?redirect_url=${Astro.url}`)

const fleet_id = parseInt(Astro?.params?.fleet_id ?? '')

if (isNaN(fleet_id))
    return HTTP_404_Not_Found()

import type { FleetUI, SRPUI, FleetCompositionUI, FleetRadarUI } from '@dtypes/layout_components'
import type { EveCharacterProfile } from '@dtypes/api.minmatar.org'
import { fetch_fleet_by_id, group_members_by_ship, group_members_by_location } from '@helpers/fetching/fleets'
import { get_fleet_members } from '@helpers/api.minmatar.org/fleets'
import { get_user_character } from '@helpers/fetching/characters'
import { fetch_fleet_srps } from '@helpers/fetching/srp'
import { get_system_id } from '@helpers/sde/map'

let fetch_fleets_error:string | false = false
let fleet:FleetUI | false = false
let user_character:EveCharacterProfile | null = null
let fleet_composition:FleetCompositionUI[] = []
let fleet_radar:FleetRadarUI[] = []
let fleet_srps:SRPUI[] | null = []
let is_fleet_commander = false

try {
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
    user_character = await get_user_character(user.user_id)
    fleet_srps = await fetch_fleet_srps(auth_token as string, fleet_id)
    is_fleet_commander = (user_character?.character_id === fleet.fleet_commander_id)

    if (is_fleet_commander) {
        const staging_solar_system = fleet.location.split(' - ')[0]
        const staging_solar_system_id = await get_system_id(staging_solar_system)

        const members = await get_fleet_members(auth_token as string, fleet_id)
        fleet_composition = await group_members_by_ship(members)
        fleet_radar = await group_members_by_location(members, staging_solar_system_id as number)
    }
} catch (error) {
    if (error.message === 'Error fetching fleet: HTTP error! Status: 403')
        return HTTP_403_Forbidden()
    
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const can_remove_fleet = is_superuser ||
                         user_permissions.includes('fleets.delete_evefleet') ||
                         (user_character as EveCharacterProfile)?.character_id === (fleet as FleetUI).fleet_commander_id

const FLEET_DETAIL_PARTIAL_URL = translatePath(`/partials/fleet_detail_component?fleet_id=${fleet_id}&upcoming=${JSON.stringify(true)}`)

const fleet_tracking_error = Astro.cookies.has('fleet_tracking_error') ? (Astro.cookies.get('fleet_tracking_error')?.value as string) : false
if (Astro.cookies.has('fleet_tracking_error'))
    Astro.cookies.delete('fleet_tracking_error', { path: '/' })

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';

import FleetDetails from '@components/blocks/FleetDetails.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import AddIcon from '@components/icons/buttons/AddIcon.astro';
import FleetIcon from '@components/icons/buttons/FleetIcon.astro';

const page_title = `${t('fleet')} ${fleet_id}`;
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-init={fleet_tracking_error ? `show_alert_dialog( ${JSON.stringify({ title: t('start_fleet_tracking'), content: fleet_tracking_error })} )` : undefined}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <PageTitle>
                    {page_title}
                </PageTitle>
            </FlexInline>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/fleets/upcoming/')}>
                    <FleetIcon slot="icon" />
                    {t('upcoming_fleets')}
                </Button>
                <Button color={'green'} class="[ !hidden lg:!flex ]" href={translatePath('/fleets/add/')}>
                    <AddIcon slot="icon" />
                    {t('schedule_fleet')}
                </Button>
            </FlexInline>
        </FlexInline>

        {fetch_fleets_error ?
            <ErrorRefetch
                args={{
                    partial: FLEET_DETAIL_PARTIAL_URL,
                    message: fetch_fleets_error,
                    delay: 0,
                }}
            />
            :
            <FleetDetails
                fleet={fleet as FleetUI}
                can_remove_fleet={can_remove_fleet}
                is_fleet_commander={is_fleet_commander}
                fleet_composition={fleet_composition}
                fleet_radar={fleet_radar}
                fleet_srps={fleet_srps}
            />
        }
    </PageDefault>
</Viewport>