---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found, HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_add_fleets = is_superuser || user_permissions.includes('fleets.add_evefleet')

import type { FleetItem } from '@dtypes/layout_components'
import { fetch_fleets_auth, fetch_fleets } from '@helpers/fetching/fleets'

let fetch_fleets_error:string | false = false
let fleets:FleetItem[] = []

try {
    fleets = auth_token ? await fetch_fleets_auth(auth_token as string, false) : await fetch_fleets(false)
} catch (error) {
    fetch_fleets_error = prod_error_messages() ? t('fetch_fleets_error') : error.message
}

const FLEET_LIST_PARTIAL_URL = translatePath(`/partials/fleet_list_component?upcoming=${JSON.stringify(false)}`)

const AUTH_REDIRECT_URL = `${translatePath('/redirects/auth_init')}?redirect_url=${Astro.url}`

import { marked } from 'marked';
const AUTH_FLEET_SUBHINT = (marked.parseInline(t('authenticate_fleet_subhint')) as string)
    .replace(
        'AUTH_LINK', AUTH_REDIRECT_URL
    )

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import FleetList from '@components/blocks/FleetList.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import ButtonStack from '@components/blocks/ButtonStack.astro';

import AddIcon from '@components/icons/buttons/AddIcon.astro';


const page_title = t('fleets.history.page_title');
const page_description = t('page_finder.fleets.history.description');
---

<Viewport title={page_title} meta_description={page_description}>
    <PageWide
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover-990.jpg",
            alt: t('fleets.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            fleets_count: ${fleets.length}
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={`\`\${fleets_count} \${fleets_count != 1 ? '${t('fleets').toLowerCase()}' : '${t('fleet').toLowerCase()}'} ${t('in_past_30_days').toLowerCase()}\``}>
                        {fleets.length} {fleets.length != 1 ? t('fleets').toLowerCase() : t('fleet').toLowerCase()} {t('in_past_30_days').toLowerCase()}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                {can_add_fleets &&
                    <Button color={'green'} href={translatePath('/fleets/add')}>
                        <AddIcon slot="icon" />
                        {t('schedule_fleet')}
                    </Button>
                }
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                href={translatePath('/fleets/upcoming')}
                size='sm'
            >
                {t('upcoming_fleets')}
            </Button>
        </FlexInline>
        
        {fetch_fleets_error ?
            <ErrorRefetch
                args={{
                    partial: FLEET_LIST_PARTIAL_URL,
                    message: fetch_fleets_error as string,
                    delay: 0,
                }}
            />
            :
            <Flexblock gap='var(--space-xl)'>
                {!user &&
                    <FlexInline justification='space-between'>
                        <Flexblock gap='var(--space-3xs)'>
                            <p>{t('authenticate_fleet_hint')}</p>
                            <small set:html={AUTH_FLEET_SUBHINT} />
                        </Flexblock>
                    </FlexInline>
                }

                <FleetList fleets={fleets} history={true} />
            </Flexblock>
        }
	</PageWide>
</Viewport>