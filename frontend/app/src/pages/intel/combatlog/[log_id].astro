---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

import { prod_error_messages } from '@helpers/env'

import { fetch_combatlog_by_id } from '@helpers/fetching/combatlog'
import type { CombatLogAnalysis } from '@dtypes/layout_components'

let get_combatlog_error:string | false = false
let combat_log_analysis:CombatLogAnalysis  | null = null

const log_id = parseInt(Astro?.params?.log_id ?? '0')

try {
    if (!(log_id > 0))
        throw new Error(t('invalid_combatlog'))

    combat_log_analysis = await fetch_combatlog_by_id(auth_token, log_id)
} catch (error) {
    get_combatlog_error = prod_error_messages() ? t('get_combatlog_error') : error.message
    console.log(get_combatlog_error)
}

const COMBAT_LOG_PARTIAL_URL = translatePath(`/partials/combatlog_component?log_id=${log_id}`)

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import CombatLogAnalysisComponent from '@components/blocks/CombatLogAnalysisComponent.astro'
import Button from '@components/blocks/Button.astro'
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const page_title = `${t('combatlog')} ${log_id}`;
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageWide
        cover={{
            image: "/images/combatlog-cover.jpg",
            image_990: "/images/combatlog-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <Button href={translatePath('/intel/combatlog/')}>
                    {t('keep_browsing')}
                </Button>
            </FlexInline>
        </FlexInline>
        
        <div id="combatlog">
            {log_id === 0 ?
                <p>{t('invalid_combatlog')}</p> :
                get_combatlog_error ?
                    <ErrorRefetch
                        args={{
                            partial: COMBAT_LOG_PARTIAL_URL,
                            message: get_combatlog_error,
                            delay: 0,
                        }}
                    />
                :
                <CombatLogAnalysisComponent combat_log_analysis={combat_log_analysis as CombatLogAnalysis} />
            }
        </div>
    </PageWide>
</Viewport>