---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

import type { SelectOptions } from '@dtypes/layout_components'
import type { Fitting, SavedCombatLog } from '@dtypes/api.minmatar.org'
import { get_fittings } from '@helpers/api.minmatar.org/ships'
import { get_fleets } from '@helpers/api.minmatar.org/fleets'
import { get_saved_logs } from '@helpers/api.minmatar.org/combatlog'

let saved_logs:SavedCombatLog[] = []
let fittings:Fitting[] = []
let fitting_options:SelectOptions[] = []
let combatlog_selects_error:string | false = false
let fleets:number[] = []
let fleets_options:SelectOptions[] = []

try {
    fittings = await get_fittings()
    fitting_options = fittings.map(fitting => {
        return {
            label: fitting.name,
            value: fitting.id,
        } as SelectOptions
    })

    fleets = await get_fleets(false)
    fleets_options = fleets.map(fleet => {
        return {
            label: `${t('fleet')} ${fleet}`,
            value: fleet,
        } as SelectOptions
    })
} catch (error) {
    combatlog_selects_error = prod_error_messages() ? t('get_fittings_error') : error.message
    console.log(combatlog_selects_error)
}

try {
    saved_logs = user ? await get_saved_logs(auth_token as string, { user_id: user.user_id }) : []
} catch (error) {
    combatlog_selects_error = prod_error_messages() ? t('get_fittings_error') : error.message
    console.log(combatlog_selects_error)
}

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import BlockList from '@components/compositions/BlockList.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import Grid from '@components/compositions/Grid.astro';

import AnalizeCombatLogButton from '@components/blocks/AnalizeCombatLogButton.astro';
import CollapsableButton from '@components/blocks/CollapsableButton.astro';
import FittingCombatLogItem from '@components/blocks/FittingCombatLogItem.astro';
import FleetCombatLogItem from '@components/blocks/FleetCombatLogItem.astro';

import TutorialIcon from '@components/icons/TutorialIcon.astro';

const page_title = t('intel.combatlog.page_title');
const page_description = t('intel.combatlog.leading_text');
---

<Viewport
    title={page_title}
    meta_description={page_description}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageWide
        cover={{
            image: "/images/combatlog-cover.jpg",
            image_990: "/images/combatlog-cover-900.jpg",
            alt: t('intel.combatlog.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <AnalizeCombatLogButton
                    color={'green'}
                    target="#combatlog"
                    fitting_options={fitting_options}
                    fleets_options={fleets_options}
                >
                    {t('paste_combatlog')}
                </AnalizeCombatLogButton>
            </FlexInline>
        </FlexInline>
        
        <div id="combatlog">
            <BlockList gap='var(--space-2xl)'>
                {saved_logs.length > 0 &&
                    <Grid
                        role="list"
                        class="[ w-full grid-fill ]"
                        min_item_width='240px'
                        row_gap='var(--space-3xs)'
                        column_gap='var(--space-3xs)'
                    >
                        {saved_logs.map(log =>
                            <a
                                class="[ items-center flex ]"
                                role="listitem"
                                href={translatePath(`/intel/combatlog/${log.id}`)}
                            >
                                {log.fitting_id > 0 ?
                                    <FittingCombatLogItem log={log} fitting={fittings.find(fitting => fitting.id === log.fitting_id)} /> :
                                    <FleetCombatLogItem log={log} />
                                }
                            </a>
                        )}
                    </Grid>
                }
            </BlockList>

            {saved_logs.length === 0 &&
                <Flexblock
                    centered={true}
                    x-data={`{
                        expanded: false,
                        toggle_collapse() {
                            this.expanded = !this.expanded
                        }
                    }`}
                    gap='var(--space-3xs)'
                >
                    <p class="[ text-center ]">{t('paste_combatlog_hint')}</p>

                    <CollapsableButton x-on:click="toggle_collapse()" class="[ !w-full !max-w-[450px] ]">
                        <FixedFluid
                            width='48'
                            breakpoint='70%'
                            class="[ w-full items-center ]"
                        >
                            <picture class="[ hidden sm:block ]">
                                <TutorialIcon />
                            </picture>
                            <small>{t('paste_combatlog_tutorial')}</small>
                        </FixedFluid>
                    </CollapsableButton>
                
                    <div
                        x-show="expanded"
                        x-collapse.duration.0ms
                        style="display: none"
                    >
                        <video autoplay controls loop class="[ mt-[var(--space-xs)] w-full ]">
                            <source src="/videos/combatlog-tutorial.mp4" type="video/mp4" />
                            Your browser does not support the video tag.
                        </video>
                    </div>
                </Flexblock>
            }
        </div>
	</PageWide>
</Viewport>