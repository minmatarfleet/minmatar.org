---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

import type { SelectOptions } from '@dtypes/layout_components'
import type { Fitting, SavedCombatLog } from '@dtypes/api.minmatar.org'
import { get_fittings } from '@helpers/api.minmatar.org/ships'
import { get_fleets } from '@helpers/api.minmatar.org/fleets'
import { get_saved_logs } from '@helpers/api.minmatar.org/combatlog'

let saved_logs:SavedCombatLog[] = []
let fittings:Fitting[] = []
let fitting_options:SelectOptions[] = []
let combatlog_selects_error:string | false = false
let fleets:number[] = []
let fleets_options:SelectOptions[] = []

try {
    fittings = await get_fittings()
    fitting_options = fittings.map(fitting => {
        return {
            label: fitting.name,
            value: fitting.id,
        } as SelectOptions
    })

    fleets = await get_fleets(false)
    fleets = fleets.sort( (a, b) => { return b - a })
    fleets_options = fleets.map(fleet => {
        return {
            label: `${t('fleet')} ${fleet}`,
            value: fleet,
        } as SelectOptions
    })
} catch (error) {
    combatlog_selects_error = prod_error_messages() ? t('get_fittings_error') : error.message
    console.log(combatlog_selects_error)
}

try {
    saved_logs = user ? await get_saved_logs(auth_token as string, { user_id: user.user_id }) : []
} catch (error) {
    combatlog_selects_error = prod_error_messages() ? t('get_fittings_error') : error.message
    console.log(combatlog_selects_error)
}

const COMBATLOG_LIST_PARTIAL_URL = translatePath('/partials/combatlog_list_component/')

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Grid from '@components/compositions/Grid.astro';

import AnalizeCombatLogButton from '@components/blocks/AnalizeCombatLogButton.astro';
import Button from '@components/blocks/Button.astro';
import CombatLogItem from '@components/blocks/CombatLogItem.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const page_title = t('intel.combatlog.page_title');
const page_description = t('intel.combatlog.leading_text');
---

<Viewport
    title={page_title}
    meta_description={page_description}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageWide
        cover={{
            image: "/images/combatlog-cover.jpg",
            image_990: "/images/combatlog-cover.jpg",
            alt: t('intel.combatlog.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <Button color='green' x-on:click="document.getElementById('analize-combatlog-button').click()">
                    {t('analyze_combatlog')}
                </Button>
            </FlexInline>
        </FlexInline>

        <AnalizeCombatLogButton
            color={'green'}
            target="#combatlog"
            fitting_options={fitting_options}
            fleets_options={fleets_options}
            hidden={true}
        >
            {t('paste_combatlog')}
        </AnalizeCombatLogButton>
        
        <div id="combatlog">
            {combatlog_selects_error ?
                <ErrorRefetch
                    args={{
                        partial: COMBATLOG_LIST_PARTIAL_URL,
                        message: combatlog_selects_error,
                        delay: 0,
                        target: '#pilots-list',
                    }}
                />
                :
                saved_logs.length > 0 ?
                    <Grid
                        role="list"
                        class="[ w-full grid-fill ]"
                        min_item_width='240px'
                        row_gap='var(--space-3xs)'
                        column_gap='var(--space-3xs)'
                    >
                        {saved_logs.map(log =>
                            <a
                                class="[ w-full items-center ]"
                                role="listitem"
                                href={translatePath(`/intel/combatlog/${log.id}`)}
                            >
                                {
                                    log.fitting_id > 0 ?
                                        <CombatLogItem log={log} fitting={fittings.find(fitting => fitting.id === log.fitting_id)} /> :
                                        <CombatLogItem log={log} />
                                }
                            </a>
                        )}
                    </Grid>
                    :
                    <Flexblock
                        centered={true}
                        x-data={`{
                            expanded: false,
                            toggle_collapse() {
                                this.expanded = !this.expanded
                            }
                        }`}
                        gap='var(--space-3xs)'
                    >
                        <p class="[ text-center ]">{t('no_combatlog')}</p>
                    </Flexblock>
                
            }
        </div>
	</PageWide>
</Viewport>