---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)

if (is_prod_mode() && !user_is_superadmin)
    return HTTP_404_Not_Found()

import structures from '@json/page/intel/structures.json';

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import BlockList from '@components/compositions/BlockList.astro';

import StructureListItem from '@components/blocks/StructureListItem.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';
import Button from '@components/blocks/Button.astro';

import AddIcon from '@components/icons/buttons/AddIcon.astro';

const page_title = t('intel.structures.page_title');

let alliances = {};
let regions = {};
structures.forEach((structure) => {
    alliances[structure.alliance] = structure.alliance;
    regions[structure.region] = structure.region;
})

let alliance_filter = [];
let region_filter = [];

for (let i in alliances)
    alliance_filter.push(alliances[i])

for (let i in regions)
    region_filter.push(regions[i])
---

<Viewport title={page_title}>
    <PageWide
        cover={{
            image: "/images/intel-cover.jpg",
            image_990: "/images/intel-cover-990.jpg",
            alt: t('intel.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            structure_name_filter: '',
            alliance_filter: '-1',
            region_filter: '-1',
            structure_count: '${structures.length}',
            text_filter(el) {
                let hit = false;
                const content_to_filter = el.querySelectorAll('p')
    
                content_to_filter.forEach((p) => {
                    if (p.textContent.toLowerCase().includes(this.structure_name_filter.toLowerCase())) {
                        hit = true
                        return false
                    }
                })
                return hit;
            },
            show_item(el) {
                const content_to_filter = el.querySelectorAll('p')
                const show_item =   (
                                        (this.structure_name_filter === '' || this.text_filter(el)) &&
                                        (this.alliance_filter == '-1' || content_to_filter[0].textContent.includes(this.alliance_filter)) &&
                                        (this.region_filter == '-1' || content_to_filter[3].textContent.includes(this.region_filter))
                                    )
    
                return show_item
            }
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={'`'+t('showing')+' ${structure_count} '+t('structure').toLowerCase()+'${structure_count != 1 ? `s` : ``}`'}>
                        {t('showing')} {structures.length} {t('structure').toLowerCase()}{structures.length != 1 ? 's' : ''}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline class="[ !items-start ]">
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="structure_name_filter"
                    x-on:keyup="setTimeout(function () { structure_count = document.querySelectorAll('.structure-item:not([style])').length })"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <Select
                        x-model="region_filter"
                        x-on:change="setTimeout(function () { structure_count = document.querySelectorAll('.structure-item:not([style])').length }, 100)"
                    >
                        <option selected value="-1">Region</option>
                        {region_filter.map((region) =>
                            <option value={region}>{region}</option>    
                        )}
                    </Select>
                </div>

                <div class="[ hidden xl:block ]">
                    <Select
                        x-model="alliance_filter"
                        x-on:change="setTimeout(function () { structure_count = document.querySelectorAll('.structure-item:not([style])').length }, 100)"
                    >
                        <option selected value="-1">Alliance</option>
                        {alliance_filter.map((alliance) =>
                            <option value={alliance}>{alliance}</option>    
                        )}
                    </Select>
                </div>
            </FlexInline>
        </FlexInline>

        <BlockList role="list" gap='var(--space-3xs)'>

            {structures.length == 0 &&
                <Flexblock gap='var(--space-xl)' class="text-center">
                    <p>{t('intel.structures.empty_message')}</p>
                    
                    <Button color={'green'} href={translatePath('/intel/add_structure/')} class="!justify-center">
                        <AddIcon slot="icon" />
                        {t('add_structure')}
                    </Button>
                </Flexblock>
            }

            {structures.map((structure) =>
                <StructureListItem role="listitem" class="[ structure-item ]" structure={structure} x-show="show_item($el)" />
            )}
            
            {structures.length > 0 &&
                <p class="[ text-center ]">{t('no_results')}</p>
            }

        </BlockList>
    </PageWide>
</Viewport>

<style lang="scss">
    :not([style]) ~ p {
        display: none;
    }
</style>