---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)
if (!user_is_superadmin)
    return HTTP_404_Not_Found()

import Viewport from '@layouts/Viewport.astro';

import PageLanding from '@components/page/PageLanding.astro';

import Flexblock from '@components/compositions/Flexblock.astro';

import Input from '@components/blocks/Input.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

const page_title = 'Celestials';
---

<Viewport title={page_title}>
    <PageLanding
        fullscreen={true}
        wide={true}
		x-data={`{
            rotation_x: -3.14,
            rotation_y: 0,
            camera: null,
            moon_angle: 1.4,
            moon_rotation_angle: 0,
            resize_canvas: null,
            celestial_angle: 1.4,
            celestial_rotation_angle: 0,
            planet_rotation_angle: 0,
            resizeCanvasToDisplaySize(canvas) {
                // Lookup the size the browser is displaying the canvas in CSS pixels.
                const displayWidth  = canvas.clientWidth;
                const displayHeight = canvas.clientHeight;
                
                // Check if the canvas is not the same size.
                const needResize = canvas.width  !== displayWidth ||
                                    canvas.height !== displayHeight;
                
                if (needResize) {
                    // Make the canvas the same size
                    canvas.width  = displayWidth;
                    canvas.height = displayHeight;
                }
                
                return needResize;
            },
            update() {
                if (this.camera === null) return

                console.log(this.rotation_x)
                console.log(this.rotation_y)
                this.camera.rotationX = this.rotation_x
                this.camera.rotationY = this.rotation_y
            }
        }`}
        x-effect="update"
    >
        <canvas
            slot="cover"
            id="mainCanvas"
            width="500"
            height="500"
            x-data={`{
                init_ccpwgl() {
                    let canvas
                    let scene
                    const mat4 = ccpwgl_int.math.mat4
                
                    canvas = document.getElementById('mainCanvas');
                    
                    ccpwgl.initialize(canvas, fitting.options);
                    ccpwgl_context = canvas.getContext("webgl");
                    
                    camera = ccpwgl.createCamera(canvas, undefined, true);
                    camera.rotationX = rotation_x
                    camera.rotationY = rotation_y
                    camera.fov = 40
                    camera.minDistance = 2300
                    camera.maxDistance = 20000
                    camera.shift = 100.92
                
                    scene = ccpwgl.loadScene('res:/dx9/scene/universe/m02_cube.red');
                    
                    scene.loadSun('res:/fisfx/lensflare/orange_radiating.red');
                    scene.setSunDirection([-0.5, -0.01, 0.4]);
                
                    const celestial = scene.loadPlanet(
                        40187894,
                        'res:/dx9/model/WorldObject/Planet/Template/SandStorm/p_sandstorm_36.red',
                        undefined,
                        'res:/dx9/model/worldobject/planet/Terrestrial/terrestrial02_h.dds.0.png',
                        'res:/dx9/model/worldobject/planet/Terrestrial/terrestrial02_h.dds.0.png'
                    );
                
                    celestial.setTransform(mat4.fromValues(
                        8000, 0, 0, 0,
                        0, 8000, 0, 0,
                        0, 0, 8000, 0,
                        100000 * Math.cos(1.40), 0, 100000 * Math.sin(1.40), 1
                    ));
                
                    ccpwgl.enablePostprocessing(true);

                    const rotation_timer = setInterval(function () {
                        console.log('transform')
                        const scale = document.querySelector('[data-model="scale"]').value
                        const celestial_angle = document.querySelector('[data-model="celestial_angle"]').value
                        const celestial_x_rotation_angle = document.querySelector('[data-model="celestial_x_rotation_angle"]').value
                        const celestial_y_rotation_angle = document.querySelector('[data-model="celestial_y_rotation_angle"]').value
                        const celestial_z_rotation_angle = document.querySelector('[data-model="celestial_z_rotation_angle"]').value

                        let model = mat4.fromValues(
                            8000, 0, 0, 0,
                            0, 8000, 0, 0,
                            0, 0, 8000, 0,
                            scale * Math.cos(celestial_angle), 0, scale * Math.sin(celestial_angle), 1
                        );

                        let outx = mat4.create()
                        let outy = mat4.create()
                        let outz = mat4.create()
                        outx = mat4.rotateY(outx, model, celestial_x_rotation_angle);
                        outy = mat4.rotateX(outy, outx, celestial_y_rotation_angle);
                        outz = mat4.rotateZ(outz, outy, celestial_z_rotation_angle);
                        celestial.setTransform(outz)
                    }, 50)
                
                    resize_canvas = ccpwgl_context.canvas
                    resizeCanvasToDisplaySize(resize_canvas)
                    ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
                }
            }`}
			x-on:resize.window.throttle="resizeCanvasToDisplaySize(resize_canvas)"
            x-init="$nextTick(() => init_ccpwgl())"
        />

        <Flexblock class="[ camera-controls ]">
            <FlexInline class="[ !items-start ]" justification='space-between'>
                <Flexblock>
                    <h4>Celestial Controls</h4>
                    <Flexblock gap='0'>
                        <label>Distance</label>
                        <Input type="range" class="transform" data-model="scale" value="28319" min="0" max="100000" step="1" />
                    </Flexblock>
                    <Flexblock gap='0'>
                        <label>Rotation angle</label>
                        <Input type="range" class="transform" data-model="celestial_angle" value="1.40" min="-2.09" max="2.09" step="0.01" />
                    </Flexblock>
                    <Flexblock gap='0'>
                        <label>X Rotation angle</label>
                        <Input type="range" class="transform" data-model="celestial_x_rotation_angle" value="0" min="-2.09" max="2.09" step="0.01" />
                    </Flexblock>
                    <Flexblock gap='0'>
                        <label>Y Rotation angle</label>
                        <Input type="range" class="transform" data-model="celestial_y_rotation_angle" value="0" min="-2.09" max="2.09" step="0.01" />
                    </Flexblock>
                    <Flexblock gap='0'>
                        <label>Z Rotation angle</label>
                        <Input type="range" class="transform" data-model="celestial_z_rotation_angle" value="0" min="-2.09" max="2.09" step="0.01" />
                    </Flexblock>
                </Flexblock>

                <Flexblock>
                    <h4>Camera Controls</h4>
                    <Flexblock gap='0'>
                        <label>{t('rotation_x')}</label>
                        <Input type="range" x-model="rotation_x" min="-3.14" max="3.14" step="0.01" />
                    </Flexblock>
                    <Flexblock gap='0'>
                        <label>{t('rotation_y')}</label>
                        <Input type="range" x-model="rotation_y" min="-3.14" max="3.14" step="0.01" />
                    </Flexblock>
                </Flexblock>
            </FlexInline>
        </Flexblock>
    </PageLanding>
</Viewport>

<style lang="scss">
	.camera-controls {
		position: fixed;
		bottom: 60px;
		left: 100px;
		width: 500px;
	}
</style>

<style is:global>

    #mainCanvas {
        border: none;
        position:fixed;
        width:100%;
        height:100%;
		/*z-index: -1;*/
    }

</style>