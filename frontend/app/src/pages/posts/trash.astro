---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { query_string } from '@helpers/string';
import { prod_error_messages } from '@helpers/env'
import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token')?.value : false
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

if (!auth_token || !user)
    return HTTP_403_Forbidden()

import type { PostListUI } from '@dtypes/layout_components'
import { fetch_user_posts } from '@helpers/fetching/posts'
import { get_user_permissions } from '@helpers/permissions'

const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_manage_posts = is_superuser || user_permissions.includes('posts.add_evepost')

if (!can_manage_posts)
    return HTTP_403_Forbidden()

let posts:PostListUI[] = []
let fetch_user_posts_error:string | false = false

try {
    posts = await fetch_user_posts({
        user_id: user.user_id,
    })
    posts = posts.filter(post => post.state === 'trash')
} catch (error) {
    fetch_user_posts_error = prod_error_messages() ? t('get_all_corporations_error') : error.message
}

const USER_POST_LIST_PARTIAL_URL = `${translatePath('/partials/user_post_list_component/')}?state=trash`

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import Input from '@components/blocks/Input.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';
import UserPosts from '@components/blocks/UserPosts.astro';

const page_title = t('posts_trash.page_title');
---

<Viewport
    title={page_title}
    meta_description={t('alliance.meta_description')}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageWide
        cover={{
            image: "/images/posts-trash-cover.jpg",
            image_990: "/images/posts-trash-cover.jpg",
            scrollable: true,
            overlay: true
        }}
        wide={true}
        x-data={`{
            post_name_filter: '',
            posts_count: '${posts.length}',
            countVisibleElements(selector, parent = document) {
                const elements = parent.querySelectorAll(selector)
                let visible_count = 0

                elements.forEach(element => {
                    const is_visible = element.offsetParent !== null
                    if (is_visible)
                        visible_count++
                })

                return visible_count
            },
            show_item(el) {
                const content_to_filter = el.querySelectorAll('h3')
                const show_item = ( this.fitting_name_filter === '' || content_to_filter[0].textContent.toLowerCase().includes(this.post_name_filter.toLowerCase()) )

                return show_item
            },
        }`}
    >
        <FlexInline
            slot="header"
            justification='space-between'
            class="[ w-full ]"
            x-bind:class="{ '!items-start': !sticky }"
        >
            <Flexblock gap="var(--space-3xs)">
                <PageTitle>
                    {page_title}
                </PageTitle>
                <small x-text={`\`${t('showing')} \${posts_count} \${posts_count != 1 ? '${t('posts').toLowerCase()}' : '${t('post').toLowerCase()}'}\``}>
                    {t('showing')} {posts.length} {posts.length != 1 ? t('posts').toLowerCase() : t('post').toLowerCase()}
                </small>
            </Flexblock>
            <Input type="text"
                placeholder={t('filter')}
                x-model="post_name_filter"
                x-on:keyup="setTimeout(function () { posts_count = countVisibleElements('h3') })"
            >
                <MagnifierIcon slot="icon" />
            </Input>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                href={`${translatePath('/redirect')}?${query_string({ route: '/posts/new' })}`}
                size='sm'
                color='green'
            >
                {t('create_post')}
            </Button>
            <Button
                href={translatePath('/posts/')}
                size='sm'
            >
                {t('posts')}
            </Button>
        </FlexInline>

        {fetch_user_posts_error ?
            <ErrorRefetch
                args={{
                    partial: USER_POST_LIST_PARTIAL_URL,
                    message: fetch_user_posts_error,
                    delay: 0,
                }}
            />
            :
            <UserPosts posts={posts} trash={true} />
        }

    </PageWide>
</Viewport>