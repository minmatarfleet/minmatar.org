---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

import { get_characters } from '@helpers/api.minmatar.org/characters'

if (Astro.request.method !== "GET") Astro.redirect(translatePath('/'))

let token:string | null = null
let user:User | null = null

try {
    const error = Astro.url.searchParams.get('error') as string
    const id = Astro.url.searchParams.get('id') as string

    if (error) {
        const error_text = t(error as any)
        const error_message = error_text !== undefined ? error_text : t('exchange_token_failed')
        throw new Error(`${error_message}. ${t('code_hint').replace('CODE', id ?? '---')}`)
    }

    token = Astro.url.searchParams.get('token') as string

    if (!token)
        throw new Error(t('invalid_token'))
    
    user = jose.decodeJwt(token)
    await get_characters(token)
} catch (error) {
    Astro.cookies.set('auth_error', error.message, { path: '/' })
    return Astro.redirect(translatePath('/'))
}

const ONE_DAY_IN_MS = 24*60*60*1000
const in_180_days = new Date(new Date().getTime()+(180*ONE_DAY_IN_MS))
Astro.cookies.set('auth_token', token, { path: '/', expires: in_180_days })
Astro.cookies.set('avatar', user?.avatar ?? '', { path: '/', expires: in_180_days })

const redirect = Astro.cookies.has('redirect_after_auth') ? (Astro.cookies.get('redirect_after_auth')?.value as string) : translatePath('/account/')
Astro.cookies.delete('redirect_after_auth', { path: '/' })

return Astro.redirect(redirect)
---