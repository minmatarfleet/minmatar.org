---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

const { fitting_id } = Astro.params;

import type { FittingGroup, Module, CargoItem } from '@dtypes/layout_components';
import { get_fitting_by_id } from '@helpers/api.minmatar.org/ships'
import type { Fitting } from '@dtypes/api.minmatar.org'

let fitting:Fitting | null = null
let get_fitting_error:string | false = false

try {
    fitting = await get_fitting_by_id(parseInt(fitting_id ?? '0'))
} catch (error) {
    get_fitting_error = prod_error_messages() ? t('get_fitting_error') : error.message
}

if (!fitting)
    throw new Error(t('invalid_fitting'))

import { get_item_icon } from '@helpers/eve_image_server';
import { parse_eft } from '@helpers/fit_parser.ts';
import { get_item_id } from '@helpers/sde/items'
import { strip_markdown } from '@helpers/string'
import { format_date_short } from '@helpers/date';

const fitting_parsed = await parse_eft(fitting?.eft_format ?? '')
const ship_id = await get_item_id(fitting_parsed?.ship_name as string)

function transform_into_cargohold(input: Module[]): CargoItem[] {
    const output: CargoItem[] = [];
    
    input.forEach(item => {
        if (item === null) return

        const existingItem = output.find(i => i.name === item.name);

        if (existingItem) {
            existingItem.amount++;
        } else {
            output.push({
                id: item.id,
                name: item.name,
                amount: 1
            });
        }
    });
    
    return output;
}

let fitting_groups:FittingGroup[] = []

if (fitting_parsed?.high_slots?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('high_power'),
        modules: transform_into_cargohold(fitting_parsed?.high_slots ?? [])
    })
}

if (fitting_parsed?.med_slots?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('medium_power'),
        modules: transform_into_cargohold(fitting_parsed?.med_slots ?? [])
    })
}

if (fitting_parsed?.low_slots?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('low_power'),
        modules: transform_into_cargohold(fitting_parsed?.low_slots ?? [])
    })
}

if (fitting_parsed?.rig_slots?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('rig_slot'),
        modules: transform_into_cargohold(fitting_parsed?.rig_slots ?? [])
    })
}

if (fitting_parsed?.subsystem_slots?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('subsystems'),
        modules: transform_into_cargohold(fitting_parsed?.subsystem_slots ?? [])
    })
}

if (fitting_parsed?.drones?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('drones'),
        modules: fitting_parsed?.drones ?? []
    })
}

if (fitting_parsed?.cargohold?.length ?? 0 > 0) {
    fitting_groups.push({
        name: t('cargo_hold'),
        modules: fitting_parsed?.cargohold ?? []
    })
}

import { marked } from 'marked';

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import Fit from '@components/blocks/Fit.astro';
import Button from '@components/blocks/Button.astro';
import ClipboardButton from '@components/blocks/ClipboardButton.astro';

const render_view = translatePath(`/ships/fitting/render/${fitting_id}`)

const page_title = fitting?.name ?? ''
const page_description = await strip_markdown(fitting?.description ?? '')
---

<script define:vars={{ render_view }}>
    const render_enabled = JSON.parse(localStorage.getItem('_x_render_enabled') ?? 'true')

    if (window.innerWidth > 1820 && render_enabled === true)
        window.location.href = render_view
</script>

<Viewport title={page_title} meta_description={page_description}>
    <PageDefault
        cover={{
            image: "/images/fits-cover.jpg",
            image_990: "/images/fits-cover.jpg",
            alt: t('fitting.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            render_enabled: $persist(true),
            show_rendering_options: $persist(true),
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <FlexInline>
                    <img loading="lazy" height="64" width="64" src={get_item_icon(ship_id as number)} alt={fitting_parsed?.ship_name} />
                    <Flexblock gap='var(--space-3xs)'>
                        <PageTitle>{page_title}</PageTitle>
                        <small>{t('last_updated')} {format_date_short(lang, fitting?.updated_at ?? '')}</small>
                    </Flexblock>
                </FlexInline>
            </FlexInline>
            <FlexInline>
                <div 
                    x-show="window.innerWidth > 1820"
                    style="display: none"
                >
                    <Button
                        class="[ animate-fade-in ]"
                        x-on:click=`render_enabled = true; show_rendering_options = true; window.location.href = '${render_view}'`
                    >
                        {t('enable_rendering')}
                    </Button>
                </div>
                
                <ClipboardButton id="fit-clipboard" size='lg'>
                    {fitting?.eft_format as string}
                </ClipboardButton>
            </FlexInline>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <Flexblock set:html={marked.parse(fitting?.description as string)} />
            </TextBox>
            
            <Fit fitting_groups={fitting_groups} />
        </Flexblock>
    </PageDefault>
</Viewport>

<style>
    #fit-clipboard {
        display: none;
    }
</style>