---
import { i18n } from '@helpers/i18n'
const { t } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { FittingItem } from '@dtypes/layout_components'
import { fetch_fittings } from '@helpers/fetching/ships'

let fittings:FittingItem[] = []
let get_fittings_error:string | false = false

try {
    fittings = await fetch_fittings()
} catch (error) {
    get_fittings_error = prod_error_messages() ? t('get_fittings_error') : error.message
}

let fitting_type = {};
let ship_type = {};
fittings.forEach((fitting) => {
    fitting_type[fitting.fitting_type] = fitting.fitting_type;
    ship_type[fitting.ship_type] = fitting.ship_type;
})

let fitting_type_filter = [];
let ship_type_filter = [];

for (let i in fitting_type)
    fitting_type_filter.push(fitting_type[i])

for (let i in ship_type)
    ship_type_filter.push(ship_type[i])

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import BlockList from '@components/compositions/BlockList.astro';

import FitItem from '@components/blocks/FitItem.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const page_title = t('fitting.list.page_title');
---

<Viewport
    title={page_title}
    meta_description={t('fitting.meta_description')}
>
    <PageWide
        cover={{
            image: "/images/fits-cover.jpg",
            image_990: "/images/fits-cover-990.jpg",
            alt: t('fitting.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            fitting_name_filter: '',
            fitting_type_filter: '-1',
            ship_type_filter: '-1',
            fits_count: '${fittings.length}',
            show_item(el) {
                const content_to_filter = el.querySelectorAll('p')
                const show_item =   (
                                        (this.fitting_name_filter === '' || content_to_filter[0].textContent.toLowerCase().includes(this.fitting_name_filter.toLowerCase())) &&
                                        (this.fitting_type_filter == '-1' || content_to_filter[1].textContent.includes(this.fitting_type_filter)) &&
                                        (this.ship_type_filter == '-1' || content_to_filter[2].textContent.includes(this.ship_type_filter))
                                    )

                return show_item
            }
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={'`'+t('showing')+' ${fits_count} '+t('fitting').toLowerCase()+'${fits_count != 1 ? `s` : ``}`'}>
                        {t('showing')} {fittings.length} {t('fitting').toLowerCase()}{fittings.length != 1 ? 's' : ''}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline class="[ !items-start ]">
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="fitting_name_filter"
                    x-on:keyup="setTimeout(function () { fits_count = document.querySelectorAll('.fit-item:not([style])').length })"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <Select
                        x-model="fitting_type_filter"
                        x-on:change="setTimeout(function () { fits_count = document.querySelectorAll('.fit-item:not([style])').length }, 100)"
                    >
                        <option selected value="-1">{t('fitting_type')}</option>
                        {fitting_type_filter.map((option) => 
                            <option value={option}>{option}</option>
                        )}
                    </Select>
                </div>

                <div class="[ hidden xl:block ]">
                    <Select
                        x-model="ship_type_filter"
                        x-on:change="setTimeout(function () { fits_count = document.querySelectorAll('.fit-item:not([style])').length }, 100)"
                    >
                        <option selected value="-1">{t('ship_type')}</option>
                        {ship_type_filter.map((option) => 
                            <option value={option}>{option}</option>
                        )}
                    </Select>
                </div>
            </FlexInline>
        </FlexInline>

        <BlockList role="list" gap='var(--space-3xs)'>
            {fittings.map((fitting) =>
                <FitItem
                    role="listitem"
                    class="[ fit-item ]"
                    fitting={fitting}
                    x-show="show_item($el)"
                />
            )}
            
            <p class="[ text-center ]">{t('no_results')}</p>

        </BlockList>
    </PageWide>
</Viewport>

<style lang="scss">
    :not([style]) ~ p {
        display: none;
    }
</style>