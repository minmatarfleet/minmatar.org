---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)

import { prod_error_messages } from '@helpers/env'

const { fitting_id } = Astro.params;
const show_controls = Astro.url.searchParams.get('controls') ?? null

import { get_fitting_by_id } from '@helpers/api.minmatar.org/ships'
import type { Fitting } from '@dtypes/api.minmatar.org'

let fitting:Fitting
let get_fitting_error:string | false = false

try {
    fitting = await get_fitting_by_id(parseInt(fitting_id))
} catch (error) {
    get_fitting_error = prod_error_messages() ? t('get_fitting_error') : error.message
}

import { marked } from 'marked';
import { get_module_model } from '@helpers/sde/modules'
import ccpwgl_turrets from '@/data/ccpwgl_turrets.json'
import { get_item_id } from '@helpers/sde/items'
import { get_ship_dna } from '@helpers/ccpwgl'
import { get_item_icon } from '@helpers/eve_image_server';
import { format_date_short } from '@helpers/date';
import { parse_eft } from '@helpers/fit_parser.ts';

const fitting_parsed = await parse_eft(fitting.eft_format)
let turrets:string[] = []

await Promise.all(fitting_parsed?.high_slots.map(async (module, index) => {
    const res = module?.id ? await get_module_model(module.id) : null
    if (res && ccpwgl_turrets.includes(module.module_type))
        turrets.push(res)
}))

const DEFAULT_ZOOM = 3
const TECH_III_ZOOM = 8
const ship_id = await get_item_id(fitting_parsed.ship_name)
const ship_dna = await get_ship_dna(ship_id, fitting_parsed.subsystem_slots)

const CAMERA_ZOOM = fitting_parsed?.subsystem_slots?.length > 0 ? TECH_III_ZOOM : DEFAULT_ZOOM

import Viewport from '@layouts/Viewport.astro';

import PageLanding from '@components/page/PageLanding.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import Wrapper from '@components/compositions/Wrapper.astro';

import FittingCustom from '@components/blocks/FittingCustom.astro';
import Button from '@components/blocks/Button.astro';
import Cargohold from '@components/blocks/CargoHold.astro';
import ButtonStack from '@components/blocks/ButtonStack.astro';
import CollapsibleBlock from '@components/blocks/CollapsibleBlock.astro';
import Input from '@components/blocks/Input.astro';

import ClipboardIcon from '@components/icons/buttons/ClipboardIcon.astro';
import FitsEvEIcon from '@components/icons/FitsEvEIcon.astro';
import CargoHoldEvEIcon from '@components/icons/CargoHoldEvEIcon.astro';
import DronesEvEIcon from '@components/icons/DronesEvEIcon.astro';

const normal_view = translatePath(`/ships/fitting/normal/${fitting_id}`)

const page_title = fitting_parsed.name;
---

<script define:vars={{ normal_view }}>
    const render_enabled = JSON.parse(localStorage.getItem('_x_render_enabled'))

    if (window.innerWidth < 1820 || render_enabled === false)
        window.location.href = normal_view
</script>

<Viewport title={page_title}>
    <PageLanding
        cover={{
            image: "/images/fitting-cover.jpg",
            image_990: "/images/fitting-cover.jpg",
            alt: t('fitting.render.cover_alt'),
            animated: false,
        }}
        fullscreen={true}
        wide={true}
        x-data={`{
            render_enabled: $persist(true),
            show_rendering_options: $persist(true),
            rotation_x: -0.317,
            rotation_y: 0.229,
            ship_rotation: 0,
            camera: null,
            update() {
                if (!this.camera) return

                this.camera.rotationX = this.rotation_x
                this.camera.rotationY = this.rotation_y
            }
        }`}
    >
        <canvas
            slot="cover"
            id="mainCanvas"
            width="500"
            height="500"
            x-effect="update"
            x-data={`{
                init_ccpwgl() {
                    if (${ship_dna === null})
                        return;

                    let ship
                    let canvas
                    let scene
                    let siege_state = ccpwgl.ShipSiegeState.SIEGE
                    let animation_timer
            		const mat4 = ccpwgl_int.math.mat4

                    canvas = document.getElementById('mainCanvas');
                    
                    ccpwgl.initialize(canvas, fitting.options);
                    ccpwgl_context = canvas.getContext("webgl");
                    
                    camera = ccpwgl.createCamera(canvas, undefined, true);
                    camera.rotationX = rotation_x
                    camera.rotationY = rotation_y
                    camera.shift = 0.25

                    scene = ccpwgl.loadScene('res:/dx9/scene/universe/m10_cube.red'); // Minmatar skybox
                    // scene = ccpwgl.loadScene('res:/dx9/scene/wormholes/wormhole_class_00.red');
                    scene.loadSun('res:/fisfx/lensflare/blue_small.red');
                    scene.setSunDirection([-1, 0, 0.7]);
                    
                    ship = scene.loadShip(${JSON.stringify(ship_dna)}, function() {
                        camera.focus(this, ${CAMERA_ZOOM})
                        animation_timer = setTimeout(enter_siege_mode, 50000)
                    });

                    function enter_siege_mode() {
                        console.log('Entering siege mode...')
                        ship.setSiegeState(ccpwgl.ShipSiegeState.SIEGE)
                        animation_timer = setTimeout(auto_fire_guns, 15000)
                    }

                    function auto_fire_guns() {
                        fire_guns()
                        animation_timer = setTimeout(leave_siege_mode, 5000)
                    }
                    
                    function fire_guns() {
                        console.log('firing...')

                        pt = {
                            0: 15219.994140625,
                            1: -897.7669067382812,
                            2: -10204.6015625,
                            3: 0.00005102222348796204,
                        }
                        
                        for (let i = 0; i < ${turrets.length}; i++) {
                            ship.setTurretTargetPosition(i + 1, pt);
                            ship.setTurretState(i + 1, ccpwgl.TurretState.FIRING);
                        }
                    }

                    function leave_siege_mode() {
                        console.log('Leaving siege mode...')

                        ship.setSiegeState(ccpwgl.ShipSiegeState.NORMAL)
                        animation_timer = setTimeout(enter_siege_mode, 50000)
                    }

                    function fit_turret(ship, res, slot) {
                        if (res)
                            ship.mountTurret(slot, res)
                        else
                            ship.removeTurret(slot)
                    }

                    ${JSON.stringify(turrets)}.map((res, index) => {
                        fit_turret(ship, res, index + 1)
                    })

                    ccpwgl.enablePostprocessing(true);

                    document.addEventListener('astro:after-swap', () => {
                        clearTimeout(animation_timer)
                    })

                    canvas.addEventListener('mousedown', function (event)
                    {
                        if (event.button !== 2)
                            return
                        
                        fire_guns(ship)

                        event.preventDefault();
                    });
                    canvas.addEventListener('contextmenu', function (event) { event.preventDefault(); });

                    function resizeCanvasToDisplaySize(canvas) {
						// Lookup the size the browser is displaying the canvas in CSS pixels.
						const displayWidth  = canvas.clientWidth;
						const displayHeight = canvas.clientHeight;
						
						// Check if the canvas is not the same size.
						const needResize = canvas.width  !== displayWidth ||
											canvas.height !== displayHeight;
						
						if (needResize) {
							// Make the canvas the same size
							canvas.width  = displayWidth;
							canvas.height = displayHeight;
						}
						
						return needResize;
					}

					resizeCanvasToDisplaySize(ccpwgl_context.canvas)
					ccpwgl_context.viewport(0, 0, ccpwgl_context.canvas.width, ccpwgl_context.canvas.height)
                }
            }`}
            x-init="$nextTick(() => init_ccpwgl())"
        />

        <Wrapper
            class="[ left-panel ]"
            padding_inline='0'
            padding_block='var(--space-xl)'
            max_width='650px'
        >
            <Flexblock gap='var(--space-3xl)'>
                <Flexblock gap='var(--space-xl)'>
                    <FlexInline justification='space-between'>
                        <FlexInline>
                            <img loading="lazy" height="64" width="64" src={get_item_icon(ship_id)} alt={fitting_parsed.ship_name} />
                            <Flexblock gap='var(--space-3xs)'>
                                <PageTitle>{page_title}</PageTitle>
                                <small>{t('last_updated')} {format_date_short(lang, fitting.updated_at)}</small>
                            </Flexblock>
                        </FlexInline>
                        <ButtonStack>
                            <Button
                                onclick="copyFitToClipboard('fit-clipboard', 'Fit copied (EFT Format): ')"
                                size='sm'
                            >
                                <ClipboardIcon slot="icon" />
                                {t('copy')}
                            </Button>
                        </ButtonStack>
                    </FlexInline>
                    
                    <Flexblock set:html={marked.parse(fitting.description)} />
                </Flexblock>

                <Flexblock gap='var(--space-3xs)'>
                    <CollapsibleBlock padding_inline='var(--space-xl)'>
                        <FlexInline slot="head" gap='var(--space-2xs)'>
                            <FitsEvEIcon />
                            <h3>{t('fitting')}</h3>
                        </FlexInline>
                        <pre class="[ eve-html ]" set:html={fitting.eft_format} />
                    </CollapsibleBlock>

                    {fitting_parsed?.drones?.length > 0 &&
                        <Cargohold cargo={fitting_parsed.drones}>
                            <FlexInline gap='var(--space-2xs)'>
                                <DronesEvEIcon />
                                <h3>{t('drone_bay')}</h3>
                            </FlexInline>
                        </Cargohold>
                    }

                    {fitting_parsed?.cargohold?.length > 0 &&
                        <Cargohold cargo={fitting_parsed.cargohold}>
                            <FlexInline gap='var(--space-2xs)'>
                                <CargoHoldEvEIcon />
                                <h3>{t('cargo_hold')}</h3>
                            </FlexInline>
                        </Cargohold>
                    }
                </Flexblock>

                <Flexblock
                    class="[ animate-fade-in-up ]"
                    x-show="show_rendering_options"
                    style="display: none"
                >
                    <small>{t('rendering_issues_message')}</small>
                    <FlexInline>
                        <Button
                            size='sm'
                            x-on:click=`render_enabled = false; navigate('${normal_view}')`
                        >
                            {t('disable_rendering')}
                        </Button>

                        <Button
                            size='sm'
                            x-on:click="show_rendering_options = false"
                        >
                            {t('dont_show_anymore')}
                        </Button>
                    </FlexInline>
                </Flexblock>
            </Flexblock>
        </Wrapper>

        <FittingCustom
            fitting={fitting_parsed}
        />

        {(user_is_superadmin && show_controls) &&
            <Flexblock class="[ camera-controls ]">
                <Flexblock gap='0'>
                    <label for="doctrine">{t('rotation_x')}</label>
                    <Input type="number" x-model="rotation_x" step="0.001" />
                </Flexblock>
                <Flexblock gap='0'>
                    <label for="doctrine">{t('rotation_y')}</label>
                    <Input type="number" x-model="rotation_y" step="0.001" />
                </Flexblock>
            </Flexblock>
        }
    </PageLanding>
</Viewport>

<textarea id="fit-clipboard" set:html={fitting.eft_format}></textarea>

<style lang="scss">
    .camera-controls {
		position: fixed;
		bottom: 60px;
		right: 60px;
		width: 250px;
	}

    #fit-clipboard {
        display: none;
    }

    .left-panel {
        position: absolute;
    }
</style>

<style is:global>

    #mainCanvas {
        border: none;
        position:fixed;
        width:100%;
        height:100%
    }

</style>