---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { DoctrineType } from '@dtypes/layout_components'
import { fetch_doctrines } from '@helpers/fetching/doctrines'

let doctrines:DoctrineType[] = []
let fetch_doctrines_error:string

try {
    doctrines = await fetch_doctrines()
} catch (error) {
    fetch_doctrines_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}

const are_sigs_doctrines = doctrines.find((doctrine) => doctrine.sigs.length > 0)

const DOCTRINES_PARTIAL_URL = translatePath(`/partials/doctrines_component`)

import { marked } from 'marked';

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import Button from '@components/blocks/Button.astro';
import DoctrineItem from '@components/blocks/DoctrineItem.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const page_title = t('doctrines.page_title');
const page_description = t('doctrines.alliance.page_leading_text');
---

<Viewport title={page_title} meta_description={page_description}>
    <PageWide
        cover={{
            image: "/images/doctrines-cover.jpg",
            image_990: "/images/doctrines-cover-990.jpg",
            alt: t('doctrines.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            show_all: $persist(false),
            doctrines_count: ${doctrines.length},
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={`\`\${doctrines_count} \${doctrines_count != 1 ? '${t('doctrines').toLowerCase()}' : '${t('doctrine').toLowerCase()}'}\``}>
                        {doctrines.length} {doctrines.length != 1 ? t('doctrines').toLowerCase() : t('doctrines').toLowerCase()}
                    </small>
                </Flexblock>
            </FlexInline>
        </FlexInline>

        {are_sigs_doctrines &&
            <FlexInline slot="subheader">
                <Button
                    type="button"
                    size='sm'
                    x-on:click="show_all = !show_all"
                    x-text={`show_all ? '${t('hide_sigs_doctrines')}' : '${t('show_sigs_doctrines')}'`}
                >
                    {t('show_sigs_doctrines')}
                </Button>
            </FlexInline>
        }

        <Flexblock gap="var(--space-xl)">
            <TextBox set:html={marked.parse(t('doctrines.alliance.page_leading_text'))} />

                {fetch_doctrines_error ?
                    <ErrorRefetch
                        args={{
                            partial: DOCTRINES_PARTIAL_URL,
                            message: fetch_doctrines_error,
                            delay: 0,
                        }}
                    />
                    :
                    <Flexblock role="list" gap='var(--space-3xs)'>
                        {doctrines.map((doctrine) =>
                            <ComponentBlock x-show={`(${doctrine.sigs.length > 0}) ? show_all : true`}>
                                <DoctrineItem role="listitem" doctrine={doctrine} />
                            </ComponentBlock>
                        )}
                    </Flexblock>
                }
        </Flexblock>
    </PageWide>
</Viewport>