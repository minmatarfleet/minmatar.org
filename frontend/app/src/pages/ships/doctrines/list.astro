---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'

import type { DoctrineType, DoctrineTypes } from '@dtypes/layout_components'
import { doctrine_types } from '@dtypes/layout_components'
import { fetch_doctrines } from '@helpers/fetching/doctrines'

let doctrines:DoctrineType[] = []
let fetch_doctrines_error:string | null = null

interface GroupedDoctrines {
    type:       DoctrineTypes;
    doctrines:  DoctrineType[];
}

let doctrines_by_groups:GroupedDoctrines[] = []

try {
    doctrines = await fetch_doctrines()

    doctrine_types.forEach((doctrine_type) => {
        doctrines_by_groups.push({
            type: doctrine_type,
            doctrines: doctrines.filter((doctrine) => doctrine.type === doctrine_type)
        })
    })
} catch (error) {
    fetch_doctrines_error = prod_error_messages() ? t('fetch_doctrines_error') : error.message
}

const are_sigs_doctrines = doctrines.find((doctrine) => doctrine.sigs.length > 0)

const DOCTRINES_PARTIAL_URL = translatePath(`/partials/doctrines_component`)

import { semantic_list } from '@helpers/array';

import Viewport from '@layouts/Viewport.astro';

import PageWide from '@components/page/PageWide.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Grid from '@components/compositions/Grid.astro';

import Button from '@components/blocks/Button.astro';
import DoctrineCard from '@components/blocks/DoctrineCard.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const page_title = t('doctrines.page_title');
---

<Viewport
    title={page_title}
    meta_description={t('doctrines.alliance.meta_description')}
>
    <PageWide
        cover={{
            image: "/images/doctrines-cover.jpg",
            image_990: "/images/doctrines-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            show_all: $persist(false),
            doctrines_count: ${doctrines.length},
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={`\`\${doctrines_count} \${doctrines_count != 1 ? '${t('doctrines').toLowerCase()}' : '${t('doctrine').toLowerCase()}'}\``}>
                        {doctrines.length} {doctrines.length != 1 ? t('doctrines').toLowerCase() : t('doctrines').toLowerCase()}
                    </small>
                </Flexblock>
            </FlexInline>
        </FlexInline>

        {are_sigs_doctrines &&
            <FlexInline slot="subheader">
                <Button
                    type="button"
                    size='sm'
                    x-on:click="show_all = !show_all"
                    x-text={`show_all ? '${t('hide_sigs_doctrines')}' : '${t('show_sigs_doctrines')}'`}
                >
                    {t('show_sigs_doctrines')}
                </Button>
            </FlexInline>
        }

        {fetch_doctrines_error ?
            <ErrorRefetch
                args={{
                    partial: DOCTRINES_PARTIAL_URL,
                    message: fetch_doctrines_error,
                    delay: 0,
                }}
            />
            :
            <Flexblock role="list" gap='var(--space-2xl)'>
                {doctrines_by_groups.map((doctrines_by_group) => {
                    const doctrines = [
                        <Flexblock class="[ doctrine-groups ]" gap='var(--space-xl)'>
                            <TextBox>
                                <Flexblock>
                                    <h2>{t(doctrines_by_group.type as any)}</h2>
                                    <p>{t(`${doctrines_by_group.type}_description` as any)}</p>
                                </Flexblock>
                            </TextBox>
                        
                            <Grid
                                role="list"
                                class="[ w-full grid-fill ]"
                                min_item_width='240px'
                                row_gap='var(--space-3xs)'
                                column_gap='var(--space-3xs)'
                            >
                                {doctrines_by_group.doctrines.map((doctrine) =>
                                    <a
                                        class="[ doctrine-card-container ]"
                                        x-show={`(${doctrine.sigs.length > 0}) ? show_all : true`}
                                        href={translatePath(`/ships/doctrines/list/${doctrine.id}`)}
                                    >
                                        <DoctrineCard
                                            doctrine={doctrine}
                                            subtitle={semantic_list(lang, doctrine.primary_fittings.map((primary_fitting) => primary_fitting.ship_name))}
                                        />
                                    </a>
                                )}
                            </Grid>
                        </Flexblock>
                    ]

                    if (doctrines_by_group.doctrines.length > 0)
                        return doctrines
                })}
            </Flexblock>
        }
    </PageWide>
</Viewport>

<style lang="scss">
    .doctrine-groups:not(:has(.doctrine-card-container:not([style="display: none;"]))) {
        border: 0;
        clip: rect(0 0 0 0);
        height: auto;
        margin: 0;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
        white-space: nowrap;
        left: 0;
        top: 0;
    }
</style>