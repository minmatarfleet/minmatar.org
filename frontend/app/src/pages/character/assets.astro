---
import { i18n } from '@helpers/i18n'
const { t, translatePath } = i18n(Astro.url)

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

if (!user.is_superuser && !user_permissions.includes('eveonline.view_evecharacter'))
    return HTTP_404_Not_Found()

const character_id = parseInt(Astro.url.searchParams.get('character_id'))
if (isNaN(character_id))
    return HTTP_404_Not_Found()

import type { AssetsUI, CharacterBasic, SelectOptions } from '@dtypes/layout_components'
import { get_assets } from '@helpers/fetching/characters'

let character_assets:AssetsUI = {
    character_id: 0,
    character_name: '',
    locations: [],
    location_icons: [],
}
let get_character_assets_error:string | false = false
try {
    character_assets = await get_assets(auth_token, character_id)
    
    const location_icons_sorted = character_assets.location_icons.map((i) => {
        i.assets = i.assets.sort((a, b) => a.name.localeCompare(b.name))
        return i
    })

    character_assets.location_icons = location_icons_sorted
} catch (error) {
    get_character_assets_error = prod_error_messages() ? t('get_character_assets_error') : error.message
}

const ASSETS_LIST_PARTIAL_URL = translatePath('/partials/assets_list_component')

// const assets_stations:string[] = character_assets.locations.map( (location):string => location.location_name )
let assets_stations:string[] = []
let location_options:SelectOptions[] = []

character_assets.locations.map( (location) => {
    if (!assets_stations.includes(location.location_name)) {
        assets_stations.push(location.location_name)
        location_options.push({
            label: location.location_name,
        })
    }
})

let total_assets_count = 0
character_assets.locations.forEach( (i) => total_assets_count += i.assets.reduce( (c, i) => c + i.count , 0) )

const character_info:CharacterBasic = {
    character_id: character_assets.character_id ?? 0,
    character_name: character_assets.character_name ?? '',
}

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import AssetsListAlpine from '@components/blocks/AssetsListAlpine.astro';
import Input from '@components/blocks/Input.astro';
import RadioCheck from '@components/blocks/RadioCheck.astro';
import SelectFinder from '@components/blocks/SelectFinder.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import LoadingBlock from '@components/blocks/LoadingBlock.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';
import ListIcon from '@components/icons/buttons/ListIcon.astro';
import IconList from '@components/icons/buttons/IconList.astro';

const page_title = `${character_info.character_name} ${t('assets').toLowerCase()}`
---
<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
        modal: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/assets-cover.jpg",
            image_990: "/images/assets-cover-990.jpg",
            alt: t('assets.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            global_collapse: false,
            assets_style: $persist('list'),
            assets_locations: ${JSON.stringify(character_assets.locations)},
            assets_locations_icons: ${JSON.stringify(character_assets.location_icons)},
            assets_locations_filtered: ${JSON.stringify(character_assets.locations)},
            asset_name: '',
            asset_region: '-1',
            asset_system: '-1',
            asset_station: '-1',
            total_assets_count: ${total_assets_count},
            total_assets_count_unfiltered: ${total_assets_count},
            locations_options: ${JSON.stringify(location_options)},
            filter() {
                if (this.asset_name === '' && this.asset_station === '-1') {
                    this.assets_locations_filtered = (this.assets_style == 'list' ? this.assets_locations : this.assets_locations_icons)
                    this.total_assets_count = this.total_assets_count_unfiltered
                    return
                }

                this.assets_locations_filtered = []
                this.total_assets_count = 0
                const assets = (this.assets_style == 'list' ? this.assets_locations : this.assets_locations_icons)
                assets.forEach( (assets_location) => {
                    if (this.asset_station !== '-1' && assets_location.location_name !== this.asset_station)
                        return true

                    filtered_assets = assets_location.assets.filter( (asset) => asset.name.toLowerCase().includes(this.asset_name.toLowerCase()) )
                                      
                    if (filtered_assets.length > 0) {
                        this.total_assets_count += filtered_assets.reduce( (c, asset) => c + (asset?.count ?? 1) , 0 )
                        this.assets_locations_filtered.push({
                            location_name: assets_location.location_name,
                            assets: filtered_assets
                        })
                    }
                })
            },
            init() {
                $refs.server_side_render.remove()
            },
            character_id: ${character_info.character_id},
            character_name: '${character_info.character_name}',
        }`}
        x-effect="asset_station && filter()"
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <CharacterPicture
                    character_id={character_info.character_id}
                    character_name={character_info.character_name}
                    x_character_id="character_id"
                    x_character_name="character_name"
                />
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small x-text={`\`\${total_assets_count} \${total_assets_count != 1 ? '${t('assets').toLowerCase()}' : '${t('asset').toLowerCase()}'} ${t('in_inventory').toLowerCase()}\``}>
                        {total_assets_count} {total_assets_count != 1 ? t('assets').toLowerCase() : t('asset').toLowerCase()} {t('in_inventory').toLowerCase()}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="asset_name"
                    x-on:keyup="filter()"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <SelectFinder
                        placeholder={t('accessible_stations')}
                        options="locations_options"
                        model="asset_station"
                        width='280px'
                    />
                </div>
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <RadioCheck data-tippy-content={t('list_view_mode')}>
                <input
                    type="radio"
                    value="list"
                    name="assets-style"
                    x-model="assets_style"
                    x-on:change="filter()"
                    checked
                />
                <ListIcon />
            </RadioCheck>
            <RadioCheck data-tippy-content={t('icons_view_mode')}>
                <input
                    type="radio"
                    value="icons"
                    name="assets-style"
                    x-model="assets_style"
                    x-on:change="filter()"
                />
                <IconList />
            </RadioChecktype>
        </FlexInline>

        <div x-ref="server_side_render">
            {!get_character_assets_error &&
                <LoadingBlock message={t('loading_assets')} />
            }
        </div>
        {get_character_assets_error ?
            <ErrorRefetch
                args={{
                    partial: `${ASSETS_LIST_PARTIAL_URL}?character_id=${character_id}`,
                    message: get_character_assets_error,
                    delay: 0,
                }}
            />
            :
            <AssetsListAlpine />
        }
    </PageDefault>
</Viewport>