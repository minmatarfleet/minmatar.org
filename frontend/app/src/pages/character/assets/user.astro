---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

import type { AssetsUI, SelectOptions } from '@dtypes/layout_components'
import { get_user_assets } from '@helpers/fetching/characters'

let characters_assets:AssetsUI[] = []
let get_character_assets_error:string | false = false
try {
    characters_assets = await get_user_assets(auth_token)

    characters_assets = characters_assets.map((character_assets) => {
        const location_icons_sorted = character_assets.location_icons.map((i) => {
            i.assets = i.assets.sort((a, b) => a.name.localeCompare(b.name))
            return i
        })

        character_assets.location_icons = location_icons_sorted
        return character_assets
    })
} catch (error) {
    get_character_assets_error = prod_error_messages() ? t('get_character_assets_error') : error.message
}

const USER_ASSETS_LIST_PARTIAL_URL = translatePath('/partials/user_assets_list_component')

let assets_stations:string[] = []
let location_options:SelectOptions[] = []

characters_assets.map( (character_assets) => {
    character_assets.locations.map( (location) => {
        if (!assets_stations.includes(location.location_name)) {
            assets_stations.push(location.location_name)
            location_options.push({
                label: location.location_name,
            })
        }
    })
})

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import UserAssets from '@components/blocks/UserAssets.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Input from '@components/blocks/Input.astro';
import RadioCheck from '@components/blocks/RadioCheck.astro';
import SelectFinder from '@components/blocks/SelectFinder.astro';
import Button from '@components/blocks/Button.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';
import ListIcon from '@components/icons/buttons/ListIcon.astro';
import IconList from '@components/icons/buttons/IconList.astro';

const page_title = t('assets.user.page_title')
---
<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
        modal: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/assets-cover.jpg",
            image_990: "/images/assets-cover-990.jpg",
            alt: t('assets.cover_alt'),
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            global_collapse: false,
            global_players_collapse: false,
            assets_style: $persist('list'),
            asset_name: '',
            asset_region: '-1',
            asset_system: '-1',
            asset_station: '-1',
            locations_options: ${JSON.stringify(location_options)},
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="asset_name"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <SelectFinder
                        placeholder={t('accessible_stations')}
                        options="locations_options"
                        model="asset_station"
                        width='280px'
                    />
                </div>
            </FlexInline>
        </FlexInline>

        <FlexInline
            slot="subheader"
            gap='var(--space-l)'
            class="[ items-center ]"
        >
            <FlexInline>
                <RadioCheck data-tippy-content={t('list_view_mode')}>
                    <input
                        type="radio"
                        value="list"
                        name="assets-style"
                        x-model="assets_style"
                        x-on:change="filter()"
                        checked
                    />
                    <ListIcon />
                </RadioCheck>
                <RadioCheck data-tippy-content={t('icons_view_mode')}>
                    <input
                        type="radio"
                        value="icons"
                        name="assets-style"
                        x-model="assets_style"
                        x-on:change="filter()"
                    />
                    <IconList />
                </RadioChecktype>
            </FlexInline>
            <FlexInline>
                <Button
                    size='sm'
                    x-on:click='global_players_collapse = true'
                >
                    {t('collapse_characters')}
                </Button>
                <Button
                    size='sm'
                    x-on:click='global_collapse = true'
                >
                    {t('collapse_stations')}
                </Button>
            </FlexInline>
        </FlexInline>

        {get_character_assets_error ?
            <ErrorRefetch
                args={{
                    partial: `${USER_ASSETS_LIST_PARTIAL_URL}`,
                    message: get_character_assets_error,
                    delay: 0,
                }}
            />
            :
            <UserAssets
                characters_assets={characters_assets}
            />
        }
    </PageDefault>
</Viewport>