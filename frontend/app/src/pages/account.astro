---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { prod_error_messages } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import { semantic_list } from '@helpers/array';

let roles:string[] = []
if (user.is_superuser) roles.push(t('administrator'))
if (user.is_staff) roles.push(t('director'))
const roles_semantic_list:string = (roles.length > 0 ? semantic_list(lang, roles) : t('no_roles_assigned'))

import type { Character } from '@dtypes/api.minmatar.org'
import { get_characters } from '@helpers/api.minmatar.org/characters'

let pilots:Character[] = []
let get_characters_error:string | false = false
let readonly = false
try {
    pilots = await get_characters(auth_token);
} catch (error) {
    get_characters_error = (prod_error_messages() ? t('get_characters_error') : error.message)
    readonly = true
}

const DELETE_ACCOUNT_URL = translatePath('/api/auth')
const CLEAR_ACCOUNT_CACHE_URL = translatePath('/api/cache')
const PILOTS_LIST_PARTIAL_URL = translatePath('/partials/pilots_list_component/')

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Context from '@components/layout/Context.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import TextGroup from '@components/blocks/TextGroup.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import Tippy from '@components/blocks/Tippy.astro';

import PilotsList from '@components/blocks/PilotsList.astro';
import Mumble from '@components/blocks/Mumble.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import PushNotifications from '@components/blocks/PushNotifications.astro';
import DisableBlock from '@components/blocks/DisableBlock.astro';
import Button from '@components/blocks/Button.astro';
import SwitchSquare from '@components/blocks/SwitchSquare.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import LogoutIcon from '@components/icons/buttons/LogoutIcon.astro';

const page_title = t('account.page_title');
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
        modal: true
    }}
>
    <PageDefault
        cover={{
            image: "/images/account-cover.jpg",
            image_990: "/images/account-cover-990.jpg",
            alt: t('account.cover_alt'),
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            getDeviceInfo() {
                const ua = navigator.userAgent
                const platform = navigator.platform
                const vendor = navigator.vendor
                const browser = (() => {
                    if (ua.indexOf("Chrome") > -1) return "Chrome"
                    if (ua.indexOf("Safari") > -1) return "Safari"
                    if (ua.indexOf("Firefox") > -1) return "Firefox"
                    if (ua.indexOf("MSIE") > -1 || !!document.documentMode) return "IE" // MSIE or IE
                    return "Unknown"
                })()
                return {
                    userAgent: ua,
                    platform: platform,
                    vendor: vendor,
                    browser: browser,
                }
            },
        }`}
        x-init="console.log(getDeviceInfo())"
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <PageTitle>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/auth/logout/')}>
                    <LogoutIcon slot="icon" />
                    {t('logout')}
                </Button>
            </FlexInline>
        </FlexInline>
        
        <Flexblock>            
            <ComponentBlock width='narrow'>
                <FlexInline justification='space-between'>
                    <FlexInline class="[ grow ]">
                        <VerticalCenter class="[ basis-48 ]">
                            <TextGroup title={t('account_name')}>
                                {user.username}
                            </TextGroup>
                        </VerticalCenter>
                        <VerticalCenter class="[ basis-48 ]">
                            <TextGroup title={t('roles')}>
                                {roles_semantic_list}
                            </TextGroup>
                        </VerticalCenter>
                    </FlexInline>
                    <VerticalCenter>
                        <Tippy
                            data-tippy-placement="top"
                            partial={`${translatePath('/partials/normal_tooltip')}?description=clear_cache_description`}
                            height='70px'
                            width='340px'
                            element='div'
                            show_delay={2000}
                        >
                            <Button
                                size='sm'
                                type="button"
                                x-bind:disabled="disabled"
                                x-data={`{
                                    disabled: false,
                                    async clear_cache() {
                                        this.disabled = true
                                        
                                        await fetch(
                                            '${CLEAR_ACCOUNT_CACHE_URL}', {
                                                method: 'DELETE'
                                            }
                                        )

                                        navigate('${translatePath('/account')}')
                                    }
                                }`}
                                x-on:click="clear_cache()"
                            >
                                {t('clear_account_cache')}
                            </Button>
                        </Tippy>
                    </VerticalCenter>
                </FlexInline>
            </ComponentBlock>

            <Mumble />

            <ComponentBlock 
                width='narrow'
                x-data={`{
                    remove_request_ongoing: [],
                    start_remove_animation(character_id) {
                        if (!character_id) return
                        this.remove_request_ongoing.push(character_id)
                    },
                    stop_remove_animation(character_id) {
                        if (!character_id) return
                        this.remove_request_ongoing = this.remove_request_ongoing.filter(value => value !== character_id)
                    },
                }`}
            >
                {get_characters_error ?
                    <PilotsList
                        pilots={pilots}
                        readonly={readonly}
                    >
                        <ErrorRefetch
                            args={{
                                partial: PILOTS_LIST_PARTIAL_URL,
                                message: get_characters_error,
                                delay: 0,
                                target: '#pilots-list',
                            }}
                        />
                    </PilotsList>
                    :
                    <PilotsList
                        pilots={pilots}
                        readonly={readonly}
                    />
                }
            </ComponentBlock>

            <ComponentBlock
                width='narrow'
            >
                <PushNotifications />
            </ComponentBlock>

            <Context>
                <ComponentBlock
                    width='narrow'
                    x-data={`{
                        danger_zone_enable: false,
                    }`}
                >
                    <Flexblock gap='var(--space-l)' class="[ w-full ]">
                        <h2>{t('danger_zone')}</h2>

                        <SwitchSquare
                            class="[ w-full ]"
                            x-model="danger_zone_enable"
                            label={t('enable_danger_zone_switch_title')}
                            description={t('enable_danger_zone_switch_description')}
                        />

                        <DisableBlock x_model="danger_zone_enable">
                            <FlexInline
                                justification='space-between'
                                x-data={`{                                                
                                    async delete_account(proceed) {
                                        if (!proceed) return
                                        
                                        const response = await fetch(
                                            '${DELETE_ACCOUNT_URL}', {
                                                method: 'DELETE'
                                            }
                                        )

                                        if (!response.ok) {
                                            show_alert_dialog({
                                                title: '${t('delete_account_dialog_title')}',
                                                content: '${t('delete_account_error')}'
                                            })
                                            return
                                        }

                                        const json = await response.json()
                                        if (json.redirect)
                                            navigate(json.redirect)
                                    }
                                }`}
                            >
                                <TextGroup title={t('unregister_account')}>
                                    {t('unregister_account_description')}
                                </TextGroup>
                                <Button
                                    type="button"
                                    size='sm'
                                    x-data={`{
                                        show_unregister_account_dialog() {
                                            show_confirm_dialog({
                                                title: '${t('delete_account_dialog_title')}',
                                                content: '${t('delete_account_dialog_text')}'
                                            }).then( (accepted) => delete_account(accepted) )
                                        }
                                    }`}
                                    x-on:click="show_unregister_account_dialog()"
                                >
                                    {t('unregister')}
                                </Button>
                            </FlexInline>
                        </DisableBlock>
                    </Flexblock>
                </ComponentBlock>
            </Context>
        </Flexblock>
    </PageDefault>
</Viewport>

<style lang="scss">
    h3 {
        margin-block-start: var(--space-l);
    }
</style>