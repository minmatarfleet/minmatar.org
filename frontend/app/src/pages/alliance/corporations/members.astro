---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : null
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('eveonline.view_evecorporation')

if (!can_view_page)
    return HTTP_403_Forbidden()

import { get_corporations_members_data } from '@helpers/pages/corporations_members'
import type { CorporationsMembersData } from '@helpers/pages/corporations_members'

let corporations_members_data:CorporationsMembersData = {}
let data_fetching_error

try {
    corporations_members_data = await get_corporations_members_data(auth_token as string, lang, 'registered')
} catch (error) {
    data_fetching_error = error.message
}

const {
    corporations_members = [],
    main_count = 0,
    alliance_members_count = 0,
    unregistered_count = 0,
    corporations_unfiltered = {},
    corporations_members_count = {},
    total_members = 0,
    corporations_options = [],
} = corporations_members_data

const CORPORATIONS_MEMBERS_PARTIAL_URL = `${translatePath('/partials/corporations_members_component')}?status=registered`

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import CorporationMembersList from '@components/blocks/CorporationMembersList.astro';
import TextBox from '@components/layout/TextBox.astro';
import Input from '@components/blocks/Input.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Button from '@components/blocks/Button.astro';
import NotificationBadge from '@components/blocks/NotificationBadge.astro';
import SelectFinder from '@components/blocks/SelectFinder.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const page_title = t('corporations.members.page_title')
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/alliance-cover.jpg",
            image_990: "/images/alliance-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            main_count: ${main_count},
            alliance_members_count: ${alliance_members_count},
            unregistered_count: ${unregistered_count},
            global_collapsed: [],
            corporations_members: ${JSON.stringify(corporations_members)},
            corporations_unfiltered: ${JSON.stringify(corporations_unfiltered)},
            corporations_filtered: ${JSON.stringify(corporations_unfiltered)},
            corporations_filtered_members_count: ${JSON.stringify(corporations_members_count)},
            total_members_filtered: ${total_members},
            total_members_unfiltered: ${total_members},
            corporations_options: ${JSON.stringify(corporations_options)},
            character_name: '',
            corporation_filter: '-1',
            filter() {
                if (this.character_name === '' && this.corporation_filter === '-1') {
                    this.corporations_filtered = this.corporations_unfiltered
                    this.corporations_filtered_memberss_count = ${JSON.stringify(corporations_members_count)}
                    this.total_members_filtered = this.total_members_unfiltered
                    return
                }

                this.corporations_filtered = {}
                this.corporations_filtered_memberss_count = {}
                this.total_members_filtered = 0

                this.corporations_members.forEach( (corporation) => {
                    if (this.corporation_filter !== '-1' && parseInt(this.corporation_filter) !== corporation.corporation_id) {
                        this.corporations_filtered[corporation.corporation_id] = []
                        this.corporations_filtered_members_count[corporation.corporation_id] = 0
                        return true
                    }

                    const members = corporation.members.filter( (member) => member.character_name.toLowerCase().includes(this.character_name.toLowerCase()) )
                    
                    if (members.length > 0) {
                        this.total_members_filtered += members.length
                        this.corporations_filtered[corporation.corporation_id] = members.map( (member) => member.character_id )
                        this.corporations_filtered_members_count[corporation.corporation_id] = members.length
                    }
                })
            },
        }`}
        x-effect="corporation_filter && filter()"
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <PageTitle>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="character_name"
                    x-on:keyup="filter()"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <SelectFinder
                        size={32}
                        placeholder={t('corporations')}
                        options="corporations_options"
                        model="corporation_filter"
                        width='280px'
                    />
                </div>
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                color='transparent'
                href={translatePath('/alliance/corporations/members')}
                size='sm'
            >
                {t('members')}
                <NotificationBadge
                    x-text="alliance_members_count"
                    number={total_members ?? 0}
                />
            </Button>

            <Button
                href={translatePath('/alliance/corporations/members/unregistered')}
                size='sm'
            >
                {t('unregistered')}
                <NotificationBadge
                    color='fleet-yellow'
                    x-text="unregistered_count"
                    number={unregistered_count ?? 0}
                />
            </Button>
            
            <Button
                href={translatePath('/alliance/corporations/members/mains')}
                size='sm'
            >
                {t('mains')}
                <NotificationBadge
                    color='fleet-yellow'
                    x-text="main_count"
                    number={main_count ?? 0}
                />
            </Button>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('corporations.members.leading_text')}</p>
            </TextBox>

            {data_fetching_error ?
                <ErrorRefetch
                    args={{
                        partial: CORPORATIONS_MEMBERS_PARTIAL_URL,
                        message: data_fetching_error,
                        delay: 0,
                    }}
                />
                :
                <CorporationMembersList corporations={corporations_members} />
            }
        </Flexblock>
    </PageDefault>
</Viewport>