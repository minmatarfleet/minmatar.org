---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { HTTP_403_Forbidden } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? (Astro.cookies.get('auth_token')?.value as string) : null
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('applications.change_evecorporationapplication')

if (!can_view_page)
    return HTTP_403_Forbidden()

import { get_applications_data } from '@helpers/pages/applications'
import type { ApplicationsData } from '@helpers/pages/applications'

let applications_data:ApplicationsData = {}
let data_fetching_error

try {
    applications_data = await get_applications_data(auth_token as string, lang)
} catch (error) {
    data_fetching_error = error.message
}

const {
    corporations_applications = [],
    corporations_unfiltered = [],
    corporations_applications_count = [],
    total_applications = 0,
    corporations_options = [],
} = applications_data

const CORPORATIONS_APPLICATIONS_PARTIAL_URL = translatePath('/partials/corporations_applications_component')

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import CorporationApplicationsList from '@components/blocks/CorporationApplicationsList.astro';
import TextBox from '@components/layout/TextBox.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Button from '@components/blocks/Button.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const page_title = t('corporations.applications.page_title')
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/alliance-cover.jpg",
            image_990: "/images/alliance-cover.jpg",
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            global_collapse: false,
            corporations_applications: ${JSON.stringify(corporations_applications)},
            corporations_unfiltered: ${JSON.stringify(corporations_unfiltered)},
            corporations_filtered: ${JSON.stringify(corporations_unfiltered)},
            corporations_filtered_applications_count: ${JSON.stringify(corporations_applications_count)},
            total_applications_filtered: ${total_applications},
            total_applications_unfiltered: ${total_applications},
            corporations_options: ${JSON.stringify(corporations_options)},
            character_name: '',
            corporation_filter: '-1',
            filter() {
                if (this.character_name === '' && this.corporation_filter === '-1') {
                    this.corporations_filtered = this.corporations_unfiltered
                    this.corporations_filtered_applicationss_count = ${JSON.stringify(corporations_applications_count)}
                    this.total_applications_filtered = this.total_applications_unfiltered
                    return
                }

                this.corporations_filtered = {}
                this.corporations_filtered_applicationss_count = {}
                this.total_applications_filtered = 0

                this.corporations_applications.forEach( (corporation) => {
                    if (this.corporation_filter !== '-1' && parseInt(this.corporation_filter) !== corporation.corporation_id) {
                        this.corporations_filtered[corporation.corporation_id] = []
                        this.corporations_filtered_applications_count[corporation.corporation_id] = 0
                        return true
                    }

                    const applications = corporation.applications.filter( (application) => application.character_name.toLowerCase().includes(this.character_name.toLowerCase()) )
                    
                    if (applications.length > 0) {
                        this.total_applications_filtered += applications.length
                        this.corporations_filtered[corporation.corporation_id] = applications.map( (application) => application.id )
                        this.corporations_filtered_applications_count[corporation.corporation_id] = applications.length
                    }
                })
            },
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <PageTitle>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="character_name"
                    x-on:keyup="filter()"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <Select
                        x-model="corporation_filter"
                        width='280px'
                        x-on:change="filter()"
                    >
                        <option selected value="-1">{t('corporations')}</option>
                        <template x-for="corporation in corporations_options">
                            <option x-bind:value="corporation.value" x-text="corporation.label" />
                        </template>
                    </Select>
                </div>
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                href={translatePath('/alliance/corporations/applications/records')}
                size='sm'
            >
                {t('view_records')}
            </Button>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('corporations.applications.leading_text')}</p>
            </TextBox>

            {data_fetching_error ?
                <ErrorRefetch
                    args={{
                        partial: CORPORATIONS_APPLICATIONS_PARTIAL_URL,
                        message: data_fetching_error,
                        delay: 0,
                    }}
                />
                :
                <CorporationApplicationsList corporations={corporations_applications} />
            }
        </Flexblock>
    </PageDefault>
</Viewport>