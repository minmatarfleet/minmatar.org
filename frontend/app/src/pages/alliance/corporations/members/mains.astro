---
import { i18n } from '@helpers/i18n'
const { lang, t, translatePath } = i18n(Astro.url)

import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : null
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('eveonline.view_evecorporation')

if (!can_view_page)
    return HTTP_404_Not_Found()

import { get_mains_data } from '@helpers/pages/mains'
import type { MainsData } from '@helpers/pages/mains'

let mains_data:MainsData = {}
let data_fetching_error

try {
    mains_data = await get_mains_data(auth_token, lang)
} catch (error) {
    data_fetching_error = error
}

const {
    mains_alts = [],
    main_count = 0,
    alliance_members_count = 0,
    unregistered_count = 0,
    mains_unfiltered = {},
    mains_alts_count = {},
    total_alts = 0,
    mains_options = [],
} = mains_data

const MAINS_ALTS_PARTIAL_URL = `${translatePath('/partials/mains_alts_component')}`

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import MainAltsList from '@components/blocks/MainAltsList.astro';
import TextBox from '@components/layout/TextBox.astro';
import Input from '@components/blocks/Input.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Button from '@components/blocks/Button.astro';
import NotificationBadge from '@components/blocks/NotificationBadge.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const page_title = t('corporations.members.mains.page_title')
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/alliance-cover.jpg",
            image_990: "/images/alliance-cover-990.jpg",
            alt: t('alliance.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            main_count: ${main_count},
            alliance_members_count: ${alliance_members_count},
            unregistered_count: ${unregistered_count},
            global_collapsed: [],
            mains_alts: ${JSON.stringify(mains_alts)},
            mains_unfiltered: ${JSON.stringify(mains_unfiltered)},
            mains_filtered: ${JSON.stringify(mains_unfiltered)},
            mains_filtered_alts_count: ${JSON.stringify(mains_alts_count)},
            total_alts_filtered: ${total_alts},
            total_alts_unfiltered: ${total_alts},
            mains_options: ${JSON.stringify(mains_options)},
            character_name: '',
            main_filter: '-1',
            filter() {
                if (this.character_name === '') {
                    this.mains_filtered = this.mains_unfiltered
                    this.mains_filtered_alts_count = ${JSON.stringify(mains_alts_count)}
                    this.total_alts_filtered = this.total_alts_unfiltered
                    return
                }

                this.mains_filtered = {}
                this.mains_filtered_alts_count = {}
                this.total_alts_filtered = 0

                this.mains_alts.forEach( (main) => {
                    let alts

                    if (main.character_name.toLowerCase().includes(this.character_name.toLowerCase())) {
                        alts = main.alts
                        this.mains_filtered[main.character_id] = alts
                    } else
                        alts = main.alts.filter( (alt) => alt.character_name.toLowerCase().includes(this.character_name.toLowerCase()) )
                    
                    if (alts.length > 0) {
                        this.total_alts_filtered += alts.length
                        this.mains_filtered[main.character_id] = alts.map( (alt) => alt.character_id )
                        this.mains_filtered_alts_count[main.character_id] = alts.length
                    }
                })
            },
        }`}
    >
        <FlexInline slot="header" justification='space-between' class="[ w-full ]">
            <PageTitle>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="character_name"
                    x-on:keyup="filter()"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
            </FlexInline>
        </FlexInline>

        <FlexInline slot="subheader">
            <Button
                href={translatePath('/alliance/corporations/members')}
                size='sm'
            >
                {t('members')}
                <NotificationBadge
                    color='fleet-yellow'
                    x-text="alliance_members_count"
                    number={total_alts ?? 0}
                />
            </Button>

            <Button
                href={translatePath('/alliance/corporations/members/unregistered')}
                size='sm'
            >
                {t('unregistered')}
                <NotificationBadge
                    color='fleet-yellow'
                    x-text="unregistered_count"
                    number={unregistered_count ?? 0}
                />
            </Button>
            
            <Button
                color='transparent'
                href={translatePath('/alliance/corporations/members/mains')}
                size='sm'
            >
                {t('mains')}
                <NotificationBadge
                    x-text="main_count"
                    number={main_count ?? 0}
                />
            </Button>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('corporations.members.mains.leading_text')}</p>
            </TextBox>

            {data_fetching_error ?
                <ErrorRefetch
                    args={{
                        partial: MAINS_ALTS_PARTIAL_URL,
                        message: data_fetching_error,
                        delay: 0,
                    }}
                />
                :
                <MainAltsList mains={mains_alts} />
            }
        </Flexblock>
    </PageDefault>
</Viewport>