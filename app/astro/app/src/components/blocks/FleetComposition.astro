---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import type { FleetComposition } from '@dtypes/LayoutComponents'

import { get_item_icon, get_player_icon } from '@lib/eve_image_server';

import FixedFluid from '@components/compositions/FixedFluid.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';
import Grid from '@components/compositions/Grid.astro';
import CollapsableButton from './CollapsableButton.astro';

interface Props {
    composition: FleetComposition[]
}

const {
    composition,
} = Astro.props
---

<Flexblock gap="var(--space-l)">
    {composition.map((group) =>
        <Flexblock
            gap="var(--space-l)"
            x-data={`{
                expanded: true,
                check_global_collapse() {
                    if (global_collapse)
                        this.expanded = false
                },
                toggle_collapse() {
                    this.expanded = !this.expanded

                    if (this.expanded)
                        global_collapse = false
                }
            }`}
            x-effect="check_global_collapse()"
        >
            <CollapsableButton @click="toggle_collapse()">
                <FlexInline class="[ items-center ]" gap="var(--space-s)">
                    <img width="64" height="64" src={get_item_icon(group.ship_id, 64)} alt={group.ship_name} class="[ hidden sm:flex ]" />
                    <Flexblock gap="var(--space-3xs)">
                        <h4>{group.fitting}</h4>
                        <small>{group.pilots.length} {t('pilot').toLowerCase()}{group.pilots.length > 1 && `s`}</small>
                    </Flexblock>
                </FlexInline>
            </CollapsableButton>

            <Flexblock gap="var(--space-3xs)" class="[ pl-[16px] ]" x-show="expanded && !global_collapse" x-collapse.duration.0ms>
                <Grid class="[ w-full ]" row_gap="var(--space-2xs)" column_gap="var(--space-2xs)" min_item_width="180px">
                    {group.pilots.map((pilot) =>
                        <FixedFluid class="[ items-center ]" gap="var(--space-2xs)" width="32px" data-member>
                            <img width="32" height="32" src={get_player_icon(pilot.id, 32)} alt={`${pilot.name} portrait`} />
                            <p class="[ truncate ]">{pilot.name}</p>
                        </FixedFluid>
                    )}
                </Grid>
            </Flexblock>
        </Flexblock>
    )}
</Flexblock>

<style lang="scss">
    h4 {
        font-family: var(--content-font);
        text-transform: none;
    }
    
    small {
        color: var(--foreground);
    }
</style>